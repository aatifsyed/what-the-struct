{"root":"0:0:279","crate_version":"1.68.0-dev","includes_private":false,"index":{"0:5696:571":{"id":"0:5696:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/sync.rs","begin":[2237,4],"end":[2252,5]},"visibility":"default","docs":"Drops the `Weak` pointer.\n\n# Examples\n\n```\nuse std::sync::{Arc, Weak};\n\nstruct Foo;\n\nimpl Drop for Foo {\n    fn drop(&mut self) {\n        println!(\"dropped!\");\n    }\n}\n\nlet foo = Arc::new(Foo);\nlet weak_foo = Arc::downgrade(&foo);\nlet other_weak_foo = Weak::clone(&weak_foo);\n\ndrop(weak_foo);   // Doesn't print anything\ndrop(foo);        // Prints \"dropped!\"\n\nassert!(other_weak_foo.upgrade().is_none());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:3096:4069":{"id":"b:1:2499-0:3096:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3096:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6646:2885":{"id":"0:6646:2885","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3011,4],"end":[3013,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4445":{"id":"0:4445","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[567,41],"end":[567,49]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::DebugSet","name":"DebugSet","id":"1:8363:6925","glob":false}},"0:6594":{"id":"0:6594","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2736,0],"end":[2741,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_on_unimplemented(message =\n\"vector indices are of type `usize` or ranges of `usize`\", label =\n\"vector indices are of type `usize` or ranges of `usize`\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9110:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:2973:5511","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6598:743"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2499-0:6740:3364":{"id":"b:1:2499-0:6740:3364","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5403":{"id":"0:5403","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2795,0],"end":[2813,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"cow_from_string_ref\", since = \"1.28.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:5405:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3252:921":{"id":"0:3252:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1678,4],"end":[1685,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:4521:198":{"id":"b:1:2499-0:4521:198","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5337:180":{"id":"0:5337:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/string.rs","begin":[2403,4],"end":[2403,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"str"}}},"0:1485:3320":{"id":"0:1485:3320","crate_id":0,"name":"append","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1126,4],"end":[1151,5]},"visibility":"public","docs":"Moves all elements from `other` into `self`, leaving `other` empty.\n\nIf a key from `other` is already present in `self`, the respective\nvalue from `self` will be overwritten with the respective value from `other`.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(1, \"a\");\na.insert(2, \"b\");\na.insert(3, \"c\"); // Note: Key (3) also present in b.\n\nlet mut b = BTreeMap::new();\nb.insert(3, \"d\"); // Note: Key (3) also present in a.\nb.insert(4, \"e\");\nb.insert(5, \"f\");\n\na.append(&mut b);\n\nassert_eq!(a.len(), 5);\nassert_eq!(b.len(), 0);\n\nassert_eq!(a[&1], \"a\");\nassert_eq!(a[&2], \"b\");\nassert_eq!(a[&3], \"d\"); // Note: \"c\" has been overwritten.\nassert_eq!(a[&4], \"e\");\nassert_eq!(a[&5], \"f\");\n```","links":{},"attrs":["#[stable(feature = \"btree_append\", since = \"1.11.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:959":{"id":"0:959","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1571,0],"end":[1571,56]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"trusted_len\", issue = \"37572\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TrustedLen","id":"1:7403:3146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainSorted","id":"0:6757:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:883":{"id":"0:883","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1359,0],"end":[1359,40]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6693:668":{"id":"0:6693:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3137,4],"end":[3139,5]},"visibility":"default","docs":"Allocate a `Vec<T>` and fill it by cloning `s`'s items.\n\n# Examples\n\n```\nassert_eq!(Vec::from(&mut [1, 2, 3][..]), vec![1, 2, 3]);\n```","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3280:2751":{"id":"0:3280:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1778,4],"end":[1782,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:859:3356":{"id":"a:1:7709:3766-0:859:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5373:1398":{"id":"0:5373:1398","crate_id":0,"name":"to_string","span":{"filename":"library/alloc/src/string.rs","begin":[2598,4],"end":[2600,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4911:7759":{"id":"0:4911:7759","crate_id":0,"name":"sort_by_key","span":{"filename":"library/alloc/src/slice.rs","begin":[300,4],"end":[306,5]},"visibility":"public","docs":"Sorts the slice with a key extraction function.\n\nThis sort is stable (i.e., does not reorder equal elements) and *O*(*m* \\* *n* \\* log(*n*))\nworst-case, where the key function is *O*(*m*).\n\nFor expensive key functions (e.g. functions that are not simple property accesses or\nbasic operations), [`sort_by_cached_key`](slice::sort_by_cached_key) is likely to be\nsignificantly faster, as it does not recompute element keys.\n\nWhen applicable, unstable sorting is preferred because it is generally faster than stable\nsorting and it doesn't allocate auxiliary memory.\nSee [`sort_unstable_by_key`](slice::sort_unstable_by_key).\n\n# Current implementation\n\nThe current algorithm is an adaptive, iterative merge sort inspired by\n[timsort](https://en.wikipedia.org/wiki/Timsort).\nIt is designed to be very fast in cases where the slice is nearly sorted, or consists of\ntwo or more sorted sequences concatenated one after another.\n\nAlso, it allocates temporary storage half the size of `self`, but for short slices a\nnon-allocating insertion sort is used instead.\n\n# Examples\n\n```\nlet mut v = [-5i32, 4, 1, -3, 2];\n\nv.sort_by_key(|k| k.abs());\nassert!(v == [1, 2, -3, 4, -5]);\n```","links":{"slice::sort_unstable_by_key":"1:10444:13695","slice::sort_by_cached_key":"0:4915:7781"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[stable(feature = \"slice_sort_by_key\", since = \"1.7.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"generic","inner":"K"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5061":{"id":"0:5061","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[51,29],"end":[51,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::SplitN","name":"SplitN","id":"1:50069:7703","glob":false}},"0:4123:5327":{"id":"0:4123:5327","crate_id":0,"name":"back_mut","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1544,4],"end":[1546,5]},"visibility":"public","docs":"Provides a mutable reference to the back element, or `None` if the\ndeque is empty.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nassert_eq!(d.back(), None);\n\nd.push_back(1);\nd.push_back(2);\nmatch d.back_mut() {\n    Some(x) => *x = 9,\n    None => (),\n}\nassert_eq!(d.back(), Some(&9));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6950":{"id":"0:6950","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[159,16],"end":[159,25]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6951:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:807:3255":{"id":"0:807:3255","crate_id":0,"name":"peek_mut","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[428,4],"end":[430,5]},"visibility":"public","docs":"Returns a mutable reference to the greatest item in the binary heap, or\n`None` if it is empty.\n\nNote: If the `PeekMut` value is leaked, the heap may be in an\ninconsistent state.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::new();\nassert!(heap.peek_mut().is_none());\n\nheap.push(1);\nheap.push(5);\nheap.push(2);\n{\n    let mut val = heap.peek_mut().unwrap();\n    *val = 0;\n}\nassert_eq!(heap.peek(), Some(&2));\n```\n\n# Time complexity\n\nIf the item is modified then the worst case time complexity is *O*(log(*n*)),\notherwise it's *O*(1).","links":{},"attrs":["#[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"PeekMut","id":"0:771:3221","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3805:650":{"id":"0:3805:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:587:206":{"id":"0:587:206","crate_id":0,"name":"Return","span":{"filename":"library/alloc/src/boxed.rs","begin":[2109,4],"end":[2109,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Return","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"G"},"trait":{"name":"Generator","id":"1:2951:2334","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}}},"b:1:2505-0:6944:6202":{"id":"b:1:2505-0:6944:6202","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3303-0:3531:4069":{"id":"b:1:3303-0:3531:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3531:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2658:222-0:6944:6202":{"id":"a:1:2658:222-0:6944:6202","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5054":{"id":"0:5054","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[47,20],"end":[47,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::Matches","name":"Matches","id":"1:50169:7944","glob":false}},"0:6983:995":{"id":"0:6983:995","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/string.rs","begin":[364,9],"end":[364,19]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:831:2086":{"id":"0:831:2086","crate_id":0,"name":"reserve","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[963,4],"end":[965,5]},"visibility":"public","docs":"Reserves capacity for at least `additional` elements more than the\ncurrent length. The allocator may reserve more space to speculatively\navoid frequent allocations. After calling `reserve`,\ncapacity will be greater than or equal to `self.len() + additional`.\nDoes nothing if capacity is already sufficient.\n\n# Panics\n\nPanics if the new capacity overflows [`usize`].\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::new();\nheap.reserve(100);\nassert!(heap.capacity() >= 100);\nheap.push(4);\n```","links":{"`usize`":"1:58453:10478"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1768:2753":{"id":"0:1768:2753","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1994,4],"end":[1996,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3161":{"id":"0:3161","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1458,0],"end":[1480,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BitOr","id":"1:2799:4874","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"items":["0:3164:180","0:3165:356"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:682:2677":{"id":"0:682:2677","crate_id":0,"name":"Owned","span":{"filename":"library/alloc/src/borrow.rs","begin":[189,4],"end":[189,78]},"visibility":"default","docs":"Owned data.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:684:1545"]}},"0:5346:743":{"id":"0:5346:743","crate_id":0,"name":"index_mut","span":{"filename":"library/alloc/src/string.rs","begin":[2435,4],"end":[2437,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["_index",{"kind":"resolved_path","inner":{"name":"ops::RangeFull","id":"1:46305:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4583:7194":{"id":"0:4583:7194","crate_id":0,"name":"strong_count","span":{"filename":"library/alloc/src/rc.rs","begin":[977,4],"end":[979,5]},"visibility":"public","docs":"Gets the number of strong (`Rc`) pointers to this allocation.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\nlet _also_five = Rc::clone(&five);\n\nassert_eq!(2, Rc::strong_count(&five));\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rc_counts\", since = \"1.15.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4369:668":{"id":"0:4369:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[802,4],"end":[816,5]},"visibility":"default","docs":"Converts a <code>[Vec]<[NonZeroU8]></code> into a [`CString`] without\ncopying nor checking for inner null bytes.","links":{"NonZeroU8":"1:21616:172","`CString`":"0:6897:102","Vec":"0:6407:237"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonZeroU8","id":"1:21616:172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:0:671-0:3004:4940":{"id":"b:0:671-0:3004:4940","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:3004:4940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5928":{"id":"0:5928","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/splice.rs","begin":[44,0],"end":[48,1]},"visibility":{"restricted":{"parent":"0:5911:8668","path":"::vec::splice"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"vec_splice\", since = \"1.21.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Splice","id":"0:7074:9310","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:5931:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6896:650":{"id":"0:6896:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[80,31],"end":[80,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6582:411":{"id":"0:6582:411","crate_id":0,"name":"clone_from","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2692,4],"end":[2694,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5678":{"id":"0:5678","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[1995,0],"end":[2153,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5680:7614","0:5683:7194","0:5684:7257","0:5687:7324"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3544:921":{"id":"0:3544:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1723,4],"end":[1738,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6425:2020":{"id":"0:6425:2020","crate_id":0,"name":"capacity","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[883,4],"end":[885,5]},"visibility":"public","docs":"Returns the total number of elements the vector can hold without\nreallocating.\n\n# Examples\n\n```\nlet mut vec: Vec<i32> = Vec::with_capacity(10);\nvec.push(42);\nassert_eq!(vec.capacity(), 10);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3201:2759":{"id":"0:3201:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1549,4],"end":[1551,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:412:668":{"id":"0:412:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1497,4],"end":[1504,5]},"visibility":"default","docs":"Converts a `&[T]` into a `Box<[T]>`\n\nThis conversion allocates on the heap\nand performs a copy of `slice` and its contents.\n\n# Examples\n```rust\n// create a &[u8] which will be used to create a Box<[u8]>\nlet slice: &[u8] = &[104, 101, 108, 108, 111];\nlet boxed_slice: Box<[u8]> = Box::from(slice);\n\nprintln!(\"{boxed_slice:?}\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3434:2751":{"id":"0:3434:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1044,4],"end":[1046,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:4737:7157":{"id":"b:1:2495-0:4737:7157","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2977:650":{"id":"0:2977:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[247,4],"end":[249,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6489:9872":{"id":"0:6489:9872","crate_id":0,"name":"push_within_capacity","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1877,4],"end":[1887,5]},"visibility":"public","docs":"Appends an element if there is sufficient spare capacity, otherwise an error is returned\nwith the element.\n\nUnlike [`push`] this method will not reallocate when there's insufficient capacity.\nThe caller should use [`reserve`] or [`try_reserve`] to ensure that there is enough capacity.\n\n[`push`]: Vec::push\n[`reserve`]: Vec::reserve\n[`try_reserve`]: Vec::try_reserve\n\n# Examples\n\nA manual, panic-free alternative to [`FromIterator`]:\n\n```\n#![feature(vec_push_within_capacity)]\n\nuse std::collections::TryReserveError;\nfn from_iter_fallible<T>(iter: impl Iterator<Item=T>) -> Result<Vec<T>, TryReserveError> {\n    let mut vec = Vec::new();\n    for value in iter {\n        if let Err(value) = vec.push_within_capacity(value) {\n            vec.try_reserve(1)?;\n            // this cannot fail, the previous line either returned or added at least 1 free slot\n            let _ = vec.push_within_capacity(value);\n        }\n    }\n    Ok(vec)\n}\nassert_eq!(from_iter_fallible(0..100), Ok(Vec::from_iter(0..100)));\n```","links":{"Vec::push":"0:6488:3275","Vec::reserve":"0:6426:2086","Vec::try_reserve":"0:6428:2097","`FromIterator`":"1:7012:132"},"attrs":["#[inline]","#[unstable(feature = \"vec_push_within_capacity\", issue = \"100486\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:141:1791":{"id":"0:141:1791","crate_id":0,"name":"boxed","span":{"filename":"library/alloc/src/boxed.rs","begin":[1,0],"end":[2428,1]},"visibility":"public","docs":"The `Box<T>` type for heap allocation.\n\n[`Box<T>`], casually referred to as a 'box', provides the simplest form of\nheap allocation in Rust. Boxes provide ownership for this allocation, and\ndrop their contents when they go out of scope. Boxes also ensure that they\nnever allocate more than `isize::MAX` bytes.\n\n# Examples\n\nMove a value from the stack to the heap by creating a [`Box`]:\n\n```\nlet val: u8 = 5;\nlet boxed: Box<u8> = Box::new(val);\n```\n\nMove a value from a [`Box`] back to the stack by [dereferencing]:\n\n```\nlet boxed: Box<u8> = Box::new(5);\nlet val: u8 = *boxed;\n```\n\nCreating a recursive data structure:\n\n```\n#[derive(Debug)]\nenum List<T> {\n    Cons(T, Box<List<T>>),\n    Nil,\n}\n\nlet list: List<i32> = List::Cons(1, Box::new(List::Cons(2, Box::new(List::Nil))));\nprintln!(\"{list:?}\");\n```\n\nThis will print `Cons(1, Cons(2, Nil))`.\n\nRecursive structures must be boxed, because if the definition of `Cons`\nlooked like this:\n\n```compile_fail,E0072\n# enum List<T> {\nCons(T, List<T>),\n# }\n```\n\nIt wouldn't work. This is because the size of a `List` depends on how many\nelements are in the list, and so we don't know how much memory to allocate\nfor a `Cons`. By introducing a [`Box<T>`], which has a defined size, we know how\nbig `Cons` needs to be.\n\n# Memory layout\n\nFor non-zero-sized values, a [`Box`] will use the [`Global`] allocator for\nits allocation. It is valid to convert both ways between a [`Box`] and a\nraw pointer allocated with the [`Global`] allocator, given that the\n[`Layout`] used with the allocator is correct for the type. More precisely,\na `value: *mut T` that has been allocated with the [`Global`] allocator\nwith `Layout::for_value(&*value)` may be converted into a box using\n[`Box::<T>::from_raw(value)`]. Conversely, the memory backing a `value: *mut\nT` obtained from [`Box::<T>::into_raw`] may be deallocated using the\n[`Global`] allocator with [`Layout::for_value(&*value)`].\n\nFor zero-sized values, the `Box` pointer still has to be [valid] for reads\nand writes and sufficiently aligned. In particular, casting any aligned\nnon-zero integer literal to a raw pointer produces a valid pointer, but a\npointer pointing into previously allocated memory that since got freed is\nnot valid. The recommended way to build a Box to a ZST if `Box::new` cannot\nbe used is to use [`ptr::NonNull::dangling`].\n\nSo long as `T: Sized`, a `Box<T>` is guaranteed to be represented\nas a single pointer and is also ABI-compatible with C pointers\n(i.e. the C type `T*`). This means that if you have extern \"C\"\nRust functions that will be called from C, you can define those\nRust functions using `Box<T>` types, and use `T*` as corresponding\ntype on the C side. As an example, consider this C header which\ndeclares functions that create and destroy some kind of `Foo`\nvalue:\n\n```c\n/* C header */\n\n/* Returns ownership to the caller */\nstruct Foo* foo_new(void);\n\n/* Takes ownership from the caller; no-op when invoked with null */\nvoid foo_delete(struct Foo*);\n```\n\nThese two functions might be implemented in Rust as follows. Here, the\n`struct Foo*` type from C is translated to `Box<Foo>`, which captures\nthe ownership constraints. Note also that the nullable argument to\n`foo_delete` is represented in Rust as `Option<Box<Foo>>`, since `Box<Foo>`\ncannot be null.\n\n```\n#[repr(C)]\npub struct Foo;\n\n#[no_mangle]\npub extern \"C\" fn foo_new() -> Box<Foo> {\n    Box::new(Foo)\n}\n\n#[no_mangle]\npub extern \"C\" fn foo_delete(_: Option<Box<Foo>>) {}\n```\n\nEven though `Box<T>` has the same representation and C ABI as a C pointer,\nthis does not mean that you can convert an arbitrary `T*` into a `Box<T>`\nand expect things to work. `Box<T>` values will always be fully aligned,\nnon-null pointers. Moreover, the destructor for `Box<T>` will attempt to\nfree the value with the global allocator. In general, the best practice\nis to only use `Box<T>` for pointers that originated from the global\nallocator.\n\n**Important.** At least at present, you should avoid using\n`Box<T>` types for functions that are defined in C but invoked\nfrom Rust. In those cases, you should directly mirror the C types\nas closely as possible. Using types like `Box<T>` where the C\ndefinition is just using `T*` can lead to undefined behavior, as\ndescribed in [rust-lang/unsafe-code-guidelines#198][ucg#198].\n\n# Considerations for unsafe code\n\n**Warning: This section is not normative and is subject to change, possibly\nbeing relaxed in the future! It is a simplified summary of the rules\ncurrently implemented in the compiler.**\n\nThe aliasing rules for `Box<T>` are the same as for `&mut T`. `Box<T>`\nasserts uniqueness over its content. Using raw pointers derived from a box\nafter that box has been mutated through, moved or borrowed as `&mut T`\nis not allowed. For more guidance on working with box from unsafe code, see\n[rust-lang/unsafe-code-guidelines#326][ucg#326].\n\n\n[ucg#198]: https://github.com/rust-lang/unsafe-code-guidelines/issues/198\n[ucg#326]: https://github.com/rust-lang/unsafe-code-guidelines/issues/326\n[dereferencing]: core::ops::Deref\n[`Box::<T>::from_raw(value)`]: Box::from_raw\n[`Global`]: crate::alloc::Global\n[`Layout`]: crate::alloc::Layout\n[`Layout::for_value(&*value)`]: crate::alloc::Layout::for_value\n[valid]: ptr#safety","links":{"ptr#safety":"1:1662:1047","`Box`":"0:276:1792","crate::alloc::Layout":"1:50943:155","crate::alloc::Global":"0:6725:1970","`Box<T>`":"0:276:1792","core::ops::Deref":"1:2886:115","crate::alloc::Layout::for_value":"1:11915:7394","`ptr::NonNull::dangling`":"1:1824:2029","Box::from_raw":"0:326:2513","`Box::<T>::into_raw`":"0:331:2546"},"attrs":["#[cfg(not(test))]","#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:193","0:276:1792"],"is_stripped":false}},"0:673:2677":{"id":"0:673:2677","crate_id":0,"name":"Owned","span":{"filename":"library/alloc/src/borrow.rs","begin":[86,4],"end":[86,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:6110":{"id":"0:6110","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[178,0],"end":[178,68]},"visibility":{"restricted":{"parent":"0:6056:757","path":"::vec::into_iter"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3598:3475":{"id":"0:3598:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1845,4],"end":[1845,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3352:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"0:4714:668":{"id":"0:4714:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/rc.rs","begin":[2052,4],"end":[2055,5]},"visibility":"default","docs":"Converts a reference-counted string slice into a byte slice.\n\n# Example\n\n```\n# use std::rc::Rc;\nlet string: Rc<str> = Rc::from(\"eggplant\");\nlet bytes: Rc<[u8]> = Rc::from(string);\nassert_eq!(\"eggplant\".as_bytes(), bytes.as_ref());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["rc",{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4720:1418":{"id":"0:4720:1418","crate_id":0,"name":"try_from","span":{"filename":"library/alloc/src/rc.rs","begin":[2062,4],"end":[2068,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["boxed_slice",{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:2479:230","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1831":{"id":"0:1831","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2097,0],"end":[2101,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangeMut","id":"0:1435:3845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1835:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7710:3767-0:6734:3475":{"id":"a:1:7710:3767-0:6734:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:369:781":{"id":"0:369:781","crate_id":0,"name":"le","span":{"filename":"library/alloc/src/boxed.rs","begin":[1357,4],"end":[1359,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6948:409":{"id":"0:6948:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[159,9],"end":[159,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:840:3448":{"id":"0:840:3448","crate_id":0,"name":"drain","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1199,4],"end":[1201,5]},"visibility":"public","docs":"Clears the binary heap, returning an iterator over the removed elements\nin arbitrary order. If the iterator is dropped before being fully\nconsumed, it drops the remaining elements in arbitrary order.\n\nThe returned iterator keeps a mutable borrow on the heap to optimize\nits implementation.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::from([1, 3]);\n\nassert!(!heap.is_empty());\n\nfor x in heap.drain() {\n    println!(\"{x}\");\n}\n\nassert!(heap.is_empty());\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:6749:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4367:668":{"id":"0:4367:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[791,4],"end":[794,5]},"visibility":"default","docs":"Converts a <code>[Box]<[CStr]></code> into a [`CString`] without copying or allocating.","links":{"CStr":"1:46902:101","Box":"0:276:1792","`CString`":"0:6897:102"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2658:222-0:2944:4916":{"id":"a:1:2658:222-0:2944:4916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:2944:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3227":{"id":"0:3227","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1599,0],"end":[1599,41]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:6787:192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1211":{"id":"0:1211","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[67,0],"end":[71,1]},"visibility":{"restricted":{"parent":"0:1169:3668","path":"::collections::btree::map::entry"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"debug_btree_map\", since = \"1.12.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:1201:3672","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1215:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:723":{"id":"0:723","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[421,0],"end":[429,1]},"visibility":{"restricted":{"parent":"0:648:1793","path":"::borrow"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:8791:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:8791:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["0:725:702"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2510-0:3328:157":{"id":"b:1:2510-0:3328:157","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2505-0:3004:4940":{"id":"b:1:2505-0:3004:4940","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:3004:4940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11342:13990":{"id":"1:11342:13990","crate_id":1,"name":"lines_any","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1022,4],"end":[1022,43]},"visibility":"public","docs":"An iterator over the lines of a string.","links":{},"attrs":["#[deprecated(since = \"1.4.0\", note = \"use lines() instead now\")]"],"deprecation":{"since":"1.4.0","note":"use lines() instead now"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinesAny","id":"1:50229:7941","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1500:4087":{"id":"0:1500:4087","crate_id":0,"name":"into_values","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1454,4],"end":[1456,5]},"visibility":"public","docs":"Creates a consuming iterator visiting all the values, in order by key.\nThe map cannot be used after calling this.\nThe iterator element type is `V`.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(1, \"hello\");\na.insert(2, \"goodbye\");\n\nlet values: Vec<&str> = a.into_values().collect();\nassert_eq!(values, [\"hello\", \"goodbye\"]);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:1415:3837","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5223:1585":{"id":"0:5223:1585","crate_id":0,"name":"leak","span":{"filename":"library/alloc/src/string.rs","begin":[1877,4],"end":[1880,5]},"visibility":"public","docs":"Consumes and leaks the `String`, returning a mutable reference to the contents,\n`&'static mut str`.\n\nThis is mainly useful for data that lives for the remainder of\nthe program's life. Dropping the returned reference will cause a memory\nleak.\n\nIt does not reallocate or shrink the `String`,\nso the leaked allocation may include unused capacity that is not part\nof the returned slice.\n\n# Examples\n\nSimple usage:\n\n```\n#![feature(string_leak)]\n\nlet x = String::from(\"bucket\");\nlet static_ref: &'static mut str = x.leak();\nassert_eq!(static_ref, \"bucket\");\n```","links":{},"attrs":["#[unstable(feature = \"string_leak\", issue = \"102929\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'static","mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5266":{"id":"0:5266","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2102,0],"end":[2116,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"extend_ref\", since = \"1.2.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7025:3507","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"char"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5268:2885","0:5270:1746","0:5271:3508"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2505-0:6881:1972":{"id":"b:1:2505-0:6881:1972","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7709:3766-0:2937:3356":{"id":"a:1:7709:3766-0:2937:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5662:2731":{"id":"0:5662:2731","crate_id":0,"name":"downcast","span":{"filename":"library/alloc/src/sync.rs","begin":[1771,4],"end":[1784,5]},"visibility":"public","docs":"Attempt to downcast the `Arc<dyn Any + Send + Sync>` to a concrete type.\n\n# Examples\n\n```\nuse std::any::Any;\nuse std::sync::Arc;\n\nfn print_if_string(value: Arc<dyn Any + Send + Sync>) {\n    if let Ok(string) = value.downcast::<String>() {\n        println!(\"String ({}): {}\", string.len(), string);\n    }\n}\n\nlet my_string = \"Hello World\".to_string();\nprint_if_string(Arc::new(my_string));\nprint_if_string(Arc::new(0i8));\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rc_downcast\", since = \"1.29.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:1404:3833":{"id":"b:1:2499-0:1404:3833","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:1404:3833","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2219-0:676:109":{"id":"b:1:2219-0:676:109","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3602:2885":{"id":"0:3602:2885","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1854,4],"end":[1856,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:5964:3449":{"id":"b:1:2505-0:5964:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1795":{"id":"0:1795","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2042,0],"end":[2046,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:1415:3837","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1799:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4664":{"id":"0:4664","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1697,0],"end":[1742,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4666:595","0:4667:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:671":{"id":"0:671","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":{"restricted":{"parent":"0:648:1793","path":"::borrow"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"generic","inner":"T"},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4391":{"id":"0:4391","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[912,0],"end":[917,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]","#[stable(feature = \"default_box_extra\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4392:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5308:59":{"id":"0:5308:59","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/string.rs","begin":[2266,4],"end":[2268,5]},"visibility":"default","docs":"Creates an empty `String`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:6407:237":{"id":"a:1:2708:2329-0:6407:237","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3453":{"id":"0:3453","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1109,0],"end":[1124,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3352:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3456:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2495-0:3794:3805":{"id":"b:1:2495-0:3794:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1771":{"id":"0:1771","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2008,0],"end":[2012,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:1404:3833","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1775:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6839:595":{"id":"0:6839:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2684,0],"end":[2684,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"U"}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5260":{"id":"0:5260","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2081,0],"end":[2098,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7025:3507","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5261:2885","0:5264:1746","0:5265:3508"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5922":{"id":"0:5922","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/splice.rs","begin":[31,0],"end":[41,1]},"visibility":{"restricted":{"parent":"0:5911:8668","path":"::vec::splice"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"vec_splice\", since = \"1.21.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Splice","id":"0:7074:9310","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:5925:2750","0:5926:921","0:5927:2751"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2495-0:6869:1971":{"id":"b:1:2495-0:6869:1971","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2510-0:6980:218":{"id":"b:1:2510-0:6980:218","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2510-0:6083:3475":{"id":"b:1:2510-0:6083:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2216-0:3328:157":{"id":"b:1:2216-0:3328:157","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3303-0:5964:3449":{"id":"b:1:3303-0:5964:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5343":{"id":"0:5343","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2426,0],"end":[2431,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:2973:5511","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeFrom","id":"1:46345:193","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5344:743"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3361:650":{"id":"0:3361:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[114,4],"end":[124,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4686:650":{"id":"0:4686:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/rc.rs","begin":[1872,4],"end":[1874,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:101":{"id":"0:101","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/alloc.rs","begin":[15,0],"end":[15,23]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"alloc_module\", since = \"1.28.0\")]","#[doc(inline)]"],"deprecation":null,"kind":"import","inner":{"source":"core::alloc","name":"alloc","id":"1:11886:279","glob":true}},"0:6599":{"id":"0:6599","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2745,0],"end":[2750,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7012:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:6601:670"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3303-0:1230:3671":{"id":"b:1:3303-0:1230:3671","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedError","id":"0:1230:3671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2216-0:1201:3672":{"id":"b:1:2216-0:1201:3672","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:1201:3672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3900:3356":{"id":"0:3900:3356","crate_id":0,"name":"Iter","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[12,0],"end":[15,1]},"visibility":"public","docs":"An iterator over the elements of a `VecDeque`.\n\nThis `struct` is created by the [`iter`] method on [`super::VecDeque`]. See its\ndocumentation for more.\n\n[`iter`]: super::VecDeque::iter","links":{"`super::VecDeque`":"0:4016:238","super::VecDeque::iter":"0:4104:768"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:3900:3356","a:1:2644:214-0:3900:3356","a:1:2708:2329-0:3900:3356","a:1:7709:3766-0:3900:3356","a:1:7710:3767-0:3900:3356","b:0:671-0:3900:3356","b:1:7020-0:3900:3356","b:1:2510-0:3900:3356","b:1:2505-0:3900:3356","b:1:2216-0:3900:3356","b:1:3303-0:3900:3356","b:1:2219-0:3900:3356","b:1:2499-0:3900:3356","b:1:2495-0:3900:3356","0:3909","0:3912","0:3915","0:3932","0:3945","0:3949","0:3951"]}},"0:6733:650":{"id":"0:6733:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/alloc.rs","begin":[53,31],"end":[53,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:725:702":{"id":"0:725:702","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/borrow.rs","begin":[426,4],"end":[428,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:8805:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:2937:3356":{"id":"a:1:7710:3767-0:2937:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6720:1418":{"id":"0:6720:1418","crate_id":0,"name":"try_from","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3285,4],"end":[3300,5]},"visibility":"default","docs":"Gets the entire contents of the `Vec<T>` as an array,\nif its size exactly matches that of the requested array.\n\n# Examples\n\n```\nassert_eq!(vec![1, 2, 3].try_into(), Ok([1, 2, 3]));\nassert_eq!(<Vec<i32>>::new().try_into(), Ok([]));\n```\n\nIf the length doesn't match, the input comes back in `Err`:\n```\nlet r: Result<[i32; 4], _> = (0..10).collect::<Vec<_>>().try_into();\nassert_eq!(r, Err(vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\n```\n\nIf you're fine with just getting a prefix of the `Vec<T>`,\nyou can call [`.truncate(N)`](Vec::truncate) first.\n```\nlet mut v = String::from(\"hello world\").into_bytes();\nv.sort();\nv.truncate(2);\nlet [a, b]: [_; 2] = v.try_into().unwrap();\nassert_eq!(a, b' ');\nassert_eq!(b, b'd');\n```","links":{"Vec::truncate":"0:6433:5696"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["vec",{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}},{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:0:671-0:859:3356":{"id":"b:0:671-0:859:3356","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5333":{"id":"0:5333","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2393,0],"end":[2400,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:2969:3662","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeInclusive","id":"1:46387:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5334:180","0:5335:742"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5655:3929":{"id":"0:5655:3929","crate_id":0,"name":"get_mut","span":{"filename":"library/alloc/src/sync.rs","begin":[1568,4],"end":[1579,5]},"visibility":"public","docs":"Returns a mutable reference into the given `Arc`, if there are\nno other `Arc` or [`Weak`] pointers to the same allocation.\n\nReturns [`None`] otherwise, because it is not safe to\nmutate a shared value.\n\nSee also [`make_mut`][make_mut], which will [`clone`][clone]\nthe inner value when there are other `Arc` pointers.\n\n[make_mut]: Arc::make_mut\n[clone]: Clone::clone\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet mut x = Arc::new(3);\n*Arc::get_mut(&mut x).unwrap() = 4;\nassert_eq!(*x, 4);\n\nlet _y = Arc::clone(&x);\nassert!(Arc::get_mut(&mut x).is_none());\n```","links":{"Clone::clone":"1:2234:409","Arc::make_mut":"0:5650:7357","`Weak`":"0:5533:7157","`None`":"1:47999:173"},"attrs":["#[inline]","#[stable(feature = \"arc_unique\", since = \"1.4.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:1680:4069":{"id":"b:1:3303-0:1680:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:1680:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2932":{"id":"0:2932","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[120,0],"end":[128,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:2935:409","0:2936:411"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:833:2097":{"id":"0:833:2097","crate_id":0,"name":"try_reserve","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1041,4],"end":[1043,5]},"visibility":"public","docs":"Tries to reserve capacity for at least `additional` elements more than the\ncurrent length. The allocator may reserve more space to speculatively\navoid frequent allocations. After calling `try_reserve`, capacity will be\ngreater than or equal to `self.len() + additional` if it returns\n`Ok(())`. Does nothing if capacity is already sufficient. This method\npreserves the contents even if an error occurs.\n\n# Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse std::collections::BinaryHeap;\nuse std::collections::TryReserveError;\n\nfn find_max_slow(data: &[u32]) -> Result<Option<u32>, TryReserveError> {\n    let mut heap = BinaryHeap::new();\n\n    // Pre-reserve the memory, exiting if we can't\n    heap.try_reserve(data.len())?;\n\n    // Now we know this can't OOM in the middle of our complex work\n    heap.extend(data.iter());\n\n    Ok(heap.pop())\n}\n# find_max_slow(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n```","links":{},"attrs":["#[stable(feature = \"try_reserve_2\", since = \"1.63.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:1216:3670":{"id":"b:1:2216-0:1216:3670","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:1216:3670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3627":{"id":"0:3627","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1910,0],"end":[1915,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","clamp","min"],"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3629:416"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7710:3767-0:5424:3449":{"id":"a:1:7710:3767-0:5424:3449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:596:2750":{"id":"0:596:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/boxed.rs","begin":[2130,4],"end":[2130,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"S"},"trait":{"name":"AsyncIterator","id":"1:3985:2324","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:5562:7155":{"id":"0:5562:7155","crate_id":0,"name":"new_cyclic","span":{"filename":"library/alloc/src/sync.rs","begin":[426,4],"end":[478,5]},"visibility":"public","docs":"Constructs a new `Arc<T>` while giving you a `Weak<T>` to the allocation,\nto allow you to construct a `T` which holds a weak pointer to itself.\n\nGenerally, a structure circularly referencing itself, either directly or\nindirectly, should not hold a strong reference to itself to prevent a memory leak.\nUsing this function, you get access to the weak pointer during the\ninitialization of `T`, before the `Arc<T>` is created, such that you can\nclone and store it inside the `T`.\n\n`new_cyclic` first allocates the managed allocation for the `Arc<T>`,\nthen calls your closure, giving it a `Weak<T>` to this allocation,\nand only afterwards completes the construction of the `Arc<T>` by placing\nthe `T` returned from your closure into the allocation.\n\nSince the new `Arc<T>` is not fully-constructed until `Arc<T>::new_cyclic`\nreturns, calling [`upgrade`] on the weak reference inside your closure will\nfail and result in a `None` value.\n\n# Panics\n\nIf `data_fn` panics, the panic is propagated to the caller, and the\ntemporary [`Weak<T>`] is dropped normally.\n\n# Example\n\n```\n# #![allow(dead_code)]\nuse std::sync::{Arc, Weak};\n\nstruct Gadget {\n    me: Weak<Gadget>,\n}\n\nimpl Gadget {\n    /// Construct a reference counted Gadget.\n    fn new() -> Arc<Self> {\n        // `me` is a `Weak<Gadget>` pointing at the new allocation of the\n        // `Arc` we're constructing.\n        Arc::new_cyclic(|me| {\n            // Create the actual struct here.\n            Gadget { me: me.clone() }\n        })\n    }\n\n    /// Return a reference counted pointer to Self.\n    fn me(&self) -> Arc<Self> {\n        self.me.upgrade().unwrap()\n    }\n}\n```\n[`upgrade`]: Weak::upgrade","links":{"Weak::upgrade":"0:5680:7614","`Weak<T>`":"0:5533:7157"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"arc_new_cyclic\", since = \"1.60.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["data_fn",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2920:2768","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4387":{"id":"0:4387","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[889,0],"end":[897,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4388:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5389:668":{"id":"0:5389:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[2676,4],"end":[2678,5]},"visibility":"default","docs":"Converts a `&String` into a [`String`].\n\nThis clones `s` and returns the clone.","links":{"`String`":"0:6980:218"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3826:2759":{"id":"0:3826:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[105,4],"end":[118,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3255":{"id":"0:3255","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1701,0],"end":[1701,60]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:2970:4926","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2499-0:3004:4940":{"id":"b:1:2499-0:3004:4940","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:3004:4940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3474:5281":{"id":"0:3474:5281","crate_id":0,"name":"CursorMut","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1174,0],"end":[1178,1]},"visibility":"public","docs":"A cursor over a `LinkedList` with editing operations.\n\nA `Cursor` is like an iterator, except that it can freely seek back-and-forth, and can\nsafely mutate the list during iteration. This is because the lifetime of its yielded\nreferences is tied to its own lifetime, instead of just the underlying list. This means\ncursors cannot yield multiple elements at once.\n\nCursors always rest between two elements in the list, and index in a logically circular way.\nTo accommodate this, there is a \"ghost\" non-element that yields `None` between the head and\ntail of the list.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:3498","0:3512","a:1:2708:2329-0:3474:5281","a:1:7709:3766-0:3474:5281","a:1:7710:3767-0:3474:5281","b:1:2510-0:3474:5281","b:1:2505-0:3474:5281","b:1:2216-0:3474:5281","b:1:3303-0:3474:5281","b:1:2219-0:3474:5281","b:1:2499-0:3474:5281","b:1:2495-0:3474:5281","0:3480","0:3671","0:3673"]}},"0:4311:2629":{"id":"0:4311:2629","crate_id":0,"name":"as_bytes","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[186,4],"end":[188,5]},"visibility":"public","docs":"Returns a slice of [`u8`]s bytes that were attempted to convert to a [`CString`].\n\n# Examples\n\nBasic usage:\n\n```\nuse std::ffi::CString;\n\n// Some invalid bytes in a vector\nlet bytes = b\"f\\0oo\".to_vec();\n\nlet value = CString::from_vec_with_nul(bytes.clone());\n\nassert_eq!(&bytes[..], value.unwrap_err().as_bytes());\n```","links":{"`u8`":"1:58447:10472","`CString`":"0:6897:102"},"attrs":["#[must_use]","#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7022":{"id":"0:7022","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2253,0],"end":[2253,28]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(unused_lifetimes)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"items":["0:7025:595","0:7026:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5351":{"id":"0:5351","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2455,0],"end":[2462,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2886:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5352:224","0:5353:536"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2644:214-0:2944:4916":{"id":"a:1:2644:214-0:2944:4916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:2944:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:2513:126":{"id":"1:2513:126","crate_id":1,"name":"Error","span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[779,4],"end":[779,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:39242:8747","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:1131:830":{"id":"0:1131:830","crate_id":0,"name":"map","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1,0],"end":[2428,10]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:1295","0:1296","0:1297","0:1298","0:1301:94","0:1338:3356","0:1348:3805","0:1359:3475","0:1376:3816","0:1385:3820","0:1394:3826","0:1404:3833","0:1415:3837","0:1426:192","0:1435:3845","0:1680:4069"],"is_stripped":false}},"0:5264:1746":{"id":"0:5264:1746","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/string.rs","begin":[2090,4],"end":[2092,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["c",{"kind":"primitive","inner":"char"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3206:782":{"id":"0:3206:782","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1555,4],"end":[1557,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4088:2086":{"id":"0:4088:2086","crate_id":0,"name":"reserve","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[781,4],"end":[793,5]},"visibility":"public","docs":"Reserves capacity for at least `additional` more elements to be inserted in the given\ndeque. The collection may reserve more space to speculatively avoid frequent reallocations.\n\n# Panics\n\nPanics if the new capacity overflows `usize`.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf: VecDeque<i32> = [1].into();\nbuf.reserve(10);\nassert!(buf.capacity() >= 11);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4249":{"id":"0:4249","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2884,0],"end":[2907,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4253:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4353":{"id":"0:4353","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[726,0],"end":[734,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_into\", since = \"1.7.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"items":["0:4354:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2499-0:3352:3805":{"id":"b:1:2499-0:3352:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3352:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:7263:895":{"id":"0:7263:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[31,0],"end":[31,122]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:7074:9310":{"id":"b:1:2505-0:7074:9310","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Splice","id":"0:7074:9310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2505-0:6869:1971":{"id":"b:1:2505-0:6869:1971","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6680":{"id":"0:6680","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3093,0],"end":[3097,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2463:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6683:307"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:0:671-0:1338:3356":{"id":"b:0:671-0:1338:3356","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:668:2677":{"id":"0:668:2677","crate_id":0,"name":"Owned","span":{"filename":"library/alloc/src/borrow.rs","begin":[41,4],"end":[41,29]},"visibility":"default","docs":"The resulting type after obtaining ownership.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null}},"0:5691":{"id":"0:5691","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2191,0],"end":[2209,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5693:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:709:595":{"id":"0:709:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/borrow.rs","begin":[367,4],"end":[369,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'b"},{"type":{"kind":"generic","inner":"C"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:215:2341":{"id":"b:1:2216-0:215:2341","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1862":{"id":"0:1862","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2151,0],"end":[2158,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:8791:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:8791:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:8791:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1866:702"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4858":{"id":"0:4858","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[60,22],"end":[60,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rchunks\", since = \"1.31.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::RChunks","name":"RChunks","id":"1:49846:7693","glob":false}},"a:1:7709:3766-0:5533:7157":{"id":"a:1:7709:3766-0:5533:7157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:422:668":{"id":"0:422:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1599,4],"end":[1602,5]},"visibility":"default","docs":"Converts a `Box<str>` into a `Box<[u8]>`\n\nThis conversion does not allocate on the heap and happens in place.\n\n# Examples\n```rust\n// create a Box<str> which will be used to create a Box<[u8]>\nlet boxed: Box<str> = Box::from(\"hello\");\nlet boxed_str: Box<[u8]> = Box::from(boxed);\n\n// create a &[u8] which will be used to create a Box<[u8]>\nlet slice: &[u8] = &[104, 101, 108, 108, 111];\nlet boxed_slice = Box::from(slice);\n\nassert_eq!(boxed_slice, boxed_str);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:5533:7157":{"id":"b:1:2505-0:5533:7157","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2505-0:1185:3669":{"id":"b:1:2505-0:1185:3669","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:1185:3669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7710:3767-0:215:2341":{"id":"a:1:7710:3767-0:215:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3507:5415":{"id":"0:3507:5415","crate_id":0,"name":"peek_next","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1376,4],"end":[1384,5]},"visibility":"public","docs":"Returns a reference to the next element.\n\nIf the cursor is pointing to the \"ghost\" non-element then this returns\nthe first element of the `LinkedList`. If it is pointing to the last\nelement of the `LinkedList` then this returns `None`.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1579":{"id":"0:1579","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1636,0],"end":[1658,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"btree_drop\", since = \"1.7.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1359:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1583:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3496:4073":{"id":"0:3496:4073","crate_id":0,"name":"front","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1291,4],"end":[1293,5]},"visibility":"public","docs":"Provides a reference to the front element of the cursor's parent list,\nor None if the list is empty.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4168":{"id":"0:4168","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2642,0],"end":[2678,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:4171:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:215:2341":{"id":"0:215:2341","crate_id":0,"name":"ThinBox","span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[34,0],"end":[39,1]},"visibility":"public","docs":"ThinBox.\n\nA thin pointer for heap allocation, regardless of T.\n\n# Examples\n\n```\n#![feature(thin_box)]\nuse std::boxed::ThinBox;\n\nlet five = ThinBox::new(5);\nlet thin_slice = ThinBox::<[i32]>::new_unsize([1, 2, 3, 4]);\n\nuse std::mem::{size_of, size_of_val};\nlet size_of_ptr = size_of::<*const ()>();\nassert_eq!(size_of_ptr, size_of_val(&five));\nassert_eq!(size_of_ptr, size_of_val(&thin_slice));\n```","links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:223","0:226","a:1:2708:2329-0:215:2341","a:1:7709:3766-0:215:2341","a:1:7710:3767-0:215:2341","b:0:5362-0:215:2341","b:1:2567-0:215:2341","b:1:2510-0:215:2341","b:1:2505-0:215:2341","b:1:2216-0:215:2341","b:1:3303-0:215:2341","b:1:2219-0:215:2341","b:1:2499-0:215:2341","b:1:2495-0:215:2341","0:219","0:221","0:230","0:233","0:236","0:240","0:243","0:273"]}},"0:5336":{"id":"0:5336","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2402,0],"end":[2409,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:2969:3662","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeToInclusive","id":"1:46409:197","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5337:180","0:5338:742"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:0:5362-0:6914:6204":{"id":"b:0:5362-0:6914:6204","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2526,0],"end":[2540,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5360:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5364:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7710:3767-0:1216:3670":{"id":"a:1:7710:3767-0:1216:3670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:1216:3670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3431:2750":{"id":"0:3431:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1026,4],"end":[1026,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"0:511":{"id":"0:511","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1962,0],"end":[1969,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:514:2759","0:515:2760"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2505-0:1394:3826":{"id":"b:1:2505-0:1394:3826","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:1394:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3742:650":{"id":"0:3742:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[92,4],"end":[99,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5573:2386":{"id":"0:5573:2386","crate_id":0,"name":"try_new_uninit","span":{"filename":"library/alloc/src/sync.rs","begin":[608,4],"end":[616,5]},"visibility":"public","docs":"Constructs a new `Arc` with uninitialized contents, returning an error\nif allocation fails.\n\n# Examples\n\n```\n#![feature(new_uninit, allocator_api)]\n#![feature(get_mut_unchecked)]\n\nuse std::sync::Arc;\n\nlet mut five = Arc::<u32>::try_new_uninit()?;\n\n// Deferred initialization:\nArc::get_mut(&mut five).unwrap().write(5);\n\nlet five = unsafe { five.assume_init() };\n\nassert_eq!(*five, 5);\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50972:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:3723:3449":{"id":"b:1:2495-0:3723:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:3723:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2495-0:859:3356":{"id":"b:1:2495-0:859:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5743:668":{"id":"0:5743:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/sync.rs","begin":[2513,4],"end":[2515,5]},"visibility":"default","docs":"Converts a `T` into an `Arc<T>`\n\nThe conversion moves the value into a\nnewly allocated `Arc`. It is equivalent to\ncalling `Arc::new(t)`.\n\n# Example\n```rust\n# use std::sync::Arc;\nlet x = 5;\nlet arc = Arc::new(5);\n\nassert_eq!(Arc::from(x), arc);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:3096:4069":{"id":"b:1:2505-0:3096:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3096:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:344:59":{"id":"0:344:59","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/boxed.rs","begin":[1245,4],"end":[1248,5]},"visibility":"default","docs":"Creates a `Box<T>`, with the `Default` value for T.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3591:2750":{"id":"0:3591:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1834,4],"end":[1834,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"0:985:2750":{"id":"0:985:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1649,4],"end":[1649,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"a:1:2644:214-0:771:3221":{"id":"a:1:2644:214-0:771:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PeekMut","id":"0:771:3221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2219-0:3328:157":{"id":"b:1:2219-0:3328:157","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7709:3766-0:1359:3475":{"id":"a:1:7709:3766-0:1359:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1359:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3528:5319":{"id":"0:3528:5319","crate_id":0,"name":"front_mut","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1663,4],"end":[1665,5]},"visibility":"public","docs":"Provides a mutable reference to the front element of the cursor's\nparent list, or None if the list is empty.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:929:2759":{"id":"0:929:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1501,4],"end":[1503,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1673":{"id":"0:1673","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1803,0],"end":[1803,48]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:1385:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:349":{"id":"0:349","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1264,0],"end":[1273,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"default_box_extra\", since = \"1.17.0\")]","#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:350:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5829:1505":{"id":"0:5829:1505","crate_id":0,"name":"vec","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1,0],"end":[3301,1]},"visibility":"public","docs":"A contiguous growable array type with heap-allocated contents, written\n`Vec<T>`.\n\nVectors have *O*(1) indexing, amortized *O*(1) push (to the end) and\n*O*(1) pop (from the end).\n\nVectors ensure they never allocate more than `isize::MAX` bytes.\n\n# Examples\n\nYou can explicitly create a [`Vec`] with [`Vec::new`]:\n\n```\nlet v: Vec<i32> = Vec::new();\n```\n\n...or by using the [`vec!`] macro:\n\n```\nlet v: Vec<i32> = vec![];\n\nlet v = vec![1, 2, 3, 4, 5];\n\nlet v = vec![0; 10]; // ten zeroes\n```\n\nYou can [`push`] values onto the end of a vector (which will grow the vector\nas needed):\n\n```\nlet mut v = vec![1, 2];\n\nv.push(3);\n```\n\nPopping values works in much the same way:\n\n```\nlet mut v = vec![1, 2];\n\nlet two = v.pop();\n```\n\nVectors also support indexing (through the [`Index`] and [`IndexMut`] traits):\n\n```\nlet mut v = vec![1, 2, 3];\nlet three = v[2];\nv[1] = v[1] + 5;\n```\n\n[`push`]: Vec::push","links":{"`Vec::new`":"0:6414:908","`IndexMut`":"1:2973:5511","Vec::push":"0:6488:3275","`Vec`":"0:6407:237","`vec!`":"0:5:1505","`Index`":"1:2969:3662"},"attrs":["#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:5867","0:5910","0:5945","0:6055","0:6407:237"],"is_stripped":false}},"0:4143:1118":{"id":"0:4143:1118","crate_id":0,"name":"rotate_left","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2301,4],"end":[2309,5]},"visibility":"public","docs":"Rotates the double-ended queue `mid` places to the left.\n\nEquivalently,\n- Rotates item `mid` into the first position.\n- Pops the first `mid` items and pushes them to the end.\n- Rotates `len() - mid` places to the right.\n\n# Panics\n\nIf `mid` is greater than `len()`. Note that `mid == len()`\ndoes _not_ panic and is a no-op rotation.\n\n# Complexity\n\nTakes `*O*(min(mid, len() - mid))` time and no extra space.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf: VecDeque<_> = (0..10).collect();\n\nbuf.rotate_left(3);\nassert_eq!(buf, [3, 4, 5, 6, 7, 8, 9, 0, 1, 2]);\n\nfor i in 1..10 {\n    assert_eq!(i * 3 % 10, buf[0]);\n    buf.rotate_left(3);\n}\nassert_eq!(buf, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n```","links":{},"attrs":["#[stable(feature = \"vecdeque_rotate\", since = \"1.36.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4383":{"id":"0:4383","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[866,0],"end":[874,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[cfg(target_has_atomic = \"ptr\")]","#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4384:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3829:6116":{"id":"0:3829:6116","crate_id":0,"name":"rfold","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[130,4],"end":[136,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["accum",{"kind":"generic","inner":"Acc"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"Acc"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7130:154","args":null}}}],"output":{"kind":"generic","inner":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4827":{"id":"0:4827","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[34,0],"end":[34,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"array_chunks\", issue = \"74985\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::ArrayChunks","name":"ArrayChunks","id":"1:49820:7668","glob":false}},"0:6988:416":{"id":"0:6988:416","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/string.rs","begin":[364,25],"end":[364,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5321":{"id":"0:5321","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2357,0],"end":[2364,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:2969:3662","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Range","id":"1:46321:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5322:180","0:5323:742"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4401:6508":{"id":"0:4401:6508","crate_id":0,"name":"into_cstring","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[984,4],"end":[986,5]},"visibility":"public","docs":"Consumes this error, returning original [`CString`] which generated the\nerror.","links":{"`CString`":"0:6897:102"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"cstring_into\", since = \"1.7.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4390:668":{"id":"0:4390:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[904,4],"end":[907,5]},"visibility":"default","docs":"Converts a `&CStr` into a `Rc<CStr>`,\nby copying the contents into a newly allocated [`Rc`].","links":{"`Rc`":"0:4521:198"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3121:921":{"id":"0:3121:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1330,4],"end":[1334,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:1435:3845":{"id":"a:1:7709:3766-0:1435:3845","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangeMut","id":"0:1435:3845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:4848":{"id":"0:4848","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[54,22],"end":[54,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::ChunksMut","name":"ChunksMut","id":"1:49763:7686","glob":false}},"b:1:7020-0:1404:3833":{"id":"b:1:7020-0:1404:3833","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:1404:3833","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:416":{"id":"0:416","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1527,0],"end":[1543,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_from_slice\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:417:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3505:5278":{"id":"0:3505:5278","crate_id":0,"name":"current","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1366,4],"end":[1368,5]},"visibility":"public","docs":"Returns a reference to the element that the cursor is currently\npointing to.\n\nThis returns `None` if the cursor is currently pointing to the\n\"ghost\" non-element.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6648:1746":{"id":"0:6648:1746","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3016,4],"end":[3018,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["item",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:4521:198":{"id":"b:1:3303-0:4521:198","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1760":{"id":"0:1760","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1983,0],"end":[2005,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:1404:3833","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1764:2750","0:1765:921","0:1767:2751","0:1768:2753","0:1769:4091","0:1770:2120"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2495-0:276:1792":{"id":"b:1:2495-0:276:1792","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:7021:895":{"id":"0:7021:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/string.rs","begin":[2253,0],"end":[2253,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5717:781":{"id":"0:5717:781","crate_id":0,"name":"le","span":{"filename":"library/alloc/src/sync.rs","begin":[2389,4],"end":[2391,5]},"visibility":"default","docs":"'Less than or equal to' comparison for two `Arc`s.\n\nThe two are compared by calling `<=` on their inner values.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nassert!(five <= Arc::new(5));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7036:895":{"id":"0:7036:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/string.rs","begin":[2255,0],"end":[2255,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6881:1972":{"id":"0:6881:1972","crate_id":0,"name":"TryReserveErrorKind","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[86,0],"end":[107,1]},"visibility":"public","docs":"Details of the allocation that caused a `TryReserveError`","links":{},"attrs":["#[unstable(feature = \"try_reserve_kind\", reason =\n\"Uncertain how much info should be exposed\", issue = \"48043\")]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[],"where_predicates":[]},"variants_stripped":false,"variants":["0:6882:2116","0:6884:2125"],"impls":["a:1:2658:222-0:6881:1972","a:1:2644:214-0:6881:1972","a:1:2708:2329-0:6881:1972","a:1:7709:3766-0:6881:1972","a:1:7710:3767-0:6881:1972","b:0:671-0:6881:1972","b:1:2510-0:6881:1972","b:1:2505-0:6881:1972","b:1:2216-0:6881:1972","b:1:3303-0:6881:1972","b:1:2219-0:6881:1972","b:1:2499-0:6881:1972","b:1:2495-0:6881:1972","0:6887","0:6889","0:6890","0:6892","0:6893","0:6895","0:4270","0:4272"]}},"a:1:2644:214-0:6881:1972":{"id":"a:1:2644:214-0:6881:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2505-0:1680:4069":{"id":"b:1:2505-0:1680:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:1680:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6041":{"id":"0:6041","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/cow.rs","begin":[20,0],"end":[30,1]},"visibility":{"restricted":{"parent":"0:6033:2675","path":"::vec::cow"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"cow_from_vec\", since = \"1.8.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"items":["0:6044:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3129":{"id":"0:3129","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1348,0],"end":[1360,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7025:3507","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3132:2885","0:3135:1746"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5445":{"id":"0:5445","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2954,0],"end":[2970,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:5446:2750","0:5447:921","0:5448:2751","0:5449:2753"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3577":{"id":"0:3577","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1809,0],"end":[1809,40]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:447":{"id":"0:447","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1695,0],"end":[1752,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:449:2731","0:451:2733"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5317:180":{"id":"0:5317:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/string.rs","begin":[2335,4],"end":[2335,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:1:2495-0:1230:3671":{"id":"b:1:2495-0:1230:3671","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedError","id":"0:1230:3671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:298:2367":{"id":"0:298:2367","crate_id":0,"name":"new_zeroed_in","span":{"filename":"library/alloc/src/boxed.rs","begin":[521,4],"end":[532,5]},"visibility":"public","docs":"Constructs a new `Box` with uninitialized contents, with the memory\nbeing filled with `0` bytes in the provided allocator.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\nof this method.\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nuse std::alloc::System;\n\nlet zero = Box::<u32, _>::new_zeroed_in(System);\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0)\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1519:2186"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]","#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe_const"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5186:3422":{"id":"0:5186:3422","crate_id":0,"name":"shrink_to","span":{"filename":"library/alloc/src/string.rs","begin":[1201,4],"end":[1203,5]},"visibility":"public","docs":"Shrinks the capacity of this `String` with a lower bound.\n\nThe capacity will remain at least as large as both the length\nand the supplied value.\n\nIf the current capacity is less than the lower limit, this is a no-op.\n\n# Examples\n\n```\nlet mut s = String::from(\"foo\");\n\ns.reserve(100);\nassert!(s.capacity() >= 100);\n\ns.shrink_to(10);\nassert!(s.capacity() >= 10);\ns.shrink_to(0);\nassert!(s.capacity() >= 3);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"shrink_to\", since = \"1.56.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["min_capacity",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11408:40322":{"id":"1:11408:40322","crate_id":1,"name":"trim_matches","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[2058,4],"end":[2060,58]},"visibility":"public","docs":"Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```","links":{"self::pattern":"1:11013:1760","prim@char":"1:58430:10458"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"DoubleEndedSearcher","id":"1:11038:7917","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:3096:4069":{"id":"a:1:7709:3766-0:3096:4069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3096:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:3404:4312":{"id":"0:3404:4312","crate_id":0,"name":"back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[743,4],"end":[745,5]},"visibility":"public","docs":"Provides a reference to the back element, or `None` if the list is\nempty.\n\nThis operation should compute in *O*(1) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\nassert_eq!(dl.back(), None);\n\ndl.push_back(1);\nassert_eq!(dl.back(), Some(&1));\n```","links":{},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1549:2750":{"id":"0:1549:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1552,4],"end":[1552,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}},"0:879:2759":{"id":"0:879:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1346,4],"end":[1348,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4942":{"id":"0:4942","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[702,0],"end":[713,1]},"visibility":{"restricted":{"parent":"0:4810:1314","path":"::slice"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"slice_concat_ext\", issue = \"27747\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Concat","id":"0:4934:7816","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"slice","inner":{"kind":"generic","inner":"V"}},"items":["0:4945:180","0:4946:431"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5353:536":{"id":"0:5353:536","crate_id":0,"name":"deref","span":{"filename":"library/alloc/src/string.rs","begin":[2459,4],"end":[2461,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:7020-0:6749:3449":{"id":"b:1:7020-0:6749:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:6749:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:6055":{"id":"0:6055","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[101,0],"end":[101,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"self::into_iter::IntoIter","name":"IntoIter","id":"0:6083:3475","glob":false}},"b:1:3303-0:768:96":{"id":"b:1:3303-0:768:96","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:980:3475":{"id":"0:980:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1622,4],"end":[1622,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"0:5361:1398":{"id":"0:5361:1398","crate_id":0,"name":"to_string","span":{"filename":"library/alloc/src/string.rs","begin":[2515,4],"end":[2515,34]},"visibility":"default","docs":"Converts the given value to a `String`.\n\n# Examples\n\nBasic usage:\n\n```\nlet i = 5;\nlet five = String::from(\"5\");\n\nassert_eq!(five, i.to_string());\n```","links":{},"attrs":["#[rustc_conversion_suggestion]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"a:1:7710:3767-0:1201:3672":{"id":"a:1:7710:3767-0:1201:3672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:1201:3672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:3303-0:5513:69":{"id":"b:1:3303-0:5513:69","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2499-0:1301:94":{"id":"b:1:2499-0:1301:94","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:132:2214":{"id":"0:132:2214","crate_id":0,"name":"__rdl_oom","span":{"filename":"library/alloc/src/alloc.rs","begin":[404,4],"end":[406,5]},"visibility":"public","docs":null,"links":{},"attrs":["#[rustc_std_internal_symbol]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["size",{"kind":"primitive","inner":"usize"}],["_align",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"never"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:3487:5369":{"id":"0:3487:5369","crate_id":0,"name":"move_next","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1205,4],"end":[1219,5]},"visibility":"public","docs":"Moves the cursor to the next element of the `LinkedList`.\n\nIf the cursor is pointing to the \"ghost\" non-element then this will move it to\nthe first element of the `LinkedList`. If it is pointing to the last\nelement of the `LinkedList` then this will move it to the \"ghost\" non-element.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1196":{"id":"0:1196","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[36,0],"end":[43,1]},"visibility":{"restricted":{"parent":"0:1169:3668","path":"::collections::btree::map::entry"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"debug_btree_map\", since = \"1.12.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:1185:3669","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1200:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3428":{"id":"0:3428","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1025,0],"end":[1052,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3431:2750","0:3432:921","0:3434:2751","0:3435:2753"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4197:743":{"id":"0:4197:743","crate_id":0,"name":"index_mut","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2732,4],"end":[2734,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:633:668":{"id":"0:633:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[2343,4],"end":[2345,5]},"visibility":"default","docs":"Converts a [`str`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n\n[`str`]: prim@str\n\n# Examples\n\n```\nuse std::error::Error;\nuse std::mem;\n\nlet a_str_error = \"a str error\";\nlet a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_str_error);\nassert!(\n    mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n```","links":{"`Sync`":"1:2658:222","prim@str":"1:58436:10463","`Error`":"1:2560:126","`Send`":"1:2644:214"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["err",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4708:668":{"id":"0:4708:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/rc.rs","begin":[2002,4],"end":[2009,5]},"visibility":"default","docs":"Allocate a reference-counted slice and move `v`'s items into it.\n\n# Example\n\n```\n# use std::rc::Rc;\nlet original: Box<Vec<i32>> = Box::new(vec![1, 2, 3]);\nlet shared: Rc<Vec<i32>> = Rc::from(original);\nassert_eq!(vec![1, 2, 3], *shared);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:6816:3475":{"id":"a:1:2644:214-0:6816:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5736:59":{"id":"0:5736:59","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/sync.rs","begin":[2484,4],"end":[2486,5]},"visibility":"default","docs":"Creates a new `Arc<T>`, with the `Default` value for `T`.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet x: Arc<i32> = Default::default();\nassert_eq!(*x, 0);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7041:895":{"id":"0:7041:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/string.rs","begin":[2257,0],"end":[2257,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6101:283":{"id":"0:6101:283","crate_id":0,"name":"allocator","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[93,4],"end":[95,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5754":{"id":"0:5754","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2596,0],"end":[2616,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"items":["0:5756:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6725:1970":{"id":"0:6725:1970","crate_id":0,"name":"Global","span":{"filename":"library/alloc/src/alloc.rs","begin":[55,0],"end":[55,18]},"visibility":"public","docs":"The global memory allocator.\n\nThis type implements the [`Allocator`] trait by forwarding calls\nto the allocator registered with the `#[global_allocator]` attribute\nif there is one, or the `std` crate’s default.\n\nNote: while this type is unstable, the functionality it provides can be\naccessed through the [free functions in `alloc`](self#functions).","links":{"self#functions":"0:92:279","`Allocator`":"1:11946:1969"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[cfg(not(test))]"],"deprecation":null,"kind":"struct","inner":{"kind":"unit","generics":{"params":[],"where_predicates":[]},"impls":["a:1:2658:222-0:6725:1970","a:1:2644:214-0:6725:1970","a:1:2708:2329-0:6725:1970","a:1:7709:3766-0:6725:1970","a:1:7710:3767-0:6725:1970","b:0:671-0:6725:1970","b:1:2510-0:6725:1970","b:1:2505-0:6725:1970","b:1:2216-0:6725:1970","b:1:3303-0:6725:1970","b:1:2219-0:6725:1970","b:1:2499-0:6725:1970","b:1:2495-0:6725:1970","0:6727","0:6728","0:6730","0:6732","0:115","0:544"]}},"b:1:2216-0:2978:4931":{"id":"b:1:2216-0:2978:4931","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:2978:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4155:6020":{"id":"0:4155:6020","crate_id":0,"name":"binary_search_by_key","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2531,4],"end":[2537,5]},"visibility":"public","docs":"Binary searches this `VecDeque` with a key extraction function.\nThis behaves similarly to [`contains`] if this `VecDeque` is sorted.\n\nAssumes that the deque is sorted by the key, for instance with\n[`make_contiguous().sort_by_key()`] using the same key extraction function.\n\nIf the value is found then [`Result::Ok`] is returned, containing the\nindex of the matching element. If there are multiple matches, then any\none of the matches could be returned. If the value is not found then\n[`Result::Err`] is returned, containing the index where a matching\nelement could be inserted while maintaining sorted order.\n\nSee also [`binary_search`], [`binary_search_by`], and [`partition_point`].\n\n[`contains`]: VecDeque::contains\n[`make_contiguous().sort_by_key()`]: VecDeque::make_contiguous\n[`binary_search`]: VecDeque::binary_search\n[`binary_search_by`]: VecDeque::binary_search_by\n[`partition_point`]: VecDeque::partition_point\n\n# Examples\n\nLooks up a series of four elements in a slice of pairs sorted by\ntheir second elements. The first is found, with a uniquely\ndetermined position; the second and third are not found; the\nfourth could match any position in `[1, 4]`.\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<_> = [(0, 0), (2, 1), (4, 1), (5, 1),\n         (3, 1), (1, 2), (2, 3), (4, 5), (5, 8), (3, 13),\n         (1, 21), (2, 34), (4, 55)].into();\n\nassert_eq!(deque.binary_search_by_key(&13, |&(a, b)| b),  Ok(9));\nassert_eq!(deque.binary_search_by_key(&4, |&(a, b)| b),   Err(7));\nassert_eq!(deque.binary_search_by_key(&100, |&(a, b)| b), Err(13));\nlet r = deque.binary_search_by_key(&1, |&(a, b)| b);\nassert!(matches!(r, Ok(1..=4)));\n```","links":{"`Result::Ok`":"1:48144:174","`Result::Err`":"1:48147:125","VecDeque::partition_point":"0:4160:6037","VecDeque::binary_search":"0:4147:5991","VecDeque::make_contiguous":"0:4142:5929","VecDeque::contains":"0:4119:4997","VecDeque::binary_search_by":"0:4149:5992"},"attrs":["#[stable(feature = \"vecdeque_binary_search\", since = \"1.54.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"B"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"generic","inner":"B"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:7002:8296":{"id":"a:1:2644:214-0:7002:8296","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf16Error","id":"0:7002:8296","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2216-0:1394:3826":{"id":"b:1:2216-0:1394:3826","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:1394:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4407:650":{"id":"0:4407:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1011,4],"end":[1013,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated, deprecated_in_future)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4770":{"id":"0:4770","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2502,0],"end":[2539,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rc_weak\", since = \"1.4.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4772:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3494:5417":{"id":"0:3494:5417","crate_id":0,"name":"peek_prev","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1277,4],"end":[1285,5]},"visibility":"public","docs":"Returns a reference to the previous element.\n\nIf the cursor is pointing to the \"ghost\" non-element then this returns\nthe last element of the `LinkedList`. If it is pointing to the first\nelement of the `LinkedList` then this returns `None`.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1737:2120":{"id":"0:1737:2120","crate_id":0,"name":"max","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1943,4],"end":[1945,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3612":{"id":"0:3612","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1877,0],"end":[1886,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"extend_ref\", since = \"1.2.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Copy","id":"1:2656:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7025:3507","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3615:2885","0:3617:1746"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3914:409":{"id":"0:3914:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[33,4],"end":[35,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5762:668":{"id":"0:5762:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/sync.rs","begin":[2658,4],"end":[2661,5]},"visibility":"default","docs":"Converts an atomically reference-counted string slice into a byte slice.\n\n# Example\n\n```\n# use std::sync::Arc;\nlet string: Arc<str> = Arc::from(\"eggplant\");\nlet bytes: Arc<[u8]> = Arc::from(string);\nassert_eq!(\"eggplant\".as_bytes(), bytes.as_ref());\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["rc",{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:6881:1972":{"id":"a:1:7709:3766-0:6881:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:337:2414":{"id":"0:337:2414","crate_id":0,"name":"into_pin","span":{"filename":"library/alloc/src/boxed.rs","begin":[1223,4],"end":[1231,5]},"visibility":"public","docs":"Converts a `Box<T>` into a `Pin<Box<T>>`. If `T` does not implement [`Unpin`], then\n`*boxed` will be pinned in memory and unable to be moved.\n\nThis conversion does not allocate on the heap and happens in place.\n\nThis is also available via [`From`].\n\nConstructing and pinning a `Box` with <code>Box::into_pin([Box::new]\\(x))</code>\ncan also be written more concisely using <code>[Box::pin]\\(x)</code>.\nThis `into_pin` method is useful if you already have a `Box<T>`, or you are\nconstructing a (pinned) `Box` in a different way than with [`Box::new`].\n\n# Notes\n\nIt's not recommended that crates add an impl like `From<Box<T>> for Pin<T>`,\nas it'll introduce an ambiguity when calling `Pin::from`.\nA demonstration of such a poor impl is shown below.\n\n```compile_fail\n# use std::pin::Pin;\nstruct Foo; // A type defined in this crate.\nimpl From<Box<()>> for Pin<Foo> {\n    fn from(_: Box<()>) -> Pin<Foo> {\n        Pin::new(Foo)\n    }\n}\n\nlet foo = Box::new(());\nlet bar = Pin::from(foo);\n```","links":{"`From`":"1:2472:131","`Box::new`":"0:284:908","Box::pin":"0:287:1003","`Unpin`":"1:2708:2329","Box::new":"0:284:908"},"attrs":["#[stable(feature = \"box_into_pin\", since = \"1.63.0\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["boxed",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Pin","id":"1:48133:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"outlives":"'static"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:7020-0:3339:3356":{"id":"b:1:7020-0:3339:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"a:1:2708:2329-0:3462:5277":{"id":"a:1:2708:2329-0:3462:5277","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cursor","id":"0:3462:5277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6877":{"id":"0:6877","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[59,27],"end":[59,29]},"visibility":{"restricted":{"parent":"0:744:1794","path":"::collections"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1736:4091":{"id":"0:1736:4091","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1939,4],"end":[1941,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3632:409":{"id":"0:3632:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1919,4],"end":[1921,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4759":{"id":"0:4759","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2232,0],"end":[2499,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4761:306","0:4762:2546","0:4763:2513","0:4764:7614","0:4765:7194","0:4766:7257","0:4769:7324"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4582:7257":{"id":"0:4582:7257","crate_id":0,"name":"weak_count","span":{"filename":"library/alloc/src/rc.rs","begin":[959,4],"end":[961,5]},"visibility":"public","docs":"Gets the number of [`Weak`] pointers to this allocation.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\nlet _weak_five = Rc::downgrade(&five);\n\nassert_eq!(1, Rc::weak_count(&five));\n```","links":{"`Weak`":"0:4737:7157"},"attrs":["#[inline]","#[stable(feature = \"rc_counts\", since = \"1.15.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:977":{"id":"0:977","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1620,0],"end":[1645,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:979:2750","0:980:3475","0:981:757"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4846":{"id":"0:4846","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[52,35],"end":[52,49]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"chunks_exact\", since = \"1.31.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::ChunksExactMut","name":"ChunksExactMut","id":"1:49783:7685","glob":false}},"0:4761:306":{"id":"0:4761:306","crate_id":0,"name":"as_ptr","span":{"filename":"library/alloc/src/rc.rs","begin":[2260,4],"end":[2273,5]},"visibility":"public","docs":"Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.\n\nThe pointer is valid only if there are some strong references. The pointer may be dangling,\nunaligned or even [`null`] otherwise.\n\n# Examples\n\n```\nuse std::rc::Rc;\nuse std::ptr;\n\nlet strong = Rc::new(\"hello\".to_owned());\nlet weak = Rc::downgrade(&strong);\n// Both point to the same object\nassert!(ptr::eq(&*strong, weak.as_ptr()));\n// The strong here keeps it alive, so we can still access the object.\nassert_eq!(\"hello\", unsafe { &*weak.as_ptr() });\n\ndrop(strong);\n// But not any more. We can do weak.as_ptr(), but accessing the pointer would lead to\n// undefined behaviour.\n// assert_eq!(\"hello\", unsafe { &*weak.as_ptr() });\n```\n\n[`null`]: ptr::null","links":{"ptr::null":"1:2134:10551"},"attrs":["#[must_use]","#[stable(feature = \"rc_as_ptr\", since = \"1.45.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:863":{"id":"0:863","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1309,0],"end":[1313,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:865:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:7020-0:1680:4069":{"id":"b:1:7020-0:1680:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:1680:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:5716:815":{"id":"0:5716:815","crate_id":0,"name":"lt","span":{"filename":"library/alloc/src/sync.rs","begin":[2372,4],"end":[2374,5]},"visibility":"default","docs":"Less-than comparison for two `Arc`s.\n\nThe two are compared by calling `<` on their inner values.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nassert!(five < Arc::new(6));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:1435:3845":{"id":"b:1:2510-0:1435:3845","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangeMut","id":"0:1435:3845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2495-0:6725:1970":{"id":"b:1:2495-0:6725:1970","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:7026:895":{"id":"0:7026:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/string.rs","begin":[2253,0],"end":[2253,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:2970:4926":{"id":"b:1:2499-0:2970:4926","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:2970:4926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7710:3767-0:6869:1971":{"id":"a:1:7710:3767-0:6869:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3935:2759":{"id":"0:3935:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[113,4],"end":[126,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1909:668":{"id":"0:1909:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2231,4],"end":[2239,5]},"visibility":"default","docs":"Converts a `[(K, V); N]` into a `BTreeMap<(K, V)>`.\n\n```\nuse std::collections::BTreeMap;\n\nlet map1 = BTreeMap::from([(1, 2), (3, 4)]);\nlet map2: BTreeMap<_, _> = [(1, 2), (3, 4)].into();\nassert_eq!(map1, map2);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["arr",{"kind":"array","inner":{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]},"len":"N"}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:215:2341":{"id":"b:1:2499-0:215:2341","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2216-0:2937:3356":{"id":"b:1:2216-0:2937:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2219-0:3462:5277":{"id":"b:1:2219-0:3462:5277","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cursor","id":"0:3462:5277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:7272:595":{"id":"0:7272:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[35,0],"end":[35,109]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"U"}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6888:409":{"id":"0:6888:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[80,9],"end":[80,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:0:671-0:5533:7157":{"id":"b:0:671-0:5533:7157","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4182:416":{"id":"0:4182:416","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2700,4],"end":[2702,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5113:7848":{"id":"0:5113:7848","crate_id":0,"name":"to_ascii_lowercase","span":{"filename":"library/alloc/src/str.rs","begin":[594,4],"end":[599,5]},"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase","links":{"str::make_ascii_lowercase":"1:11434:7849"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:6944:6202":{"id":"b:1:2219-0:6944:6202","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3303-0:6897:102":{"id":"b:1:3303-0:6897:102","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6900":{"id":"0:6900","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[109,9],"end":[109,18]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6901:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1643":{"id":"0:1643","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1755,0],"end":[1759,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:1376:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1646:782"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3769:2750":{"id":"0:3769:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[194,4],"end":[194,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:5889:921":{"id":"0:5889:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/vec/drain_filter.rs","begin":[122,4],"end":[146,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1852:1746":{"id":"0:1852:1746","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2131,4],"end":[2133,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["(k, v)",{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6491:3320":{"id":"0:6491:3320","crate_id":0,"name":"append","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1935,4],"end":[1940,5]},"visibility":"public","docs":"Moves all the elements of `other` into `self`, leaving `other` empty.\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` bytes.\n\n# Examples\n\n```\nlet mut vec = vec![1, 2, 3];\nlet mut vec2 = vec![4, 5, 6];\nvec.append(&mut vec2);\nassert_eq!(vec, [1, 2, 3, 4, 5, 6]);\nassert_eq!(vec2, []);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"append\", since = \"1.4.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5222:8674":{"id":"0:5222:8674","crate_id":0,"name":"into_boxed_str","span":{"filename":"library/alloc/src/string.rs","begin":[1848,4],"end":[1851,5]},"visibility":"public","docs":"Converts this `String` into a <code>[Box]<[str]></code>.\n\nThis will drop any excess capacity.\n\n[str]: prim@str \"str\"\n\n# Examples\n\nBasic usage:\n\n```\nlet s = String::from(\"hello\");\n\nlet b = s.into_boxed_str();\n```","links":{"Box":"0:276:1792","prim@str":"1:58436:10463"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3877:2759":{"id":"0:3877:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[60,4],"end":[62,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3066":{"id":"0:3066","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1207,0],"end":[1219,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7012:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3068:670"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:50509:8713":{"id":"1:50509:8713","crate_id":1,"name":"is_suffix_of","span":{"filename":"/rust-lang-rust/library/core/src/str/pattern.rs","begin":[910,4],"end":[910,93]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"resolved_path","inner":{"name":"CharPredicateSearcher","id":"1:50488:10935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11033:7919","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:7020-0:1348:3805":{"id":"b:1:7020-0:1348:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:1348:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:3145:59":{"id":"0:3145:59","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1377,4],"end":[1379,5]},"visibility":"default","docs":"Creates an empty `BTreeSet`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:3531:4069":{"id":"b:1:2219-0:3531:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3531:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4376:668":{"id":"0:4376:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[841,4],"end":[843,5]},"visibility":"default","docs":"Converts a [`CString`] into an owned [`Cow`] without copying or allocating.","links":{"`CString`":"0:6897:102","`Cow`":"0:676:109"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:5533:7157":{"id":"a:1:7710:3767-0:5533:7157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4366":{"id":"0:4366","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[788,0],"end":[795,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"c_string_from_box\", since = \"1.18.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4367:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1806":{"id":"0:1806","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2056,0],"end":[2056,73]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:1415:3837","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5677:2513":{"id":"0:5677:2513","crate_id":0,"name":"from_raw","span":{"filename":"library/alloc/src/sync.rs","begin":[1975,4],"end":[1992,5]},"visibility":"public","docs":"Converts a raw pointer previously created by [`into_raw`] back into `Weak<T>`.\n\nThis can be used to safely get a strong reference (by calling [`upgrade`]\nlater) or to deallocate the weak count by dropping the `Weak<T>`.\n\nIt takes ownership of one weak reference (with the exception of pointers created by [`new`],\nas these don't own anything; the method still works on them).\n\n# Safety\n\nThe pointer must have originated from the [`into_raw`] and must still own its potential\nweak reference.\n\nIt is allowed for the strong count to be 0 at the time of calling this. Nevertheless, this\ntakes ownership of one weak reference currently represented as a raw pointer (the weak\ncount is not modified by this operation) and therefore it must be paired with a previous\ncall to [`into_raw`].\n# Examples\n\n```\nuse std::sync::{Arc, Weak};\n\nlet strong = Arc::new(\"hello\".to_owned());\n\nlet raw_1 = Arc::downgrade(&strong).into_raw();\nlet raw_2 = Arc::downgrade(&strong).into_raw();\n\nassert_eq!(2, Arc::weak_count(&strong));\n\nassert_eq!(\"hello\", &*unsafe { Weak::from_raw(raw_1) }.upgrade().unwrap());\nassert_eq!(1, Arc::weak_count(&strong));\n\ndrop(strong);\n\n// Decrement the last weak count.\nassert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());\n```\n\n[`new`]: Weak::new\n[`into_raw`]: Weak::into_raw\n[`upgrade`]: Weak::upgrade","links":{"Weak::into_raw":"0:5676:2546","Weak::upgrade":"0:5680:7614","Weak::new":"0:5668:908"},"attrs":["#[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["ptr",{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:4559:2391":{"id":"0:4559:2391","crate_id":0,"name":"try_new_zeroed","span":{"filename":"library/alloc/src/rc.rs","begin":[627,4],"end":[635,5]},"visibility":"public","docs":"Constructs a new `Rc` with uninitialized contents, with the memory\nbeing filled with `0` bytes, returning an error if the allocation fails\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and\nincorrect usage of this method.\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nuse std::rc::Rc;\n\nlet zero = Rc::<u32>::try_new_zeroed()?;\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0);\n# Ok::<(), std::alloc::AllocError>(())\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1519:2186"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50972:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7238:595":{"id":"0:7238:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[26,0],"end":[26,122]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:5533:7157":{"id":"b:1:2495-0:5533:7157","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:713:995":{"id":"0:713:995","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/borrow.rs","begin":[378,4],"end":[380,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5683:7194":{"id":"0:5683:7194","crate_id":0,"name":"strong_count","span":{"filename":"library/alloc/src/sync.rs","begin":[2053,4],"end":[2055,5]},"visibility":"public","docs":"Gets the number of strong (`Arc`) pointers pointing to this allocation.\n\nIf `self` was created using [`Weak::new`], this will return 0.","links":{"`Weak::new`":"0:5668:908"},"attrs":["#[must_use]","#[stable(feature = \"weak_counts\", since = \"1.41.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4689:650":{"id":"0:4689:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/rc.rs","begin":[1879,4],"end":[1881,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1009":{"id":"0:1009","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1707,0],"end":[1721,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"extend_ref\", since = \"1.2.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:2656:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7025:3507","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:1012:2885","0:1014:1746","0:1015:3508"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:320":{"id":"0:320","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[873,0],"end":[910,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:323:329"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3303-0:4737:7157":{"id":"b:1:3303-0:4737:7157","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4907:5121":{"id":"0:4907:5121","crate_id":0,"name":"sort","span":{"filename":"library/alloc/src/slice.rs","begin":[202,4],"end":[207,5]},"visibility":"public","docs":"Sorts the slice.\n\nThis sort is stable (i.e., does not reorder equal elements) and *O*(*n* \\* log(*n*)) worst-case.\n\nWhen applicable, unstable sorting is preferred because it is generally faster than stable\nsorting and it doesn't allocate auxiliary memory.\nSee [`sort_unstable`](slice::sort_unstable).\n\n# Current implementation\n\nThe current algorithm is an adaptive, iterative merge sort inspired by\n[timsort](https://en.wikipedia.org/wiki/Timsort).\nIt is designed to be very fast in cases where the slice is nearly sorted, or consists of\ntwo or more sorted sequences concatenated one after another.\n\nAlso, it allocates temporary storage half the size of `self`, but for short slices a\nnon-allocating insertion sort is used instead.\n\n# Examples\n\n```\nlet mut v = [-5, 4, 1, -3, 2];\n\nv.sort();\nassert!(v == [-5, -3, 1, 2, 4]);\n```","links":{"slice::sort_unstable":"1:10440:7783"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3108:571":{"id":"0:3108:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1307,4],"end":[1309,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:5424:3449":{"id":"b:1:2495-0:5424:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1886:995":{"id":"0:1886:995","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2181,4],"end":[2183,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4860":{"id":"0:4860","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[60,45],"end":[60,60]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rchunks\", since = \"1.31.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::RChunksExactMut","name":"RChunksExactMut","id":"1:49875:7695","glob":false}},"a:1:2644:214-0:6897:102":{"id":"a:1:2644:214-0:6897:102","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11382:40315":{"id":"1:11382:40315","crate_id":1,"name":"split_once","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1657,4],"end":[1657,95]},"visibility":"public","docs":"Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=\".split_once('='), Some((\"cfg\", \"\")));\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:0:671-0:4521:198":{"id":"b:0:671-0:4521:198","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5094:7975":{"id":"0:5094:7975","crate_id":0,"name":"into_boxed_bytes","span":{"filename":"library/alloc/src/str.rs","begin":[238,4],"end":[240,5]},"visibility":"public","docs":"Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```","links":{},"attrs":["#[rustc_allow_incoherent_impl]","#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:0:671-0:6083:3475":{"id":"b:0:671-0:6083:3475","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2499-0:1680:4069":{"id":"b:1:2499-0:1680:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:1680:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11332:40311":{"id":"1:11332:40311","crate_id":1,"name":"slice_unchecked","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[599,4],"end":[599,74]},"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```","links":{"`str`":"1:58436:10463","crate::ops::Index":"1:2969:3662","str::slice_mut_unchecked":"1:11333:40312"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked(begin..end)` instead\")]","#[must_use]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:0:671-0:6816:3475":{"id":"b:0:671-0:6816:3475","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4260":{"id":"0:4260","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[38,0],"end":[38,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"btree_map::BTreeMap","name":"BTreeMap","id":"0:1301:94","glob":false}},"0:3178:2751":{"id":"0:3178:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1503,4],"end":[1505,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6613:2750":{"id":"0:6613:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2799,4],"end":[2799,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"0:6116":{"id":"0:6116","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[183,0],"end":[294,1]},"visibility":{"restricted":{"parent":"0:6056:757","path":"::vec::into_iter"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6119:2750","0:6120:921","0:6121:2751","0:6122:6108","0:6123:488","0:6124:10274"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:645:2822":{"id":"0:645:2822","crate_id":0,"name":"description","span":{"filename":"library/alloc/src/boxed.rs","begin":[2416,4],"end":[2418,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated, deprecated_in_future)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6136:2762":{"id":"0:6136:2762","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[339,4],"end":[341,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1786":{"id":"0:1786","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2025,0],"end":[2039,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:1415:3837","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1790:2750","0:1791:921","0:1793:2751","0:1794:2753"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3543:2750":{"id":"0:3543:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1721,4],"end":[1721,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"b:1:7020-0:6779:3475":{"id":"b:1:7020-0:6779:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6779:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:5972":{"id":"0:5972","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[37,0],"end":[41,1]},"visibility":{"restricted":{"parent":"0:5946:3448","path":"::vec::drain"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:5975:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4279":{"id":"0:4279","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[157,0],"end":[157,46]},"visibility":{"restricted":{"parent":"0:744:1794","path":"::collections"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","provide","cause","source","description"],"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2510-0:1201:3672":{"id":"b:1:2510-0:1201:3672","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:1201:3672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4175":{"id":"0:4175","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2691,0],"end":[2695,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2305:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["le","ge","lt","gt"],"trait":{"name":"PartialOrd","id":"1:2305:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:4178:995"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4235:1746":{"id":"0:4235:1746","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2800,4],"end":[2802,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["elem",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:1415:3837":{"id":"b:1:2510-0:1415:3837","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:1415:3837","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7710:3767-0:1385:3820":{"id":"a:1:7710:3767-0:1385:3820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:1385:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2216-0:1301:94":{"id":"b:1:2216-0:1301:94","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2871:3015":{"id":"0:2871:3015","crate_id":0,"name":"set","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[4,0],"end":[1793,10]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:2908:95","0:2937:3356","0:6779:3475","0:6787:192","0:2944:4916","0:2970:4926","0:2978:4931","0:3004:4940","0:3096:4069"],"is_stripped":false}},"0:4406":{"id":"0:4406","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1009,0],"end":[1014,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_into\", since = \"1.7.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4407:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3563":{"id":"0:3563","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1773,0],"end":[1780,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"drain_filter\", reason = \"recently added\", issue =\n\"43244\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3531:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:3566:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4356:59":{"id":"0:4356:59","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[739,4],"end":[742,5]},"visibility":"default","docs":"Creates an empty `CString`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4546:908":{"id":"0:4546:908","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/rc.rs","begin":[374,4],"end":[385,5]},"visibility":"public","docs":"Constructs a new `Rc<T>`.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3140:2885":{"id":"0:3140:2885","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1364,4],"end":[1366,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:733:267":{"id":"0:733:267","crate_id":0,"name":"add","span":{"filename":"library/alloc/src/borrow.rs","begin":[444,4],"end":[447,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:2735:2887","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2658:222-0:1415:3837":{"id":"a:1:2658:222-0:1415:3837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:1415:3837","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5289:2885":{"id":"0:5289:2885","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/string.rs","begin":[2155,4],"end":[2157,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2915:702":{"id":"0:2915:702","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[90,4],"end":[92,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:8805:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6921":{"id":"0:6921","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[134,16],"end":[134,25]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6922:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4549:1758":{"id":"0:4549:1758","crate_id":0,"name":"new_uninit","span":{"filename":"library/alloc/src/rc.rs","begin":[504,4],"end":[512,5]},"visibility":"public","docs":"Constructs a new `Rc` with uninitialized contents.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(get_mut_unchecked)]\n\nuse std::rc::Rc;\n\nlet mut five = Rc::<u32>::new_uninit();\n\n// Deferred initialization:\nRc::get_mut(&mut five).unwrap().write(5);\n\nlet five = unsafe { five.assume_init() };\n\nassert_eq!(*five, 5)\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3188:782":{"id":"0:3188:782","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1527,4],"end":[1529,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1201:3672":{"id":"0:1201:3672","crate_id":0,"name":"VacantEntry","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[48,0],"end":[64,1]},"visibility":"public","docs":"A view into a vacant entry in a `BTreeMap`.\nIt is part of the [`Entry`] enum.","links":{"`Entry`":"0:1185:3669"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1272","a:1:2658:222-0:1201:3672","a:1:2644:214-0:1201:3672","a:1:2708:2329-0:1201:3672","a:1:7709:3766-0:1201:3672","a:1:7710:3767-0:1201:3672","b:1:2510-0:1201:3672","b:1:2505-0:1201:3672","b:1:2216-0:1201:3672","b:1:3303-0:1201:3672","b:1:2219-0:1201:3672","b:1:2499-0:1201:3672","b:1:2495-0:1201:3672","0:1211"]}},"0:6122:6108":{"id":"0:6122:6108","crate_id":0,"name":"advance_by","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[216,4],"end":[234,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6660:416":{"id":"0:6660:416","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3042,4],"end":[3044,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6661":{"id":"0:6661","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3048,0],"end":[3058,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6664:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:389:2634":{"id":"0:389:2634","crate_id":0,"name":"write_u8","span":{"filename":"library/alloc/src/boxed.rs","begin":[1394,4],"end":[1396,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"u8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5791":{"id":"0:5791","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2777,0],"end":[2777,35]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"pin\", since = \"1.33.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1707":{"id":"0:1707","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1865,0],"end":[1878,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:1680:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1712:2750","0:1713:921","0:1714:2751"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5402:668":{"id":"0:5402:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[2788,4],"end":[2790,5]},"visibility":"default","docs":"Converts a [`String`] into an [`Owned`] variant.\nNo heap allocation is performed, and the string\nis not copied.\n\n# Example\n\n```\n# use std::borrow::Cow;\nlet s = \"eggplant\".to_string();\nlet s2 = \"eggplant\".to_string();\nassert_eq!(Cow::from(s), Cow::<'static, str>::Owned(s2));\n```\n\n[`Owned`]: crate::borrow::Cow::Owned \"borrow::Cow::Owned\"","links":{"crate::borrow::Cow::Owned":"0:682:2677","`String`":"0:6980:218"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:7074:9310":{"id":"a:1:2644:214-0:7074:9310","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Splice","id":"0:7074:9310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6963":{"id":"0:6963","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[225,16],"end":[225,25]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6964:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3385":{"id":"0:3385","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[409,0],"end":[1001,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3387:908","0:3388:3320","0:3389:768","0:3390:4093","0:3391:5276","0:3392:5280","0:3393:5283","0:3394:5286","0:3395:2762","0:3396:782","0:3397:3451","0:3398:4997","0:3400:4073","0:3402:5319","0:3404:4312","0:3406:5327","0:3408:5331","0:3409:5339","0:3410:5344","0:3411:5349","0:3412:4039","0:3413:3521","0:3414:3974"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4970:2677":{"id":"0:4970:2677","crate_id":0,"name":"Owned","span":{"filename":"library/alloc/src/slice.rs","begin":[783,4],"end":[783,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:4171:595":{"id":"0:4171:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2643,4],"end":[2677,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:6757:3337":{"id":"b:1:2510-0:6757:3337","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainSorted","id":"0:6757:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5668:908":{"id":"0:5668:908","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/sync.rs","begin":[1843,4],"end":[1845,5]},"visibility":"public","docs":"Constructs a new `Weak<T>`, without allocating any memory.\nCalling [`upgrade`] on the return value always gives [`None`].\n\n[`upgrade`]: Weak::upgrade\n\n# Examples\n\n```\nuse std::sync::Weak;\n\nlet empty: Weak<i64> = Weak::new();\nassert!(empty.upgrade().is_none());\n```","links":{"`None`":"1:47999:173","Weak::upgrade":"0:5680:7614"},"attrs":["#[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]","#[rustc_const_unstable(feature = \"const_weak_new\", issue = \"95091\", reason =\n\"recently added\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:1216:3670":{"id":"b:1:2495-0:1216:3670","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:1216:3670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2644:214-0:1216:3670":{"id":"a:1:2644:214-0:1216:3670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:1216:3670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:219":{"id":"0:219","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[43,0],"end":[43,52]},"visibility":{"restricted":{"parent":"0:194:2340","path":"::boxed::thin"}},"docs":"`ThinBox<T>` is `Send` if `T` is `Send` because the data is owned.","links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7709:3766-0:1680:4069":{"id":"a:1:7709:3766-0:1680:4069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:1680:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:1815":{"id":"0:1815","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2066,0],"end":[2066,47]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:1426:192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11423:40327":{"id":"1:11423:40327","crate_id":1,"name":"trim_left_matches","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[2257,4],"end":[2257,77]},"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:11013:1760","prim@char":"1:58430:10458"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start_matches`\",\nsuggestion = \"trim_start_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3483":{"id":"0:3483","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1187,0],"end":[1302,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Cursor","id":"0:3462:5277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3486:742","0:3487:5369","0:3488:5371","0:3490:5278","0:3492:5415","0:3494:5417","0:3496:4073","0:3497:4312"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2567-0:5513:69":{"id":"b:1:2567-0:5513:69","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/error.rs","begin":[198,0],"end":[198,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"1:3352:10680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2569:9224"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"a:1:2658:222-0:2970:4926":{"id":"a:1:2658:222-0:2970:4926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:2970:4926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3794:3805":{"id":"0:3794:3805","crate_id":0,"name":"IterMut","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[12,0],"end":[15,1]},"visibility":"public","docs":"A mutable iterator over the elements of a `VecDeque`.\n\nThis `struct` is created by the [`iter_mut`] method on [`super::VecDeque`]. See its\ndocumentation for more.\n\n[`iter_mut`]: super::VecDeque::iter_mut","links":{"`super::VecDeque`":"0:4016:238","super::VecDeque::iter_mut":"0:4105:4093"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:3794:3805","a:1:2644:214-0:3794:3805","a:1:2708:2329-0:3794:3805","a:1:7709:3766-0:3794:3805","a:1:7710:3767-0:3794:3805","b:1:7020-0:3794:3805","b:1:2510-0:3794:3805","b:1:2505-0:3794:3805","b:1:2216-0:3794:3805","b:1:3303-0:3794:3805","b:1:2219-0:3794:3805","b:1:2499-0:3794:3805","b:1:2495-0:3794:3805","0:3803","0:3806","0:3823","0:3836","0:3840","0:3842"]}},"0:3384:59":{"id":"0:3384:59","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[404,4],"end":[406,5]},"visibility":"default","docs":"Creates an empty `LinkedList<T>`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2658:222-0:6725:1970":{"id":"a:1:2658:222-0:6725:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2567-0:6914:6204":{"id":"b:1:2567-0:6914:6204","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/error.rs","begin":[198,0],"end":[198,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"1:3352:10680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:9224"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"b:1:2499-0:1338:3356":{"id":"b:1:2499-0:1338:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:7221:895":{"id":"0:7221:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[23,0],"end":[23,122]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"A2"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6724":{"id":"0:6724","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/lib.rs","begin":[257,4],"end":[257,30]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"import","inner":{"source":"core::format_args","name":"format_args","id":"1:21:660","glob":false}},"0:1826:2750":{"id":"0:1826:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2077,4],"end":[2077,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}},"0:6918":{"id":"0:6918","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[134,9],"end":[134,14]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6919:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11616:756":{"id":"1:11616:756","crate_id":1,"name":"into_future","span":{"filename":"/rust-lang-rust/library/core/src/future/into_future.rs","begin":[136,4],"end":[136,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"IntoFuture","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"IntoFuture","id":"1:11608:10704","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4133:4039":{"id":"0:4133:4039","crate_id":0,"name":"split_off","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1850,4],"end":[1895,5]},"visibility":"public","docs":"Splits the deque into two at the given index.\n\nReturns a newly allocated `VecDeque`. `self` contains elements `[0, at)`,\nand the returned deque contains elements `[at, len)`.\n\nNote that the capacity of `self` does not change.\n\nElement at index 0 is the front of the queue.\n\n# Panics\n\nPanics if `at > len`.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf: VecDeque<_> = [1, 2, 3].into();\nlet buf2 = buf.split_off(1);\nassert_eq!(buf, [1]);\nassert_eq!(buf2, [2, 3]);\n```","links":{},"attrs":["#[inline]","#[must_use = \"use `.truncate()` if you don't need the other half\"]","#[stable(feature = \"split_off\", since = \"1.4.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["at",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4589:7324":{"id":"0:4589:7324","crate_id":0,"name":"ptr_eq","span":{"filename":"library/alloc/src/rc.rs","begin":[1170,4],"end":[1172,5]},"visibility":"public","docs":"Returns `true` if the two `Rc`s point to the same allocation in a vein similar to\n[`ptr::eq`]. See [that function][`ptr::eq`] for caveats when comparing `dyn Trait` pointers.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\nlet same_five = Rc::clone(&five);\nlet other_five = Rc::new(5);\n\nassert!(Rc::ptr_eq(&five, &same_five));\nassert!(!Rc::ptr_eq(&five, &other_five));\n```","links":{"`ptr::eq`":"1:2198:595"},"attrs":["#[inline]","#[stable(feature = \"ptr_eq\", since = \"1.17.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1887":{"id":"0:1887","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2187,0],"end":[2192,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","clamp","min"],"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1891:416"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1290:3797":{"id":"0:1290:3797","crate_id":0,"name":"insert","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[525,4],"end":[527,5]},"visibility":"public","docs":"Sets the value of the entry with the `OccupiedEntry`'s key,\nand returns the entry's old value.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nif let Entry::Occupied(mut o) = map.entry(\"poneyland\") {\n    assert_eq!(o.insert(15), 12);\n}\nassert_eq!(map[\"poneyland\"], 15);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"V"}]],"output":{"kind":"generic","inner":"V"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:6740:3364":{"id":"b:1:2495-0:6740:3364","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11344:4997":{"id":"1:11344:4997","crate_id":1,"name":"contains","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1070,4],"end":[1070,65]},"visibility":"public","docs":"Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```","links":{"self::pattern":"1:11013:1760","prim@char":"1:58430:10458"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4715":{"id":"0:4715","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2059,0],"end":[2069,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"boxed_slice_try_from\", since = \"1.43.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}}],"bindings":[]}}}},"items":["0:4719:126","0:4720:1418"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:413":{"id":"0:413","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1509,0],"end":[1523,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_from_cow\", since = \"1.45.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:2656:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"items":["0:415:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5799:383":{"id":"0:5799:383","crate_id":0,"name":"cause","span":{"filename":"library/alloc/src/sync.rs","begin":[2809,4],"end":[2811,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"core::error::Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4284":{"id":"0:4284","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/mod.rs","begin":[86,31],"end":[86,46]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"self::c_str::IntoStringError","name":"IntoStringError","id":"0:6957:6203","glob":false}},"0:1291:3521":{"id":"0:1291:3521","crate_id":0,"name":"remove","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[547,4],"end":[549,5]},"visibility":"public","docs":"Takes the value of the entry out of the map, and returns it.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nif let Entry::Occupied(o) = map.entry(\"poneyland\") {\n    assert_eq!(o.remove(), 12);\n}\n// If we try to get \"poneyland\"'s value, it'll panic:\n// println!(\"{}\", map[\"poneyland\"]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"V"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:1404:3833":{"id":"b:1:3303-0:1404:3833","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:1404:3833","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1533":{"id":"0:1533","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1534,0],"end":[1538,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1536:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:116:2055":{"id":"0:116:2055","crate_id":0,"name":"allocate","span":{"filename":"library/alloc/src/alloc.rs","begin":[236,4],"end":[238,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50943:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:1815:1966","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50972:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3593:757":{"id":"0:3593:757","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1837,4],"end":[1839,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4415:180":{"id":"0:4415:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1040,4],"end":[1040,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:829:2020":{"id":"0:829:2020","crate_id":0,"name":"capacity","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[906,4],"end":[908,5]},"visibility":"public","docs":"Returns the number of elements the binary heap can hold without reallocating.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::with_capacity(100);\nassert!(heap.capacity() >= 100);\nheap.push(4);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2931:416":{"id":"0:2931:416","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[114,4],"end":[116,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:3531:4069":{"id":"a:1:7710:3767-0:3531:4069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3531:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4354:668":{"id":"0:4354:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[731,4],"end":[733,5]},"visibility":"default","docs":"Converts a [`CString`] into a <code>[Vec]<[u8]></code>.\n\nThe conversion consumes the [`CString`], and removes the terminating NUL byte.","links":{"Vec":"0:6407:237","u8":"1:58447:10472","`CString`":"0:6897:102"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:399:2644":{"id":"0:399:2644","crate_id":0,"name":"write_i128","span":{"filename":"library/alloc/src/boxed.rs","begin":[1424,4],"end":[1426,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"i128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6421:2021":{"id":"0:6421:2021","crate_id":0,"name":"with_capacity_in","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[672,4],"end":[674,5]},"visibility":"public","docs":"Constructs a new, empty `Vec<T, A>` with at least the specified capacity\nwith the provided allocator.\n\nThe vector will be able to hold at least `capacity` elements without\nreallocating. This method is allowed to allocate for more elements than\n`capacity`. If `capacity` is 0, the vector will not allocate.\n\nIt is important to note that although the returned vector has the\nminimum *capacity* specified, the vector will have a zero *length*. For\nan explanation of the difference between length and capacity, see\n*[Capacity and reallocation]*.\n\nIf it is important to know the exact allocated capacity of a `Vec`,\nalways use the [`capacity`] method after construction.\n\nFor `Vec<T, A>` where `T` is a zero-sized type, there will be no allocation\nand the capacity will always be `usize::MAX`.\n\n[Capacity and reallocation]: #capacity-and-reallocation\n[`capacity`]: Vec::capacity\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` bytes.\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nlet mut vec = Vec::with_capacity_in(10, System);\n\n// The vector contains no items, even though it has capacity for more\nassert_eq!(vec.len(), 0);\nassert_eq!(vec.capacity(), 10);\n\n// These are all done without reallocating...\nfor i in 0..10 {\n    vec.push(i);\n}\nassert_eq!(vec.len(), 10);\nassert_eq!(vec.capacity(), 10);\n\n// ...but this may make the vector reallocate\nvec.push(11);\nassert_eq!(vec.len(), 11);\nassert!(vec.capacity() >= 11);\n\n// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\nlet vec_units = Vec::<(), System>::with_capacity_in(10, System);\nassert_eq!(vec_units.capacity(), usize::MAX);\n```","links":{"Vec::capacity":"0:6425:2020"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["capacity",{"kind":"primitive","inner":"usize"}],["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1464:3893":{"id":"0:1464:3893","crate_id":0,"name":"first_entry","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[743,4],"end":[756,5]},"visibility":"public","docs":"Returns the first entry in the map for in-place manipulation.\nThe key of this entry is the minimum key in the map.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nmap.insert(2, \"b\");\nif let Some(mut entry) = map.first_entry() {\n    if *entry.key() > 0 {\n        entry.insert(\"first\");\n    }\n}\nassert_eq!(*map.get(&1).unwrap(), \"first\");\nassert_eq!(*map.get(&2).unwrap(), \"b\");\n```","links":{},"attrs":["#[stable(feature = \"map_first_last\", since = \"1.66.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:1216:3670","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1696":{"id":"0:1696","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1843,0],"end":[1850,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:1680:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1701:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6999":{"id":"0:6999","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[406,27],"end":[406,29]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2655:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3165:356":{"id":"0:3165:356","crate_id":0,"name":"bitor","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1474,4],"end":[1479,5]},"visibility":"default","docs":"Returns the union of `self` and `rhs` as a new `BTreeSet<T>`.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet a = BTreeSet::from([1, 2, 3]);\nlet b = BTreeSet::from([3, 4, 5]);\n\nlet result = &a | &b;\nassert_eq!(result, BTreeSet::from([1, 2, 3, 4, 5]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1922:2762":{"id":"0:1922:2762","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2422,4],"end":[2424,5]},"visibility":"public","docs":"Returns `true` if the map contains no elements.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\nassert!(a.is_empty());\na.insert(1, \"a\");\nassert!(!a.is_empty());\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_unstable(feature = \"const_btree_len\", issue = \"71835\",\nimplied_by = \"const_btree_new\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:5533:7157":{"id":"b:1:3303-0:5533:7157","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4637:536":{"id":"0:4637:536","crate_id":0,"name":"deref","span":{"filename":"library/alloc/src/rc.rs","begin":[1553,4],"end":[1555,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline(always)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:358:409":{"id":"0:358:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/boxed.rs","begin":[1328,4],"end":[1332,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:859:3356":{"id":"b:1:2216-0:859:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5393:668":{"id":"0:5393:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[2720,4],"end":[2722,5]},"visibility":"default","docs":"Converts the given [`String`] to a boxed `str` slice that is owned.\n\n# Examples\n\nBasic usage:\n\n```\nlet s1: String = String::from(\"hello world\");\nlet s2: Box<str> = Box::from(s1);\nlet s3: String = String::from(s2);\n\nassert_eq!(\"hello world\", s3)\n```","links":{"`String`":"0:6980:218"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4422":{"id":"0:4422","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1126,0],"end":[1131,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","provide","cause","source","description"],"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4423:2822"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7710:3767-0:1426:192":{"id":"a:1:7710:3767-0:1426:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:1426:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2495-0:771:3221":{"id":"b:1:2495-0:771:3221","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PeekMut","id":"0:771:3221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:7020-0:5964:3449":{"id":"b:1:7020-0:5964:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"b:1:2495-0:6897:102":{"id":"b:1:2495-0:6897:102","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2708:2329-0:3900:3356":{"id":"a:1:2708:2329-0:3900:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6037":{"id":"0:6037","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/cow.rs","begin":[7,0],"end":[17,1]},"visibility":{"restricted":{"parent":"0:6033:2675","path":"::vec::cow"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"cow_from_vec\", since = \"1.8.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"items":["0:6040:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3046:3920":{"id":"0:3046:3920","crate_id":0,"name":"pop_last","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[874,4],"end":[879,5]},"visibility":"public","docs":"Removes the last element from the set and returns it, if any.\nThe last element is always the maximum element in the set.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::new();\n\nset.insert(1);\nwhile let Some(n) = set.pop_last() {\n    assert_eq!(n, 1);\n}\nassert!(set.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"map_first_last\", since = \"1.66.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5085":{"id":"0:5085","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[188,0],"end":[193,1]},"visibility":{"restricted":{"parent":"0:5004:1344","path":"::str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5086:1793"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:922":{"id":"0:922","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1484,0],"end":[1496,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:6749:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:924:2750","0:925:921","0:926:2751"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2499-0:2908:95":{"id":"b:1:2499-0:2908:95","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7709:3766-0:1216:3670":{"id":"a:1:7709:3766-0:1216:3670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:1216:3670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:6743":{"id":"0:6743","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1441,9],"end":[1441,14]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:6745:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4427:2625":{"id":"0:4427:2625","crate_id":0,"name":"source","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1143,4],"end":[1145,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"core::error::Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2501:668":{"id":"1:2501:668","crate_id":1,"name":"from","span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[736,4],"end":[736,22]},"visibility":"default","docs":"Returns the argument unchanged.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5312:650":{"id":"0:5312:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/string.rs","begin":[2282,4],"end":[2284,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1444:650":{"id":"0:1444:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[559,4],"end":[562,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:7057:4069":{"id":"a:1:7710:3767-0:7057:4069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:7057:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:838:782":{"id":"0:838:782","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1146,4],"end":[1148,5]},"visibility":"public","docs":"Returns the length of the binary heap.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet heap = BinaryHeap::from([1, 3]);\n\nassert_eq!(heap.len(), 2);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:729:307":{"id":"0:729:307","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/borrow.rs","begin":[433,4],"end":[435,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5232":{"id":"0:5232","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[1973,0],"end":[1978,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","provide","cause","source","description"],"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5233:2822"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7710:3767-0:6083:3475":{"id":"a:1:7710:3767-0:6083:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:3303-0:1394:3826":{"id":"b:1:3303-0:1394:3826","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:1394:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:309:2451":{"id":"0:309:2451","crate_id":0,"name":"try_new_zeroed_slice","span":{"filename":"library/alloc/src/boxed.rs","begin":[726,4],"end":[735,5]},"visibility":"public","docs":"Constructs a new boxed slice with uninitialized contents, with the memory\nbeing filled with `0` bytes. Returns an error if the allocation fails\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\nof this method.\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nlet values = Box::<[u32]>::try_new_zeroed_slice(3)?;\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [0, 0, 0]);\n# Ok::<(), std::alloc::AllocError>(())\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1519:2186"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50972:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3449:921":{"id":"0:3449:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1083,4],"end":[1095,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6994":{"id":"0:6994","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[406,9],"end":[406,14]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6995:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11338:2612":{"id":"1:11338:2612","crate_id":1,"name":"bytes","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[864,4],"end":[864,36]},"visibility":"public","docs":"An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Bytes","id":"1:49951:7929","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:6869:1971":{"id":"a:1:2708:2329-0:6869:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5453":{"id":"0:5453","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2985,0],"end":[2998,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"from_char_for_string\", since = \"1.46.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5454:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2708:2329-0:1348:3805":{"id":"a:1:2708:2329-0:1348:3805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:1348:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:7709:3766-0:3723:3449":{"id":"a:1:7709:3766-0:3723:3449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:3723:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2499-0:6725:1970":{"id":"b:1:2499-0:6725:1970","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6727":{"id":"0:6727","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/alloc.rs","begin":[53,9],"end":[53,13]},"visibility":{"restricted":{"parent":"0:92:279","path":"::alloc"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Copy","id":"1:2656:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3581:670":{"id":"0:3581:670","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1813,4],"end":[1817,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:0:671-0:1301:94":{"id":"b:0:671-0:1301:94","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:551":{"id":"0:551","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2022,0],"end":[2035,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_slice_clone\", since = \"1.3.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:554:409","0:555:411"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3594":{"id":"0:3594","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1843,0],"end":[1850,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"items":["0:3597:2750","0:3598:3475","0:3599:757"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5298:8710":{"id":"0:5298:8710","crate_id":0,"name":"is_contained_in","span":{"filename":"library/alloc/src/string.rs","begin":[2185,4],"end":[2187,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:473":{"id":"0:473","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1888,0],"end":[1895,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Pointer","id":"1:8583:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:476:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5983":{"id":"0:5983","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[142,0],"end":[146,1]},"visibility":{"restricted":{"parent":"0:5946:3448","path":"::vec::drain"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"vec_drain_as_slice\", since = \"1.46.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2463:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:5987:307"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1475:3797":{"id":"0:1475:3797","crate_id":0,"name":"insert","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[955,4],"end":[966,5]},"visibility":"public","docs":"Inserts a key-value pair into the map.\n\nIf the map did not have this key present, `None` is returned.\n\nIf the map did have this key present, the value is updated, and the old\nvalue is returned. The key is not updated, though; this matters for\ntypes that can be `==` without being identical. See the [module-level\ndocumentation] for more.\n\n[module-level documentation]: index.html#insert-and-complex-keys\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nassert_eq!(map.insert(37, \"a\"), None);\nassert_eq!(map.is_empty(), false);\n\nmap.insert(37, \"b\");\nassert_eq!(map.insert(37, \"c\"), Some(\"b\"));\nassert_eq!(map[&37], \"c\");\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"generic","inner":"K"}],["value",{"kind":"generic","inner":"V"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:3096:4069":{"id":"a:1:2644:214-0:3096:4069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3096:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2644:214-0:859:3356":{"id":"a:1:2644:214-0:859:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3659":{"id":"0:3659","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1991,0],"end":[1991,44]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6901:595":{"id":"0:6901:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[109,9],"end":[109,18]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5187:3275":{"id":"0:5187:3275","crate_id":0,"name":"push","span":{"filename":"library/alloc/src/string.rs","begin":[1223,4],"end":[1228,5]},"visibility":"public","docs":"Appends the given [`char`] to the end of this `String`.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"abc\");\n\ns.push('1');\ns.push('2');\ns.push('3');\n\nassert_eq!(\"abc123\", s);\n```","links":{"`char`":"1:58430:10458"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["ch",{"kind":"primitive","inner":"char"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6637:8668":{"id":"0:6637:8668","crate_id":0,"name":"splice","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2934,4],"end":[2940,5]},"visibility":"public","docs":"Creates a splicing iterator that replaces the specified range in the vector\nwith the given `replace_with` iterator and yields the removed items.\n`replace_with` does not need to be the same length as `range`.\n\n`range` is removed even if the iterator is not consumed until the end.\n\nIt is unspecified how many elements are removed from the vector\nif the `Splice` value is leaked.\n\nThe input iterator `replace_with` is only consumed when the `Splice` value is dropped.\n\nThis is optimal if:\n\n* The tail (elements in the vector after `range`) is empty,\n* or `replace_with` yields fewer or equal elements than `range`’s length\n* or the lower bound of its `size_hint()` is exact.\n\nOtherwise, a temporary vector is allocated and the tail is moved twice.\n\n# Panics\n\nPanics if the starting point is greater than the end point or if\nthe end point is greater than the length of the vector.\n\n# Examples\n\n```\nlet mut v = vec![1, 2, 3, 4];\nlet new = [7, 8, 9];\nlet u: Vec<_> = v.splice(1..3, new).collect();\nassert_eq!(v, &[1, 7, 8, 9, 4]);\nassert_eq!(u, &[2, 3]);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"vec_splice\", since = \"1.21.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["range",{"kind":"generic","inner":"R"}],["replace_with",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Splice","id":"0:7074:9310","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"1:7016:147","args":null}}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3066:3663","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4120:4073":{"id":"0:4120:4073","crate_id":0,"name":"front","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1476,4],"end":[1478,5]},"visibility":"public","docs":"Provides a reference to the front element, or `None` if the deque is\nempty.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nassert_eq!(d.front(), None);\n\nd.push_back(1);\nd.push_back(2);\nassert_eq!(d.front(), Some(&1));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:7057:4069":{"id":"b:1:2495-0:7057:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:7057:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3275":{"id":"0:3275","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1770,0],"end":[1787,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:3004:4940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3278:2750","0:3279:921","0:3280:2751","0:3281:4091"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:873:921":{"id":"0:873:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1328,4],"end":[1330,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4126:5331":{"id":"0:4126:5331","crate_id":0,"name":"push_front","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1613,4],"end":[1624,5]},"visibility":"public","docs":"Prepends an element to the deque.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nd.push_front(1);\nd.push_front(2);\nassert_eq!(d.front(), Some(&2));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4363:668":{"id":"0:4363:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[768,4],"end":[771,5]},"visibility":"default","docs":"Converts a `&CStr` into a `Box<CStr>`,\nby copying the contents into a newly allocated [`Box`].","links":{"`Box`":"0:276:1792"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3468":{"id":"0:3468","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1149,0],"end":[1154,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cursor","id":"0:3462:5277","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3470:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:7007":{"id":"0:7007","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2252,0],"end":[2252,24]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(unused_lifetimes)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7010:595","0:7011:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5600:7271":{"id":"0:5600:7271","crate_id":0,"name":"increment_strong_count","span":{"filename":"library/alloc/src/sync.rs","begin":[1065,4],"end":[1070,5]},"visibility":"public","docs":"Increments the strong reference count on the `Arc<T>` associated with the\nprovided pointer by one.\n\n# Safety\n\nThe pointer must have been obtained through `Arc::into_raw`, and the\nassociated `Arc` instance must be valid (i.e. the strong count must be at\nleast 1) for the duration of this method.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nunsafe {\n    let ptr = Arc::into_raw(five);\n    Arc::increment_strong_count(ptr);\n\n    // This assertion is deterministic because we haven't shared\n    // the `Arc` between threads.\n    let five = Arc::from_raw(ptr);\n    assert_eq!(2, Arc::strong_count(&five));\n}\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"arc_mutate_strong_count\", since = \"1.51.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["ptr",{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:1248":{"id":"0:1248","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[137,0],"end":[144,1]},"visibility":{"restricted":{"parent":"0:1169:3668","path":"::collections::btree::map::entry"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"map_try_insert\", issue = \"82766\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"core::fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["type_id","provide","cause","source","description"],"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"crate::collections::btree_map::OccupiedError","id":"0:1230:3671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1252:2822"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4255:3011":{"id":"0:4255:3011","crate_id":0,"name":"btree_map","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[16,0],"end":[16,17]},"visibility":"public","docs":"An ordered map based on a B-Tree.","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4256"],"is_stripped":false}},"0:5688":{"id":"0:5688","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2156,0],"end":[2188,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"arc_weak\", since = \"1.4.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5690:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2505-0:1435:3845":{"id":"b:1:2505-0:1435:3845","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangeMut","id":"0:1435:3845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4122:4312":{"id":"0:4122:4312","crate_id":0,"name":"back","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1520,4],"end":[1522,5]},"visibility":"public","docs":"Provides a reference to the back element, or `None` if the deque is\nempty.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nassert_eq!(d.back(), None);\n\nd.push_back(1);\nd.push_back(2);\nassert_eq!(d.back(), Some(&2));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4359":{"id":"0:4359","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[754,0],"end":[761,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_from_cow_cstr\", since = \"1.28.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4361:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3136":{"id":"0:3136","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1363,0],"end":[1372,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"extend_ref\", since = \"1.2.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:2656:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7025:3507","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3140:2885","0:3142:1746"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3636:650":{"id":"0:3636:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1939,4],"end":[1941,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:7020-0:1426:192":{"id":"b:1:7020-0:1426:192","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:1426:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:6895":{"id":"0:6895","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[80,31],"end":[80,36]},"visibility":{"restricted":{"parent":"0:744:1794","path":"::collections"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"try_reserve_kind\", reason =\n\"Uncertain how much info should be exposed\", issue = \"48043\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6896:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3036:5011":{"id":"0:3036:5011","crate_id":0,"name":"is_disjoint","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[668,4],"end":[673,5]},"visibility":"public","docs":"Returns `true` if `self` has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet a = BTreeSet::from([1, 2, 3]);\nlet mut b = BTreeSet::new();\n\nassert_eq!(a.is_disjoint(&b), true);\nb.insert(4);\nassert_eq!(a.is_disjoint(&b), true);\nb.insert(1);\nassert_eq!(a.is_disjoint(&b), false);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6109:307":{"id":"0:6109:307","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[172,4],"end":[174,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7045:595":{"id":"0:7045:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[2257,0],"end":[2257,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6872:409":{"id":"0:6872:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[59,9],"end":[59,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3657":{"id":"0:3657","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1988,0],"end":[1988,46]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6474:9832":{"id":"0:6474:9832","crate_id":0,"name":"dedup_by","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1720,4],"end":[1813,5]},"visibility":"public","docs":"Removes all but the first of consecutive elements in the vector satisfying a given equality\nrelation.\n\nThe `same_bucket` function is passed references to two elements from the vector and\nmust determine if the elements compare equal. The elements are passed in opposite order\nfrom their order in the slice, so if `same_bucket(a, b)` returns `true`, `a` is removed.\n\nIf the vector is sorted, this removes all duplicates.\n\n# Examples\n\n```\nlet mut vec = vec![\"foo\", \"bar\", \"Bar\", \"baz\", \"bar\"];\n\nvec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));\n\nassert_eq!(vec, [\"foo\", \"bar\", \"baz\", \"bar\"]);\n```","links":{},"attrs":["#[stable(feature = \"dedup_by\", since = \"1.16.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["same_bucket",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11323:2192":{"id":"1:11323:2192","crate_id":1,"name":"as_mut_ptr","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[415,4],"end":[415,43]},"visibility":"public","docs":"Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.","links":{"`u8`":"1:58447:10472"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4934:7816":{"id":"0:4934:7816","crate_id":0,"name":"Concat","span":{"filename":"library/alloc/src/slice.rs","begin":[678,0],"end":[686,1]},"visibility":"public","docs":"Helper trait for [`[T]::concat`](slice::concat).\n\nNote: the `Item` type parameter is not used in this trait,\nbut it allows impls to be more generic.\nWithout it, we get this error:\n\n```error\nerror[E0207]: the type parameter `T` is not constrained by the impl trait, self type, or predica\n   --> src/liballoc/slice.rs:608:6\n    |\n608 | impl<T: Clone, V: Borrow<[T]>> Concat for [V] {\n    |      ^ unconstrained type parameter\n```\n\nThis is because there could exist `V` types with multiple `Borrow<[_]>` impls,\nsuch that multiple `T` types would apply:\n\n```\n# #[allow(dead_code)]\npub struct Foo(Vec<u32>, Vec<String>);\n\nimpl std::borrow::Borrow<[u32]> for Foo {\n    fn borrow(&self) -> &[u32] { &self.0 }\n}\n\nimpl std::borrow::Borrow<[String]> for Foo {\n    fn borrow(&self) -> &[String] { &self.1 }\n}\n```","links":{"slice::concat":"0:4925:431"},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:4936:180","0:4937:431"],"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":["0:4942","0:5068"]}},"0:3400:4073":{"id":"0:3400:4073","crate_id":0,"name":"front","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[691,4],"end":[693,5]},"visibility":"public","docs":"Provides a reference to the front element, or `None` if the list is\nempty.\n\nThis operation should compute in *O*(1) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\nassert_eq!(dl.front(), None);\n\ndl.push_front(1);\nassert_eq!(dl.front(), Some(&1));\n```","links":{},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:1376:3816":{"id":"b:1:2495-0:1376:3816","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:1376:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5042":{"id":"0:5042","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[38,33],"end":[38,46]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::EscapeDefault","name":"EscapeDefault","id":"1:50273:7937","glob":false}},"0:6436:306":{"id":"0:6436:306","crate_id":0,"name":"as_ptr","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1235,4],"end":[1243,5]},"visibility":"public","docs":"Returns a raw pointer to the vector's buffer, or a dangling raw pointer\nvalid for zero sized reads if the vector didn't allocate.\n\nThe caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up pointing to garbage.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.\n\nThe caller must also ensure that the memory the pointer (non-transitively) points to\nis never written to (except inside an `UnsafeCell`) using this pointer or any pointer\nderived from it. If you need to mutate the contents of the slice, use [`as_mut_ptr`].\n\n# Examples\n\n```\nlet x = vec![1, 2, 4];\nlet x_ptr = x.as_ptr();\n\nunsafe {\n    for i in 0..x.len() {\n        assert_eq!(*x_ptr.add(i), 1 << i);\n    }\n}\n```\n\n[`as_mut_ptr`]: Vec::as_mut_ptr","links":{"Vec::as_mut_ptr":"0:6437:2192"},"attrs":["#[stable(feature = \"vec_as_ptr\", since = \"1.37.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:223":{"id":"0:223","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[50,0],"end":[68,1]},"visibility":{"restricted":{"parent":"0:194:2340","path":"::boxed::thin"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:225:908"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5715:995":{"id":"0:5715:995","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/sync.rs","begin":[2355,4],"end":[2357,5]},"visibility":"default","docs":"Partial comparison for two `Arc`s.\n\nThe two are compared by calling `partial_cmp()` on their inner values.\n\n# Examples\n\n```\nuse std::sync::Arc;\nuse std::cmp::Ordering;\n\nlet five = Arc::new(5);\n\nassert_eq!(Some(Ordering::Less), five.partial_cmp(&Arc::new(6)));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4202":{"id":"0:4202","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2745,0],"end":[2754,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:4205:2750","0:4206:3475","0:4207:757"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:0:671-0:2908:95":{"id":"b:0:671-0:2908:95","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5722:416":{"id":"0:5722:416","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/sync.rs","begin":[2443,4],"end":[2445,5]},"visibility":"default","docs":"Comparison for two `Arc`s.\n\nThe two are compared by calling `cmp()` on their inner values.\n\n# Examples\n\n```\nuse std::sync::Arc;\nuse std::cmp::Ordering;\n\nlet five = Arc::new(5);\n\nassert_eq!(Ordering::Less, five.cmp(&Arc::new(6)));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:6980:218":{"id":"a:1:2708:2329-0:6980:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4410:2903":{"id":"0:4410:2903","crate_id":0,"name":"to_owned","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1020,4],"end":[1022,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3708":{"id":"0:3708","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[35,0],"end":[35,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"self::drain::Drain","name":"Drain","id":"0:3723:3449","glob":false}},"0:6428:2097":{"id":"0:6428:2097","crate_id":0,"name":"try_reserve","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[973,4],"end":[975,5]},"visibility":"public","docs":"Tries to reserve capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to speculatively avoid\nfrequent reallocations. After calling `try_reserve`, capacity will be\ngreater than or equal to `self.len() + additional` if it returns\n`Ok(())`. Does nothing if capacity is already sufficient. This method\npreserves the contents even if an error occurs.\n\n# Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse std::collections::TryReserveError;\n\nfn process_data(data: &[u32]) -> Result<Vec<u32>, TryReserveError> {\n    let mut output = Vec::new();\n\n    // Pre-reserve the memory, exiting if we can't\n    output.try_reserve(data.len())?;\n\n    // Now we know this can't OOM in the middle of our complex work\n    output.extend(data.iter().map(|&val| {\n        val * 2 + 5 // very complicated\n    }));\n\n    Ok(output)\n}\n# process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n```","links":{},"attrs":["#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2498:2075":{"id":"1:2498:2075","crate_id":1,"name":"into","span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[725,4],"end":[725,22]},"visibility":"default","docs":"Calls `U::from(self)`.\n\nThat is, this conversion is whatever the implementation of\n<code>[From]&lt;T&gt; for U</code> chooses to do.","links":{"From":"1:2472:131"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"U"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3743":{"id":"0:3743","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[103,0],"end":[103,69]},"visibility":{"restricted":{"parent":"0:3709:3448","path":"::collections::vec_deque::drain"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:3723:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2658:222-0:3900:3356":{"id":"a:1:2658:222-0:3900:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2216-0:5424:3449":{"id":"b:1:2216-0:5424:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6987":{"id":"0:6987","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[364,25],"end":[364,28]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","clamp","min"],"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6988:416"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:341:571":{"id":"0:341:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/boxed.rs","begin":[1236,4],"end":[1238,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:2970:4926":{"id":"b:1:3303-0:2970:4926","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:2970:4926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4781:59":{"id":"0:4781:59","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/rc.rs","begin":[2585,4],"end":[2587,5]},"visibility":"default","docs":"Constructs a new `Weak<T>`, without allocating any memory.\nCalling [`upgrade`] on the return value always gives [`None`].\n\n[`upgrade`]: Weak::upgrade\n\n# Examples\n\n```\nuse std::rc::Weak;\n\nlet empty: Weak<i64> = Default::default();\nassert!(empty.upgrade().is_none());\n```","links":{"Weak::upgrade":"0:4764:7614","`None`":"1:47999:173"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5176:8465":{"id":"0:5176:8465","crate_id":0,"name":"as_mut_str","span":{"filename":"library/alloc/src/string.rs","begin":[905,4],"end":[907,5]},"visibility":"public","docs":"Converts a `String` into a mutable string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"foobar\");\nlet s_mut_str = s.as_mut_str();\n\ns_mut_str.make_ascii_uppercase();\n\nassert_eq!(\"FOOBAR\", s_mut_str);\n```","links":{},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"string_as_str\", since = \"1.7.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:564":{"id":"0:564","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2052,0],"end":[2056,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(since = \"1.5.0\", feature = \"smart_ptr_as_ref\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2463:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:567:307"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4576":{"id":"0:4576","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[830,0],"end":[1173,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4578:2546","0:4579:306","0:4580:2513","0:4581:7249","0:4582:7257","0:4583:7194","0:4584:7271","0:4585:7279","0:4587:3929","0:4588:7294","0:4589:7324"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:226":{"id":"0:226","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[71,0],"end":[92,1]},"visibility":{"restricted":{"parent":"0:194:2340","path":"::boxed::thin"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Dyn","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Dyn"}}],"bindings":[]}}}},"items":["0:228:2864"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6871":{"id":"0:6871","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[59,9],"end":[59,14]},"visibility":{"restricted":{"parent":"0:744:1794","path":"::collections"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6872:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2219-0:5513:69":{"id":"b:1:2219-0:5513:69","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:0:671-0:1376:3816":{"id":"b:0:671-0:1376:3816","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:1376:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:225:908":{"id":"0:225:908","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[63,4],"end":[67,5]},"visibility":"public","docs":"Moves a type to the heap with its `Metadata` stored in the heap allocation instead of on\nthe stack.\n\n# Examples\n\n```\n#![feature(thin_box)]\nuse std::boxed::ThinBox;\n\nlet five = ThinBox::new(5);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7015:595":{"id":"0:7015:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[2252,0],"end":[2252,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3473:650":{"id":"0:3473:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1158,4],"end":[1160,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7051:895":{"id":"0:7051:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/string.rs","begin":[2259,0],"end":[2259,33]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:1435:3845":{"id":"a:1:7710:3767-0:1435:3845","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangeMut","id":"0:1435:3845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1550:921":{"id":"0:1550:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1554,4],"end":[1561,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3063:768":{"id":"0:3063:768","crate_id":0,"name":"iter","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1155,4],"end":[1157,5]},"visibility":"public","docs":"Gets an iterator that visits the elements in the `BTreeSet` in ascending\norder.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet set = BTreeSet::from([1, 2, 3]);\nlet mut set_iter = set.iter();\nassert_eq!(set_iter.next(), Some(&1));\nassert_eq!(set_iter.next(), Some(&2));\nassert_eq!(set_iter.next(), Some(&3));\nassert_eq!(set_iter.next(), None);\n```\n\nValues returned by the iterator are returned in ascending order:\n\n```\nuse std::collections::BTreeSet;\n\nlet set = BTreeSet::from([3, 1, 2]);\nlet mut set_iter = set.iter();\nassert_eq!(set_iter.next(), Some(&1));\nassert_eq!(set_iter.next(), Some(&2));\nassert_eq!(set_iter.next(), Some(&3));\nassert_eq!(set_iter.next(), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5112:7841":{"id":"0:5112:7841","crate_id":0,"name":"to_ascii_uppercase","span":{"filename":"library/alloc/src/str.rs","begin":[561,4],"end":[566,5]},"visibility":"public","docs":"Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase","links":{"str::make_ascii_uppercase":"1:11433:7842"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5297:8572":{"id":"0:5297:8572","crate_id":0,"name":"into_searcher","span":{"filename":"library/alloc/src/string.rs","begin":[2180,4],"end":[2182,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6691":{"id":"0:6691","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3128,0],"end":[3144,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"vec_from_mut\", since = \"1.19.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:6693:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3771:2751":{"id":"0:3771:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[208,4],"end":[211,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4172":{"id":"0:4172","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2681,0],"end":[2681,50]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:468:650":{"id":"0:468:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/boxed.rs","begin":[1875,4],"end":[1877,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1578:757":{"id":"0:1578:757","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1615,4],"end":[1632,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1359:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3076":{"id":"0:3076","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1230,0],"end":[1251,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3080:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3303-0:1301:94":{"id":"b:1:3303-0:1301:94","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6502:1585":{"id":"0:6502:1585","crate_id":0,"name":"leak","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2198,4],"end":[2204,5]},"visibility":"public","docs":"Consumes and leaks the `Vec`, returning a mutable reference to the contents,\n`&'a mut [T]`. Note that the type `T` must outlive the chosen lifetime\n`'a`. If the type has only static references, or none at all, then this\nmay be chosen to be `'static`.\n\nAs of Rust 1.57, this method does not reallocate or shrink the `Vec`,\nso the leaked allocation may include unused capacity that is not part\nof the returned slice.\n\nThis function is mainly useful for data that lives for the remainder of\nthe program's life. Dropping the returned reference will cause a memory\nleak.\n\n# Examples\n\nSimple usage:\n\n```\nlet x = vec![1, 2, 3];\nlet static_ref: &'static mut [usize] = x.leak();\nstatic_ref[0] += 1;\nassert_eq!(static_ref, &[2, 2, 3]);\n```","links":{},"attrs":["#[stable(feature = \"vec_leak\", since = \"1.47.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"outlives":"'a"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:1359:3475":{"id":"b:1:2510-0:1359:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1359:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3044:3901":{"id":"0:3044:3901","crate_id":0,"name":"pop_first","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[850,4],"end":[855,5]},"visibility":"public","docs":"Removes the first element from the set and returns it, if any.\nThe first element is always the minimum element in the set.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::new();\n\nset.insert(1);\nwhile let Some(n) = set.pop_first() {\n    assert_eq!(n, 1);\n}\nassert!(set.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"map_first_last\", since = \"1.66.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:7074:9310":{"id":"b:1:2495-0:7074:9310","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Splice","id":"0:7074:9310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1463:3882":{"id":"0:1463:3882","crate_id":0,"name":"first_key_value","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[715,4],"end":[721,5]},"visibility":"public","docs":"Returns the first key-value pair in the map.\nThe key in this pair is the minimum key in the map.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nassert_eq!(map.first_key_value(), None);\nmap.insert(1, \"b\");\nmap.insert(2, \"a\");\nassert_eq!(map.first_key_value(), Some((&1, &\"b\")));\n```","links":{},"attrs":["#[stable(feature = \"map_first_last\", since = \"1.66.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:539:378":{"id":"0:539:378","crate_id":0,"name":"call","span":{"filename":"library/alloc/src/boxed.rs","begin":[2001,4],"end":[2003,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["args",{"kind":"generic","inner":"Args"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:2920:2768","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":{"Other":"\"rust-call\""}},"has_body":true}},"0:1829:4091":{"id":"0:1829:4091","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2087,4],"end":[2089,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:7074:9310":{"id":"b:1:3303-0:7074:9310","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Splice","id":"0:7074:9310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4433":{"id":"0:4433","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[561,20],"end":[561,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::write","name":"write","id":"1:8589:2221","glob":false}},"0:331:2546":{"id":"0:331:2546","crate_id":0,"name":"into_raw","span":{"filename":"library/alloc/src/boxed.rs","begin":[1058,4],"end":[1060,5]},"visibility":"public","docs":"Consumes the `Box`, returning a wrapped raw pointer.\n\nThe pointer will be properly aligned and non-null.\n\nAfter calling this function, the caller is responsible for the\nmemory previously managed by the `Box`. In particular, the\ncaller should properly destroy `T` and release the memory, taking\ninto account the [memory layout] used by `Box`. The easiest way to\ndo this is to convert the raw pointer back into a `Box` with the\n[`Box::from_raw`] function, allowing the `Box` destructor to perform\nthe cleanup.\n\nNote: this is an associated function, which means that you have\nto call it as `Box::into_raw(b)` instead of `b.into_raw()`. This\nis so that there is no conflict with a method on the inner type.\n\n# Examples\nConverting the raw pointer back into a `Box` with [`Box::from_raw`]\nfor automatic cleanup:\n```\nlet x = Box::new(String::from(\"Hello\"));\nlet ptr = Box::into_raw(x);\nlet x = unsafe { Box::from_raw(ptr) };\n```\nManual cleanup by explicitly running the destructor and deallocating\nthe memory:\n```\nuse std::alloc::{dealloc, Layout};\nuse std::ptr;\n\nlet x = Box::new(String::from(\"Hello\"));\nlet p = Box::into_raw(x);\nunsafe {\n    ptr::drop_in_place(p);\n    dealloc(p as *mut u8, Layout::new::<String>());\n}\n```\n\n[memory layout]: self#memory-layout","links":{"`Box::from_raw`":"0:326:2513","self#memory-layout":"0:141:1791"},"attrs":["#[stable(feature = \"box_raw\", since = \"1.4.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["b",{"kind":"generic","inner":"Self"}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:50506:8710":{"id":"1:50506:8710","crate_id":1,"name":"is_contained_in","span":{"filename":"/rust-lang-rust/library/core/src/str/pattern.rs","begin":[910,4],"end":[910,93]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4908:4127":{"id":"0:4908:4127","crate_id":0,"name":"sort_by","span":{"filename":"library/alloc/src/slice.rs","begin":[258,4],"end":[263,5]},"visibility":"public","docs":"Sorts the slice with a comparator function.\n\nThis sort is stable (i.e., does not reorder equal elements) and *O*(*n* \\* log(*n*)) worst-case.\n\nThe comparator function must define a total ordering for the elements in the slice. If\nthe ordering is not total, the order of the elements is unspecified. An order is a\ntotal order if it is (for all `a`, `b` and `c`):\n\n* total and antisymmetric: exactly one of `a < b`, `a == b` or `a > b` is true, and\n* transitive, `a < b` and `b < c` implies `a < c`. The same must hold for both `==` and `>`.\n\nFor example, while [`f64`] doesn't implement [`Ord`] because `NaN != NaN`, we can use\n`partial_cmp` as our sort function when we know the slice doesn't contain a `NaN`.\n\n```\nlet mut floats = [5f64, 4.0, 1.0, 3.0, 2.0];\nfloats.sort_by(|a, b| a.partial_cmp(b).unwrap());\nassert_eq!(floats, [1.0, 2.0, 3.0, 4.0, 5.0]);\n```\n\nWhen applicable, unstable sorting is preferred because it is generally faster than stable\nsorting and it doesn't allocate auxiliary memory.\nSee [`sort_unstable_by`](slice::sort_unstable_by).\n\n# Current implementation\n\nThe current algorithm is an adaptive, iterative merge sort inspired by\n[timsort](https://en.wikipedia.org/wiki/Timsort).\nIt is designed to be very fast in cases where the slice is nearly sorted, or consists of\ntwo or more sorted sequences concatenated one after another.\n\nAlso, it allocates temporary storage half the size of `self`, but for short slices a\nnon-allocating insertion sort is used instead.\n\n# Examples\n\n```\nlet mut v = [5, 4, 1, 3, 2];\nv.sort_by(|a, b| a.cmp(b));\nassert!(v == [1, 2, 3, 4, 5]);\n\n// reverse sorting\nv.sort_by(|a, b| b.cmp(a));\nassert!(v == [5, 4, 3, 2, 1]);\n```","links":{"`Ord`":"1:2299:176","slice::sort_unstable_by":"1:10441:13692","`f64`":"1:58441:10466"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["compare",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5348:743":{"id":"0:5348:743","crate_id":0,"name":"index_mut","span":{"filename":"library/alloc/src/string.rs","begin":[2442,4],"end":[2444,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"resolved_path","inner":{"name":"ops::RangeInclusive","id":"1:46387:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3125":{"id":"0:3125","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1342,0],"end":[1345,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3096:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5420:668":{"id":"0:5420:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[2855,4],"end":[2857,5]},"visibility":"default","docs":"Converts the given [`String`] to a vector [`Vec`] that holds values of type [`u8`].\n\n# Examples\n\nBasic usage:\n\n```\nlet s1 = String::from(\"hello world\");\nlet v1 = Vec::from(s1);\n\nfor b in v1 {\n    println!(\"{b}\");\n}\n```","links":{"`String`":"0:6980:218","`Vec`":"0:6407:237","`u8`":"1:58447:10472"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["string",{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:800":{"id":"0:800","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[353,0],"end":[357,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"binaryheap_debug\", since = \"1.4.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:802:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:301:2419":{"id":"0:301:2419","crate_id":0,"name":"into_boxed_slice","span":{"filename":"library/alloc/src/boxed.rs","begin":[592,4],"end":[595,5]},"visibility":"public","docs":"Converts a `Box<T>` into a `Box<[T]>`\n\nThis conversion does not allocate on the heap and happens in place.","links":{},"attrs":["#[unstable(feature = \"box_into_boxed_slice\", issue = \"71582\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["boxed",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:393:2638":{"id":"0:393:2638","crate_id":0,"name":"write_u128","span":{"filename":"library/alloc/src/boxed.rs","begin":[1406,4],"end":[1408,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"u128"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4444":{"id":"0:4444","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[567,31],"end":[567,39]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::DebugMap","name":"DebugMap","id":"1:8395:6924","glob":false}},"0:3518:5445":{"id":"0:3518:5445","crate_id":0,"name":"remove_current_as_list","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1480,4],"end":[1495,5]},"visibility":"public","docs":"Removes the current element from the `LinkedList` without deallocating the list node.\n\nThe node that was removed is returned as a new `LinkedList` containing only this node.\nThe cursor is moved to point to the next element in the current `LinkedList`.\n\nIf the cursor is currently pointing to the \"ghost\" non-element then no element\nis removed and `None` is returned.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:6914:6204":{"id":"a:1:7709:3766-0:6914:6204","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2658:222-0:276:1792":{"id":"a:1:2658:222-0:276:1792","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5751":{"id":"0:5751","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2577,0],"end":[2592,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5753:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:7020-0:1338:3356":{"id":"b:1:7020-0:1338:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"a:1:2658:222-0:6734:3475":{"id":"a:1:2658:222-0:6734:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:445:126":{"id":"0:445:126","crate_id":0,"name":"Error","span":{"filename":"library/alloc/src/boxed.rs","begin":[1665,4],"end":[1665,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"1:2509:1419":{"id":"1:2509:1419","crate_id":1,"name":"try_into","span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[766,4],"end":[766,44]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:230":{"id":"0:230","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[95,0],"end":[99,1]},"visibility":{"restricted":{"parent":"0:194:2340","path":"::boxed::thin"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:232:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1767:2751":{"id":"0:1767:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1990,4],"end":[1992,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6588":{"id":"0:6588","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2722,0],"end":[2729,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_on_unimplemented(message =\n\"vector indices are of type `usize` or ranges of `usize`\", label =\n\"vector indices are of type `usize` or ranges of `usize`\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9110:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:2969:3662","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6592:180","0:6593:742"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11336:8030":{"id":"1:11336:8030","crate_id":1,"name":"chars","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[782,4],"end":[782,36]},"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```","links":{"prim@char":"1:58430:10458"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Chars","id":"1:49935:7931","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7074:9310":{"id":"0:7074:9310","crate_id":0,"name":"Splice","span":{"filename":"library/alloc/src/vec/splice.rs","begin":[21,0],"end":[28,1]},"visibility":"public","docs":"A splicing iterator for `Vec`.\n\nThis struct is created by [`Vec::splice()`].\nSee its documentation for more.\n\n# Example\n\n```\nlet mut v = vec![0, 1, 2];\nlet new = [7, 8];\nlet iter: std::vec::Splice<_> = v.splice(1.., new);\n```","links":{"`Vec::splice()`":"0:6637:8668"},"attrs":["#[stable(feature = \"vec_splice\", since = \"1.21.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:7074:9310","a:1:2644:214-0:7074:9310","a:1:2708:2329-0:7074:9310","a:1:7709:3766-0:7074:9310","a:1:7710:3767-0:7074:9310","b:1:7020-0:7074:9310","b:1:2510-0:7074:9310","b:1:2505-0:7074:9310","b:1:2216-0:7074:9310","b:1:3303-0:7074:9310","b:1:2219-0:7074:9310","b:1:2499-0:7074:9310","b:1:2495-0:7074:9310","0:7080","0:5922","0:5928","0:5932","0:5935"]}},"a:1:2658:222-0:2978:4931":{"id":"a:1:2658:222-0:2978:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:2978:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:992:1746":{"id":"0:992:1746","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1665,4],"end":[1667,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["item",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1543:3475":{"id":"0:1543:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1543,4],"end":[1543,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:1348:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}}}},"0:5095:3530":{"id":"0:5095:3530","crate_id":0,"name":"replace","span":{"filename":"library/alloc/src/str.rs","begin":[271,4],"end":[281,5]},"visibility":"public","docs":"Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\nassert_eq!(\"than an old\", s.replace(\"is\", \"an\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```","links":{"`String`":"0:6980:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["from",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3242":{"id":"0:3242","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1666,0],"end":[1666,76]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:2944:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2495-0:6914:6204":{"id":"b:1:2495-0:6914:6204","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1344":{"id":"0:1344","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[359,0],"end":[363,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1347:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6688":{"id":"0:6688","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3108,0],"end":[3124,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:6690:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4425":{"id":"0:4425","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1137,0],"end":[1146,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_into\", since = \"1.7.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","provide","cause","source","description"],"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4426:2822","0:4427:2625"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4713":{"id":"0:4713","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2040,0],"end":[2056,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"shared_from_str\", since = \"1.62.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}},"items":["0:4714:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:239:536":{"id":"0:239:536","crate_id":0,"name":"deref","span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[112,4],"end":[117,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3527:4073":{"id":"0:3527:4073","crate_id":0,"name":"front","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1655,4],"end":[1657,5]},"visibility":"public","docs":"Provides a reference to the front element of the cursor's parent list,\nor None if the list is empty.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4086:2020":{"id":"0:4086:2020","crate_id":0,"name":"capacity","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[725,4],"end":[727,5]},"visibility":"public","docs":"Returns the number of elements the deque can hold without\nreallocating.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet buf: VecDeque<i32> = VecDeque::with_capacity(10);\nassert!(buf.capacity() >= 10);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3087:3475":{"id":"0:3087:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1256,4],"end":[1256,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6779:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"0:4555:2380":{"id":"0:4555:2380","crate_id":0,"name":"try_new","span":{"filename":"library/alloc/src/rc.rs","begin":[559,4],"end":[570,5]},"visibility":"public","docs":"Constructs a new `Rc<T>`, returning an error if the allocation fails\n\n# Examples\n\n```\n#![feature(allocator_api)]\nuse std::rc::Rc;\n\nlet five = Rc::try_new(5);\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50972:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5086:1793":{"id":"0:5086:1793","crate_id":0,"name":"borrow","span":{"filename":"library/alloc/src/str.rs","begin":[190,4],"end":[192,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5713":{"id":"0:5713","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2340,0],"end":[2426,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2305:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["le","ge","lt","gt"],"trait":{"name":"PartialOrd","id":"1:2305:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5715:995","0:5716:815","0:5717:781","0:5718:699","0:5719:682"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2499-0:3328:157":{"id":"b:1:2499-0:3328:157","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2499-0:6407:237":{"id":"b:1:2499-0:6407:237","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4441":{"id":"0:4441","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[565,27],"end":[565,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::Display","name":"Display","id":"1:8573:118","glob":false}},"0:6629:3508":{"id":"0:6629:3508","crate_id":0,"name":"extend_reserve","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2831,4],"end":[2833,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4709":{"id":"0:4709","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2013,0],"end":[2037,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"shared_from_cow\", since = \"1.45.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"B"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"name":"","id":"0:667:225","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["0:4712:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:559:1793":{"id":"0:559:1793","crate_id":0,"name":"borrow","span":{"filename":"library/alloc/src/boxed.rs","begin":[2039,4],"end":[2041,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5739:702":{"id":"0:5739:702","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/sync.rs","begin":[2491,4],"end":[2493,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:8805:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3004:4940":{"id":"0:3004:4940","crate_id":0,"name":"Union","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[315,0],"end":[315,57]},"visibility":"public","docs":"A lazy iterator producing elements in the union of `BTreeSet`s.\n\nThis `struct` is created by the [`union`] method on [`BTreeSet`].\nSee its documentation for more.\n\n[`union`]: BTreeSet::union","links":{"BTreeSet::union":"0:3029:62","`BTreeSet`":"0:2908:95"},"attrs":["#[must_use =\n\"this returns the union as an iterator, \\\n              without modifying either input set\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:3004:4940","a:1:2644:214-0:3004:4940","a:1:2708:2329-0:3004:4940","a:1:7709:3766-0:3004:4940","a:1:7710:3767-0:3004:4940","b:0:671-0:3004:4940","b:1:7020-0:3004:4940","b:1:2510-0:3004:4940","b:1:2505-0:3004:4940","b:1:2216-0:3004:4940","b:1:3303-0:3004:4940","b:1:2219-0:3004:4940","b:1:2499-0:3004:4940","b:1:2495-0:3004:4940","0:3009","0:3272","0:3275","0:3282"]}},"a:1:7709:3766-0:676:109":{"id":"a:1:7709:3766-0:676:109","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4418:307":{"id":"0:4418:307","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1051,4],"end":[1053,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4025:409":{"id":"0:4025:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[110,4],"end":[114,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11333:40312":{"id":"1:11333:40312","crate_id":1,"name":"slice_mut_unchecked","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[632,4],"end":[632,86]},"visibility":"public","docs":"Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.","links":{"crate::ops::IndexMut":"1:2973:5511","`str`":"1:58436:10463","str::slice_unchecked":"1:11332:40311"},"attrs":["#[deprecated(since = \"1.29.0\", note =\n\"use `get_unchecked_mut(begin..end)` instead\")]"],"deprecation":{"since":"1.29.0","note":"use `get_unchecked_mut(begin..end)` instead"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["begin",{"kind":"primitive","inner":"usize"}],["end",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:4521:198":{"id":"b:1:2219-0:4521:198","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3303-0:5424:3449":{"id":"b:1:3303-0:5424:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4967:2781":{"id":"0:4967:2781","crate_id":0,"name":"borrow_mut","span":{"filename":"library/alloc/src/slice.rs","begin":[775,4],"end":[777,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5109:8047":{"id":"0:5109:8047","crate_id":0,"name":"to_uppercase","span":{"filename":"library/alloc/src/str.rs","begin":[459,4],"end":[484,5]},"visibility":"public","docs":"Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```","links":{"`String`":"0:6980:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[must_use =\n\"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:970":{"id":"0:970","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1602,0],"end":[1610,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:972:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5088:2781":{"id":"0:5088:2781","crate_id":0,"name":"borrow_mut","span":{"filename":"library/alloc/src/str.rs","begin":[198,4],"end":[200,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6889":{"id":"0:6889","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[80,16],"end":[80,25]},"visibility":{"restricted":{"parent":"0:744:1794","path":"::collections"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"try_reserve_kind\", reason =\n\"Uncertain how much info should be exposed\", issue = \"48043\")]","#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2654:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2219-0:6816:3475":{"id":"b:1:2219-0:6816:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3739":{"id":"0:3739","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[91,0],"end":[100,1]},"visibility":{"restricted":{"parent":"0:3709:3448","path":"::collections::vec_deque::drain"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:3723:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3742:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3567":{"id":"0:3567","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1783,0],"end":[1795,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3569:2750","0:3570:921","0:3571:2751"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3882":{"id":"0:3882","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[73,0],"end":[73,57]},"visibility":{"restricted":{"parent":"0:3850:757","path":"::collections::vec_deque::into_iter"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2644:214-0:7057:4069":{"id":"a:1:2644:214-0:7057:4069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:7057:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6488:3275":{"id":"0:6488:3275","crate_id":0,"name":"push","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1831,4],"end":[1842,5]},"visibility":"public","docs":"Appends an element to the back of a collection.\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` bytes.\n\n# Examples\n\n```\nlet mut vec = vec![1, 2];\nvec.push(3);\nassert_eq!(vec, [1, 2, 3]);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3516:5434":{"id":"0:3516:5434","crate_id":0,"name":"insert_before","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1442,4],"end":[1452,5]},"visibility":"public","docs":"Inserts a new element into the `LinkedList` before the current one.\n\nIf the cursor is pointing at the \"ghost\" non-element then the new element is\ninserted at the end of the `LinkedList`.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["item",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1376:3816":{"id":"0:1376:3816","crate_id":0,"name":"Keys","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[432,0],"end":[434,1]},"visibility":"public","docs":"An iterator over the keys of a `BTreeMap`.\n\nThis `struct` is created by the [`keys`] method on [`BTreeMap`]. See its\ndocumentation for more.\n\n[`keys`]: BTreeMap::keys","links":{"BTreeMap::keys":"0:1918:4154","`BTreeMap`":"0:1301:94"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:1376:3816","a:1:2644:214-0:1376:3816","a:1:2708:2329-0:1376:3816","a:1:7709:3766-0:1376:3816","a:1:7710:3767-0:1376:3816","b:0:671-0:1376:3816","b:1:7020-0:1376:3816","b:1:2510-0:1376:3816","b:1:2505-0:1376:3816","b:1:2216-0:1376:3816","b:1:3303-0:1376:3816","b:1:2219-0:1376:3816","b:1:2499-0:1376:3816","b:1:2495-0:1376:3816","0:1381","0:1626","0:1637","0:1643","0:1647","0:1650"]}},"0:5174:6299":{"id":"0:5174:6299","crate_id":0,"name":"into_bytes","span":{"filename":"library/alloc/src/string.rs","begin":[866,4],"end":[868,5]},"visibility":"public","docs":"Converts a `String` into a byte vector.\n\nThis consumes the `String`, so we do not need to copy its contents.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = String::from(\"hello\");\nlet bytes = s.into_bytes();\n\nassert_eq!(&[104, 101, 108, 108, 111][..], &bytes[..]);\n```","links":{},"attrs":["#[inline]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6649:3508":{"id":"0:6649:3508","crate_id":0,"name":"extend_reserve","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3021,4],"end":[3023,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:6991:8288":{"id":"b:1:3303-0:6991:8288","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4119:4997":{"id":"0:4119:4997","crate_id":0,"name":"contains","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1452,4],"end":[1458,5]},"visibility":"public","docs":"Returns `true` if the deque contains an element equal to the\ngiven value.\n\nThis operation is *O*(*n*).\n\nNote that if you have a sorted `VecDeque`, [`binary_search`] may be faster.\n\n[`binary_search`]: VecDeque::binary_search\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque: VecDeque<u32> = VecDeque::new();\n\ndeque.push_back(0);\ndeque.push_back(1);\n\nassert_eq!(deque.contains(&1), true);\nassert_eq!(deque.contains(&10), false);\n```","links":{"VecDeque::binary_search":"0:4147:5991"},"attrs":["#[stable(feature = \"vec_deque_contains\", since = \"1.12.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["x",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:1185:3669":{"id":"b:1:3303-0:1185:3669","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:1185:3669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3303-0:3474:5281":{"id":"b:1:3303-0:3474:5281","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CursorMut","id":"0:3474:5281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:7215":{"id":"0:7215","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[23,0],"end":[23,122]},"visibility":{"restricted":{"parent":"0:6257:9314","path":"::vec::partial_eq"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A1","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A2","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"A2"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A1"}}],"bindings":[]}}}},"items":["0:7220:595","0:7221:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7709:3766-0:3004:4940":{"id":"a:1:7709:3766-0:3004:4940","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:3004:4940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2708:2329-0:2937:3356":{"id":"a:1:2708:2329-0:2937:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1827:921":{"id":"0:1827:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2079,4],"end":[2081,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:1394:3826":{"id":"a:1:2644:214-0:1394:3826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:1394:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5768:1418":{"id":"0:5768:1418","crate_id":0,"name":"try_from","span":{"filename":"library/alloc/src/sync.rs","begin":[2668,4],"end":[2674,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["boxed_slice",{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:2479:230","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1920:4165":{"id":"0:1920:4165","crate_id":0,"name":"values_mut","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2372,4],"end":[2374,5]},"visibility":"public","docs":"Gets a mutable iterator over the values of the map, in order by key.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(1, String::from(\"hello\"));\na.insert(2, String::from(\"goodbye\"));\n\nfor value in a.values_mut() {\n    value.push_str(\"!\");\n}\n\nlet values: Vec<String> = a.values().cloned().collect();\nassert_eq!(values, [String::from(\"hello!\"),\n                    String::from(\"goodbye!\")]);\n```","links":{},"attrs":["#[stable(feature = \"map_values_mut\", since = \"1.10.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:1394:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5342:743":{"id":"0:5342:743","crate_id":0,"name":"index_mut","span":{"filename":"library/alloc/src/string.rs","begin":[2421,4],"end":[2423,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"resolved_path","inner":{"name":"ops::RangeTo","id":"1:46365:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6510:6045":{"id":"0:6510:6045","crate_id":0,"name":"resize","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2361,4],"end":[2369,5]},"visibility":"public","docs":"Resizes the `Vec` in-place so that `len` is equal to `new_len`.\n\nIf `new_len` is greater than `len`, the `Vec` is extended by the\ndifference, with each additional slot filled with `value`.\nIf `new_len` is less than `len`, the `Vec` is simply truncated.\n\nThis method requires `T` to implement [`Clone`],\nin order to be able to clone the passed value.\nIf you need more flexibility (or want to rely on [`Default`] instead of\n[`Clone`]), use [`Vec::resize_with`].\nIf you only need to resize to a smaller size, use [`Vec::truncate`].\n\n# Examples\n\n```\nlet mut vec = vec![\"hello\"];\nvec.resize(3, \"world\");\nassert_eq!(vec, [\"hello\", \"world\", \"world\"]);\n\nlet mut vec = vec![1, 2, 3, 4];\nvec.resize(2, 0);\nassert_eq!(vec, [1, 2]);\n```","links":{"`Default`":"1:2546:114","`Vec::resize_with`":"0:6500:5901","`Vec::truncate`":"0:6433:5696","`Clone`":"1:2233:105"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"vec_resize\", since = \"1.5.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["new_len",{"kind":"primitive","inner":"usize"}],["value",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:610":{"id":"0:610","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2188,0],"end":[2217,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"items":["0:613:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2499-0:1376:3816":{"id":"b:1:2499-0:1376:3816","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:1376:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:334:283":{"id":"0:334:283","crate_id":0,"name":"allocator","span":{"filename":"library/alloc/src/boxed.rs","begin":[1142,4],"end":[1144,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.\n\nNote: this is an associated function, which means that you have\nto call it as `Box::allocator(&b)` instead of `b.allocator()`. This\nis so that there is no conflict with a method on the inner type.","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["b",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1480:3902":{"id":"0:1480:3902","crate_id":0,"name":"remove_entry","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1048,4],"end":[1067,5]},"visibility":"public","docs":"Removes a key from the map, returning the stored key and value if the key\nwas previously in the map.\n\nThe key may be any borrowed form of the map's key type, but the ordering\non the borrowed form *must* match the ordering on the key type.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.remove_entry(&1), Some((1, \"a\")));\nassert_eq!(map.remove_entry(&1), None);\n```","links":{},"attrs":["#[stable(feature = \"btreemap_remove_entry\", since = \"1.45.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1518:2753":{"id":"0:1518:2753","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1498,4],"end":[1500,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:639:668":{"id":"0:639:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[2387,4],"end":[2389,5]},"visibility":"default","docs":"Converts a [`Cow`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n\n# Examples\n\n```\nuse std::error::Error;\nuse std::mem;\nuse std::borrow::Cow;\n\nlet a_cow_str_error = Cow::from(\"a str error\");\nlet a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_cow_str_error);\nassert!(\n    mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n```","links":{"`Sync`":"1:2658:222","`Send`":"1:2644:214","`Cow`":"0:676:109","`Error`":"1:2560:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["err",{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'b"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5377:1398":{"id":"0:5377:1398","crate_id":0,"name":"to_string","span":{"filename":"library/alloc/src/string.rs","begin":[2616,4],"end":[2618,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4779":{"id":"0:4779","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2571,0],"end":[2588,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4781:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4642:571":{"id":"0:4642:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/rc.rs","begin":[1588,4],"end":[1604,5]},"visibility":"default","docs":"Drops the `Rc`.\n\nThis will decrement the strong reference count. If the strong reference\ncount reaches zero then the only other references (if any) are\n[`Weak`], so we `drop` the inner value.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nstruct Foo;\n\nimpl Drop for Foo {\n    fn drop(&mut self) {\n        println!(\"dropped!\");\n    }\n}\n\nlet foo  = Rc::new(Foo);\nlet foo2 = Rc::clone(&foo);\n\ndrop(foo);    // Doesn't print anything\ndrop(foo2);   // Prints \"dropped!\"\n```","links":{"`Weak`":"0:4737:7157"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4853":{"id":"0:4853","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[56,31],"end":[56,41]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"slice_group_by\", issue = \"80552\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::GroupByMut","name":"GroupByMut","id":"1:10100:7691","glob":false}},"0:4861":{"id":"0:4861","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[60,62],"end":[60,72]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rchunks\", since = \"1.31.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::RChunksMut","name":"RChunksMut","id":"1:49855:7696","glob":false}},"b:1:2499-0:676:109":{"id":"b:1:2499-0:676:109","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6100:4583":{"id":"0:6100:4583","crate_id":0,"name":"as_mut_slice","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[86,4],"end":[88,5]},"visibility":"public","docs":"Returns the remaining items of this iterator as a mutable slice.\n\n# Examples\n\n```\nlet vec = vec!['a', 'b', 'c'];\nlet mut into_iter = vec.into_iter();\nassert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);\ninto_iter.as_mut_slice()[2] = 'z';\nassert_eq!(into_iter.next().unwrap(), 'a');\nassert_eq!(into_iter.next().unwrap(), 'b');\nassert_eq!(into_iter.next().unwrap(), 'z');\n```","links":{},"attrs":["#[stable(feature = \"vec_into_iter_as_slice\", since = \"1.15.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4843":{"id":"0:4843","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[50,30],"end":[50,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::Windows","name":"Windows","id":"1:49745:7681","glob":false}},"b:1:2219-0:3794:3805":{"id":"b:1:2219-0:3794:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3362":{"id":"0:3362","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[141,0],"end":[145,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3364:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5449:2753":{"id":"0:5449:2753","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/string.rs","begin":[2967,4],"end":[2969,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:4737:7157":{"id":"b:1:2216-0:4737:7157","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2658:222-0:3096:4069":{"id":"a:1:2658:222-0:3096:4069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3096:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5785":{"id":"0:5785","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2763,0],"end":[2767,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5787:1793"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4842":{"id":"0:4842","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[50,22],"end":[50,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::Chunks","name":"Chunks","id":"1:49754:7680","glob":false}},"0:6844:595":{"id":"0:6844:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2685,0],"end":[2685,50]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"U"}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:6944:6202":{"id":"b:1:2216-0:6944:6202","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1917:4093":{"id":"0:1917:4093","crate_id":0,"name":"iter_mut","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2298,4],"end":[2306,5]},"visibility":"public","docs":"Gets a mutable iterator over the entries of the map, sorted by key.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::from([\n   (\"a\", 1),\n   (\"b\", 2),\n   (\"c\", 3),\n]);\n\n// add 10 to the value if the key isn't \"a\"\nfor (key, value) in map.iter_mut() {\n    if key != &\"a\" {\n        *value += 10;\n    }\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:1348:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11426:40328":{"id":"1:11426:40328","crate_id":1,"name":"trim_right_matches","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[2300,4],"end":[2302,54]},"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:11013:1760","prim@char":"1:58430:10458"},"attrs":["#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end_matches`\",\nsuggestion = \"trim_end_matches\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end_matches`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11033:7919","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:0:671-0:6822:3475":{"id":"b:0:671-0:6822:3475","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7710:3767-0:7002:8296":{"id":"a:1:7710:3767-0:7002:8296","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf16Error","id":"0:7002:8296","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3191":{"id":"0:3191","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1536,0],"end":[1546,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6779:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3194:2750","0:3195:921","0:3197:2751"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:736:180":{"id":"0:736:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/borrow.rs","begin":[453,4],"end":[453,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}},"0:5725":{"id":"0:5725","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2451,0],"end":[2455,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5727:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5718:699":{"id":"0:5718:699","crate_id":0,"name":"gt","span":{"filename":"library/alloc/src/sync.rs","begin":[2406,4],"end":[2408,5]},"visibility":"default","docs":"Greater-than comparison for two `Arc`s.\n\nThe two are compared by calling `>` on their inner values.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nassert!(five > Arc::new(4));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:2944:4916":{"id":"b:1:2216-0:2944:4916","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:2944:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5180:2020":{"id":"0:5180:2020","crate_id":0,"name":"capacity","span":{"filename":"library/alloc/src/string.rs","begin":[979,4],"end":[981,5]},"visibility":"public","docs":"Returns this `String`'s capacity, in bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = String::with_capacity(10);\n\nassert!(s.capacity() >= 10);\n```","links":{},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:3900:3356":{"id":"a:1:7709:3766-0:3900:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11350:40314":{"id":"1:11350:40314","crate_id":1,"name":"ends_with","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1122,4],"end":[1124,54]},"visibility":"public","docs":"Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```","links":{"self::pattern":"1:11013:1760","prim@char":"1:58430:10458"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11033:7919","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4932:7841":{"id":"0:4932:7841","crate_id":0,"name":"to_ascii_uppercase","span":{"filename":"library/alloc/src/slice.rs","begin":[616,4],"end":[620,5]},"visibility":"public","docs":"Returns a vector containing a copy of this slice where each byte\nis mapped to its ASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\n[`make_ascii_uppercase`]: slice::make_ascii_uppercase","links":{"slice::make_ascii_uppercase":"1:8967:7842"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[must_use =\n\"this returns the uppercase bytes as a new Vec, \\\n                  without modifying the original\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:720":{"id":"0:720","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[410,0],"end":[418,1]},"visibility":{"restricted":{"parent":"0:648:1793","path":"::borrow"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"default\", since = \"1.11.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"constraint":[{"trait_bound":{"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["0:722:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6562:224":{"id":"0:6562:224","crate_id":0,"name":"Target","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2628,4],"end":[2628,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},"0:613:668":{"id":"0:613:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[2214,4],"end":[2216,5]},"visibility":"default","docs":"Converts a type of [`Error`] into a box of dyn [`Error`].\n\n# Examples\n\n```\nuse std::error::Error;\nuse std::fmt;\nuse std::mem;\n\n#[derive(Debug)]\nstruct AnError;\n\nimpl fmt::Display for AnError {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"An error\")\n    }\n}\n\nimpl Error for AnError {}\n\nlet an_error = AnError;\nassert!(0 == mem::size_of_val(&an_error));\nlet a_boxed_error = Box::<dyn Error>::from(an_error);\nassert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n```","links":{"`Error`":"1:2560:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["err",{"kind":"generic","inner":"E"}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:215:2341":{"id":"a:1:2708:2329-0:215:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3220:4091":{"id":"0:3220:4091","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1582,4],"end":[1584,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3402:5319":{"id":"0:3402:5319","crate_id":0,"name":"front_mut","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[720,4],"end":[722,5]},"visibility":"public","docs":"Provides a mutable reference to the front element, or `None` if the list\nis empty.\n\nThis operation should compute in *O*(1) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\nassert_eq!(dl.front(), None);\n\ndl.push_front(1);\nassert_eq!(dl.front(), Some(&1));\n\nmatch dl.front_mut() {\n    None => {},\n    Some(x) => *x = 5,\n}\nassert_eq!(dl.front(), Some(&5));\n```","links":{},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4377":{"id":"0:4377","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[847,0],"end":[853,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"cow_from_cstr\", since = \"1.28.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4379:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4850":{"id":"0:4850","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[54,40],"end":[54,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::SplitMut","name":"SplitMut","id":"1:9388:7688","glob":false}},"0:730":{"id":"0:730","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[440,0],"end":[448,1]},"visibility":{"restricted":{"parent":"0:648:1793","path":"::borrow"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"cow_add\", since = \"1.14.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"1:2735:2887","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:732:180","0:733:267"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6816:3475":{"id":"0:6816:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[136,0],"end":[138,1]},"visibility":"public","docs":"An owning iterator over the elements of a `LinkedList`.\n\nThis `struct` is created by the [`into_iter`] method on [`LinkedList`]\n(provided by the [`IntoIterator`] trait). See its documentation for more.\n\n[`into_iter`]: LinkedList::into_iter\n[`IntoIterator`]: core::iter::IntoIterator","links":{"LinkedList::into_iter":"0:3587:757","core::iter::IntoIterator":"1:7016:147","`LinkedList`":"0:3328:157"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:6816:3475","a:1:2644:214-0:6816:3475","a:1:2708:2329-0:6816:3475","a:1:7709:3766-0:6816:3475","a:1:7710:3767-0:6816:3475","b:0:671-0:6816:3475","b:1:7020-0:6816:3475","b:1:2510-0:6816:3475","b:1:2505-0:6816:3475","b:1:2216-0:6816:3475","b:1:3303-0:6816:3475","b:1:2219-0:6816:3475","b:1:2499-0:6816:3475","b:1:2495-0:6816:3475","0:6819","0:3362","0:3567","0:3572","0:3575","0:3577"]}},"0:4149:5992":{"id":"0:4149:5992","crate_id":0,"name":"binary_search_by","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2473,4],"end":[2487,5]},"visibility":"public","docs":"Binary searches this `VecDeque` with a comparator function.\nThis behaves similarly to [`contains`] if this `VecDeque` is sorted.\n\nThe comparator function should implement an order consistent\nwith the sort order of the deque, returning an order code that\nindicates whether its argument is `Less`, `Equal` or `Greater`\nthan the desired target.\n\nIf the value is found then [`Result::Ok`] is returned, containing the\nindex of the matching element. If there are multiple matches, then any\none of the matches could be returned. If the value is not found then\n[`Result::Err`] is returned, containing the index where a matching\nelement could be inserted while maintaining sorted order.\n\nSee also [`binary_search`], [`binary_search_by_key`], and [`partition_point`].\n\n[`contains`]: VecDeque::contains\n[`binary_search`]: VecDeque::binary_search\n[`binary_search_by_key`]: VecDeque::binary_search_by_key\n[`partition_point`]: VecDeque::partition_point\n\n# Examples\n\nLooks up a series of four elements. The first is found, with a\nuniquely determined position; the second and third are not\nfound; the fourth could match any position in `[1, 4]`.\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<_> = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n\nassert_eq!(deque.binary_search_by(|x| x.cmp(&13)),  Ok(9));\nassert_eq!(deque.binary_search_by(|x| x.cmp(&4)),   Err(7));\nassert_eq!(deque.binary_search_by(|x| x.cmp(&100)), Err(13));\nlet r = deque.binary_search_by(|x| x.cmp(&1));\nassert!(matches!(r, Ok(1..=4)));\n```","links":{"`Result::Ok`":"1:48144:174","VecDeque::binary_search":"0:4147:5991","VecDeque::binary_search_by_key":"0:4155:6020","VecDeque::partition_point":"0:4160:6037","`Result::Err`":"1:48147:125","VecDeque::contains":"0:4119:4997"},"attrs":["#[stable(feature = \"vecdeque_binary_search\", since = \"1.54.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3387:908":{"id":"0:3387:908","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[423,4],"end":[425,5]},"visibility":"public","docs":"Creates an empty `LinkedList`.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet list: LinkedList<u32> = LinkedList::new();\n```","links":{},"attrs":["#[inline]","#[rustc_const_stable(feature = \"const_linked_list_new\", since = \"1.39.0\")]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1510:757":{"id":"0:1510:757","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1476,4],"end":[1478,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6620:2750":{"id":"0:6620:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2809,4],"end":[2809,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}}}},"b:1:7020-0:6816:3475":{"id":"b:1:7020-0:6816:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:4564":{"id":"0:4564","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[686,0],"end":[751,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"items":["0:4566:2436","0:4567:2441"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4357":{"id":"0:4357","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[746,0],"end":[751,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"cstr_borrow\", since = \"1.3.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4358:1793"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:335:1585":{"id":"0:335:1585","crate_id":0,"name":"leak","span":{"filename":"library/alloc/src/boxed.rs","begin":[1184,4],"end":[1189,5]},"visibility":"public","docs":"Consumes and leaks the `Box`, returning a mutable reference,\n`&'a mut T`. Note that the type `T` must outlive the chosen lifetime\n`'a`. If the type has only static references, or none at all, then this\nmay be chosen to be `'static`.\n\nThis function is mainly useful for data that lives for the remainder of\nthe program's life. Dropping the returned reference will cause a memory\nleak. If this is not acceptable, the reference should first be wrapped\nwith the [`Box::from_raw`] function producing a `Box`. This `Box` can\nthen be dropped which will properly destroy `T` and release the\nallocated memory.\n\nNote: this is an associated function, which means that you have\nto call it as `Box::leak(b)` instead of `b.leak()`. This\nis so that there is no conflict with a method on the inner type.\n\n# Examples\n\nSimple usage:\n\n```\nlet x = Box::new(41);\nlet static_ref: &'static mut usize = Box::leak(x);\n*static_ref += 1;\nassert_eq!(*static_ref, 42);\n```\n\nUnsized data:\n\n```\nlet x = vec![1, 2, 3].into_boxed_slice();\nlet static_ref = Box::leak(x);\nstatic_ref[0] = 4;\nassert_eq!(*static_ref, [4, 2, 3]);\n```","links":{"`Box::from_raw`":"0:326:2513"},"attrs":["#[stable(feature = \"box_leak\", since = \"1.26.0\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["b",{"kind":"generic","inner":"Self"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"outlives":"'a"}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5274:2885":{"id":"0:5274:2885","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/string.rs","begin":[2121,4],"end":[2123,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1559:2759":{"id":"0:1559:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1582,4],"end":[1589,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1633:2751":{"id":"0:1633:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1730,4],"end":[1732,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:50507:8711":{"id":"1:50507:8711","crate_id":1,"name":"is_prefix_of","span":{"filename":"/rust-lang-rust/library/core/src/str/pattern.rs","begin":[910,4],"end":[910,93]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3803":{"id":"0:3803","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[24,0],"end":[28,1]},"visibility":{"restricted":{"parent":"0:3783:4093","path":"::collections::vec_deque::iter_mut"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3805:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4121:5319":{"id":"0:4121:5319","crate_id":0,"name":"front_mut","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1500,4],"end":[1502,5]},"visibility":"public","docs":"Provides a mutable reference to the front element, or `None` if the\ndeque is empty.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nassert_eq!(d.front_mut(), None);\n\nd.push_back(1);\nd.push_back(2);\nmatch d.front_mut() {\n    Some(x) => *x = 9,\n    None => (),\n}\nassert_eq!(d.front(), Some(&9));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11341:13985":{"id":"1:11341:13985","crate_id":1,"name":"lines","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1013,4],"end":[1013,36]},"visibility":"public","docs":"An iterator over the lines of a string, as string slices.\n\nLines are split at line endings that are either newlines (`\\n`) or\nsequences of a carriage return followed by a line feed (`\\r\\n`).\n\nLine terminators are not included in the lines returned by the iterator.\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Lines","id":"1:50219:7940","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:771:3221":{"id":"a:1:7709:3766-0:771:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PeekMut","id":"0:771:3221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"b:1:2495-0:6991:8288":{"id":"b:1:2495-0:6991:8288","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6962":{"id":"0:6962","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[225,16],"end":[225,25]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]","#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2654:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1919:1502":{"id":"0:1919:1502","crate_id":0,"name":"values","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2346,4],"end":[2348,5]},"visibility":"public","docs":"Gets an iterator over the values of the map, in order by key.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(1, \"hello\");\na.insert(2, \"goodbye\");\n\nlet values: Vec<&str> = a.values().cloned().collect();\nassert_eq!(values, [\"hello\", \"goodbye\"]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Values","id":"0:1385:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5034":{"id":"0:5034","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[34,53],"end":[34,64]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::CharIndices","name":"CharIndices","id":"1:49941:7930","glob":false}},"0:4700:668":{"id":"0:4700:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/rc.rs","begin":[1944,4],"end":[1947,5]},"visibility":"default","docs":"Allocate a reference-counted string slice and copy `v` into it.\n\n# Example\n\n```\n# use std::rc::Rc;\nlet shared: Rc<str> = Rc::from(\"statue\");\nassert_eq!(\"statue\", &shared[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5344:743":{"id":"0:5344:743","crate_id":0,"name":"index_mut","span":{"filename":"library/alloc/src/string.rs","begin":[2428,4],"end":[2430,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"resolved_path","inner":{"name":"ops::RangeFrom","id":"1:46345:193","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:3328:157":{"id":"b:1:2495-0:3328:157","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3878":{"id":"0:3878","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[66,0],"end":[70,1]},"visibility":{"restricted":{"parent":"0:3850:757","path":"::collections::vec_deque::into_iter"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3881:2762"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3068:670":{"id":"0:3068:670","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1208,4],"end":[1218,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4529":{"id":"0:4529","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[335,0],"end":[335,55]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"catch_unwind\", since = \"1.9.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4386:668":{"id":"0:4386:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[882,4],"end":[885,5]},"visibility":"default","docs":"Converts a `&CStr` into a `Arc<CStr>`,\nby copying the contents into a newly allocated [`Arc`].","links":{"`Arc`":"0:5513:69"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:925:921":{"id":"0:925:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1488,4],"end":[1490,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:642:668":{"id":"0:642:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[2408,4],"end":[2410,5]},"visibility":"default","docs":"Converts a [`Cow`] into a box of dyn [`Error`].\n\n# Examples\n\n```\nuse std::error::Error;\nuse std::mem;\nuse std::borrow::Cow;\n\nlet a_cow_str_error = Cow::from(\"a str error\");\nlet a_boxed_error = Box::<dyn Error>::from(a_cow_str_error);\nassert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n```","links":{"`Error`":"1:2560:126","`Cow`":"0:676:109"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["err",{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6712":{"id":"0:6712","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3242,0],"end":[3253,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"items":["0:6713:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5075:7823":{"id":"0:5075:7823","crate_id":0,"name":"join","span":{"filename":"library/alloc/src/str.rs","begin":[74,4],"end":[76,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["sep",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2658:222-0:1301:94":{"id":"a:1:2658:222-0:1301:94","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4852":{"id":"0:4852","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[56,22],"end":[56,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"slice_group_by\", issue = \"80552\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::GroupBy","name":"GroupBy","id":"1:10067:7690","glob":false}},"0:4525":{"id":"0:4525","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[324,0],"end":[324,42]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":false,"blanket_impl":null}},"0:4370":{"id":"0:4370","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[821,0],"end":[826,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]","#[stable(feature = \"more_box_slice_clone\", since = \"1.29.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4371:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2495-0:1385:3820":{"id":"b:1:2495-0:1385:3820","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:1385:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:0:671-0:3462:5277":{"id":"b:0:671-0:3462:5277","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cursor","id":"0:3462:5277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6867:595":{"id":"0:6867:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2688,0],"end":[2688,67]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"U"},"len":"N"}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:1385:3820":{"id":"b:1:2505-0:1385:3820","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:1385:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5788":{"id":"0:5788","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2770,0],"end":[2774,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(since = \"1.5.0\", feature = \"smart_ptr_as_ref\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2463:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5790:307"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2510-0:6881:1972":{"id":"b:1:2510-0:6881:1972","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:737:267":{"id":"0:737:267","crate_id":0,"name":"add","span":{"filename":"library/alloc/src/borrow.rs","begin":[456,4],"end":[459,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:2735:2887","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6944:6202":{"id":"0:6944:6202","crate_id":0,"name":"FromVecWithNulError","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[161,0],"end":[164,1]},"visibility":"public","docs":"An error indicating that a nul byte was not in the expected position.\n\nThe vector used to create a [`CString`] must have one and only one nul byte,\npositioned at the end.\n\nThis error is created by the [`CString::from_vec_with_nul`] method.\nSee its documentation for more.\n\n# Examples\n\n```\nuse std::ffi::{CString, FromVecWithNulError};\n\nlet _: FromVecWithNulError = CString::from_vec_with_nul(b\"f\\0oo\".to_vec()).unwrap_err();\n```","links":{"`CString::from_vec_with_nul`":"0:4345:6450","`CString`":"0:6897:102"},"attrs":["#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:4310","a:1:2658:222-0:6944:6202","a:1:2644:214-0:6944:6202","a:1:2708:2329-0:6944:6202","a:1:7709:3766-0:6944:6202","a:1:7710:3767-0:6944:6202","b:0:5362-0:6944:6202","b:0:671-0:6944:6202","b:1:2567-0:6944:6202","b:1:2510-0:6944:6202","b:1:2505-0:6944:6202","b:1:2216-0:6944:6202","b:1:3303-0:6944:6202","b:1:2219-0:6944:6202","b:1:2499-0:6944:6202","b:1:2495-0:6944:6202","0:6947","0:6949","0:6950","0:6952","0:6953","0:6955","0:4398","0:4424"]}},"0:4130:5825":{"id":"0:4130:5825","crate_id":0,"name":"swap_remove_back","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1714,4],"end":[1722,5]},"visibility":"public","docs":"Removes an element from anywhere in the deque and returns it,\nreplacing it with the last element.\n\nThis does not preserve ordering, but is *O*(1).\n\nReturns `None` if `index` is out of bounds.\n\nElement at index 0 is the front of the queue.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nassert_eq!(buf.swap_remove_back(0), None);\nbuf.push_back(1);\nbuf.push_back(2);\nbuf.push_back(3);\nassert_eq!(buf, [1, 2, 3]);\n\nassert_eq!(buf.swap_remove_back(0), Some(1));\nassert_eq!(buf, [3, 2]);\n```","links":{},"attrs":["#[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3592:3475":{"id":"0:3592:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1835,4],"end":[1835,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"0:457:2733":{"id":"0:457:2733","crate_id":0,"name":"downcast_unchecked","span":{"filename":"library/alloc/src/boxed.rs","begin":[1804,4],"end":[1810,5]},"visibility":"public","docs":"Downcasts the box to a concrete type.\n\nFor a safe alternative see [`downcast`].\n\n# Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\n\nlet x: Box<dyn Any + Send> = Box::new(1_usize);\n\nunsafe {\n    assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n}\n```\n\n# Safety\n\nThe contained value must be of type `T`. Calling this method\nwith the incorrect type is *undefined behavior*.\n\n[`downcast`]: Self::downcast","links":{"Self::downcast":"0:449:2731"},"attrs":["#[inline]","#[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:5177:3005":{"id":"0:5177:3005","crate_id":0,"name":"push_str","span":{"filename":"library/alloc/src/string.rs","begin":[925,4],"end":[927,5]},"visibility":"public","docs":"Appends a given string slice onto the end of this `String`.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"foo\");\n\ns.push_str(\"bar\");\n\nassert_eq!(\"foobar\", s);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["string",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6840":{"id":"0:6840","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2685,0],"end":[2685,50]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"vec_deque_partial_eq_slice\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"U"}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6844:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2658:222-0:6749:3449":{"id":"a:1:2658:222-0:6749:3449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:6749:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2510-0:6407:237":{"id":"b:1:2510-0:6407:237","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5192:3521":{"id":"0:5192:3521","crate_id":0,"name":"remove","span":{"filename":"library/alloc/src/string.rs","begin":[1335,4],"end":[1348,5]},"visibility":"public","docs":"Removes a [`char`] from this `String` at a byte position and returns it.\n\nThis is an *O*(*n*) operation, as it requires copying every element in the\nbuffer.\n\n# Panics\n\nPanics if `idx` is larger than or equal to the `String`'s length,\nor if it does not lie on a [`char`] boundary.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"foo\");\n\nassert_eq!(s.remove(0), 'f');\nassert_eq!(s.remove(1), 'o');\nassert_eq!(s.remove(0), 'o');\n```","links":{"`char`":"1:58430:10458"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["idx",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"char"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6603":{"id":"0:6603","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2753,0],"end":[2795,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6606:2750","0:6607:3475","0:6608:757"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7710:3767-0:3900:3356":{"id":"a:1:7710:3767-0:3900:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:7232:595":{"id":"0:7232:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[25,0],"end":[25,103]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"U"}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2658:222-0:1385:3820":{"id":"a:1:2658:222-0:1385:3820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:1385:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2943:650":{"id":"0:2943:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[144,4],"end":[146,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3947:782":{"id":"0:3947:782","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[158,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:2978:4931":{"id":"b:1:2495-0:2978:4931","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:2978:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2495-0:1415:3837":{"id":"b:1:2495-0:1415:3837","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:1415:3837","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2708:2329-0:6787:192":{"id":"a:1:2708:2329-0:6787:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:6787:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1563:782":{"id":"0:1563:782","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1594,4],"end":[1596,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3397:3451":{"id":"0:3397:3451","crate_id":0,"name":"clear","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[641,4],"end":[643,5]},"visibility":"public","docs":"Removes all elements from the `LinkedList`.\n\nThis operation should compute in *O*(*n*) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\n\ndl.push_front(2);\ndl.push_front(1);\nassert_eq!(dl.len(), 2);\nassert_eq!(dl.front(), Some(&1));\n\ndl.clear();\nassert_eq!(dl.len(), 0);\nassert_eq!(dl.front(), None);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:890:2750":{"id":"0:890:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1383,4],"end":[1383,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"a:1:2658:222-0:4016:238":{"id":"a:1:2658:222-0:4016:238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1313:571":{"id":"0:1313:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[187,4],"end":[189,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:768:96":{"id":"a:1:7710:3767-0:768:96","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:7710:3767-0:6897:102":{"id":"a:1:7710:3767-0:6897:102","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3885":{"id":"0:3885","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[76,0],"end":[76,61]},"visibility":{"restricted":{"parent":"0:3850:757","path":"::collections::vec_deque::into_iter"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"trusted_len\", issue = \"37572\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TrustedLen","id":"1:7403:3146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3839:2762":{"id":"0:3839:2762","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[154,4],"end":[156,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7011:895":{"id":"0:7011:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/string.rs","begin":[2252,0],"end":[2252,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:898:2762":{"id":"0:898:2762","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1406,4],"end":[1408,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:6779:3475":{"id":"a:1:2644:214-0:6779:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6779:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6966":{"id":"0:6966","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[225,27],"end":[225,29]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3052:3529":{"id":"0:3052:3529","crate_id":0,"name":"take","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[980,4],"end":[986,5]},"visibility":"public","docs":"Removes and returns the element in the set, if any, that is equal to\nthe value.\n\nThe value may be any borrowed form of the set's element type,\nbut the ordering on the borrowed form *must* match the\nordering on the element type.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::from([1, 2, 3]);\nassert_eq!(set.take(&2), Some(2));\nassert_eq!(set.take(&2), None);\n```","links":{},"attrs":["#[stable(feature = \"set_recovery\", since = \"1.9.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:400:2645":{"id":"0:400:2645","crate_id":0,"name":"write_isize","span":{"filename":"library/alloc/src/boxed.rs","begin":[1427,4],"end":[1429,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"isize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:771:3221":{"id":"a:1:2708:2329-0:771:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PeekMut","id":"0:771:3221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3663":{"id":"0:3663","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1997,0],"end":[1997,47]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3352:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3775:2759":{"id":"0:3775:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[217,4],"end":[224,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3352:3805":{"id":"0:3352:3805","crate_id":0,"name":"IterMut","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[105,0],"end":[110,1]},"visibility":"public","docs":"A mutable iterator over the elements of a `LinkedList`.\n\nThis `struct` is created by [`LinkedList::iter_mut()`]. See its\ndocumentation for more.","links":{"`LinkedList::iter_mut()`":"0:3390:4093"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2708:2329-0:3352:3805","a:1:7709:3766-0:3352:3805","a:1:7710:3767-0:3352:3805","b:1:7020-0:3352:3805","b:1:2510-0:3352:3805","b:1:2505-0:3352:3805","b:1:2216-0:3352:3805","b:1:3303-0:3352:3805","b:1:2219-0:3352:3805","b:1:2499-0:3352:3805","b:1:2495-0:3352:3805","0:3359","0:3445","0:3453","0:3458","0:3460","0:3663","0:3665"]}},"a:1:7710:3767-0:6787:192":{"id":"a:1:7710:3767-0:6787:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:6787:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4352:650":{"id":"0:4352:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[720,4],"end":[722,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1555":{"id":"0:1555","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1581,0],"end":[1590,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:1348:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1559:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4229":{"id":"0:4229","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2794,0],"end":[2808,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"extend_ref\", since = \"1.2.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Copy","id":"1:2656:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7025:3507","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:4233:2885","0:4235:1746","0:4236:3508"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5283:2885":{"id":"0:5283:2885","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/string.rs","begin":[2142,4],"end":[2144,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5582:2436":{"id":"0:5582:2436","crate_id":0,"name":"new_uninit_slice","span":{"filename":"library/alloc/src/sync.rs","begin":[716,4],"end":[718,5]},"visibility":"public","docs":"Constructs a new atomically reference-counted slice with uninitialized contents.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(get_mut_unchecked)]\n\nuse std::sync::Arc;\n\nlet mut values = Arc::<[u32]>::new_uninit_slice(3);\n\n// Deferred initialization:\nlet data = Arc::get_mut(&mut values).unwrap();\ndata[0].write(1);\ndata[1].write(2);\ndata[2].write(3);\n\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [1, 2, 3])\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1653:409":{"id":"0:1653:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1766,4],"end":[1768,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11435:13905":{"id":"1:11435:13905","crate_id":1,"name":"escape_debug","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[2487,4],"end":[2487,49]},"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```","links":{"`char::escape_debug`":"1:4449:13905"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDebug","id":"1:50264:7936","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3524:5344":{"id":"0:3524:5344","crate_id":0,"name":"push_back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1589,4],"end":[1599,5]},"visibility":"public","docs":"Appends an element to the back of the cursor's parent list. The node\nthat the cursor points to is unchanged, even if it is the \"ghost\" node.\n\nThis operation should compute in *O*(1) time.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["elt",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:3352:3805":{"id":"b:1:2510-0:3352:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3352:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3509:5417":{"id":"0:3509:5417","crate_id":0,"name":"peek_prev","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1392,4],"end":[1400,5]},"visibility":"public","docs":"Returns a reference to the previous element.\n\nIf the cursor is pointing to the \"ghost\" non-element then this returns\nthe last element of the `LinkedList`. If it is pointing to the first\nelement of the `LinkedList` then this returns `None`.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:669:2903":{"id":"0:669:2903","crate_id":0,"name":"to_owned","span":{"filename":"library/alloc/src/borrow.rs","begin":[58,4],"end":[58,38]},"visibility":"default","docs":"Creates owned data from borrowed data, usually by cloning.\n\n# Examples\n\nBasic usage:\n\n```\nlet s: &str = \"a\";\nlet ss: String = s.to_owned();\n\nlet v: &[i32] = &[1, 2];\nlet vv: Vec<i32> = v.to_owned();\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use =\n\"cloning is often expensive and is not expected to have side effects\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:667:225","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:771:3221":{"id":"0:771:3221","crate_id":0,"name":"PeekMut","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[280,0],"end":[283,1]},"visibility":"public","docs":"Structure wrapping a mutable reference to the greatest item on a\n`BinaryHeap`.\n\nThis `struct` is created by the [`peek_mut`] method on [`BinaryHeap`]. See\nits documentation for more.\n\n[`peek_mut`]: BinaryHeap::peek_mut","links":{"`BinaryHeap`":"0:768:96","BinaryHeap::peek_mut":"0:807:3255"},"attrs":["#[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:789","a:1:2658:222-0:771:3221","a:1:2644:214-0:771:3221","a:1:2708:2329-0:771:3221","a:1:7709:3766-0:771:3221","a:1:7710:3767-0:771:3221","b:1:2510-0:771:3221","b:1:2505-0:771:3221","b:1:2216-0:771:3221","b:1:3303-0:771:3221","b:1:2219-0:771:3221","b:1:2499-0:771:3221","b:1:2495-0:771:3221","0:776","0:779","0:782","0:786"]}},"a:1:2658:222-0:1201:3672":{"id":"a:1:2658:222-0:1201:3672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:1201:3672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6786:650":{"id":"0:6786:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[157,9],"end":[157,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1611":{"id":"0:1611","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1705,0],"end":[1710,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1359:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1615:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1279:3797":{"id":"0:1279:3797","crate_id":0,"name":"insert","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[350,4],"end":[383,5]},"visibility":"public","docs":"Sets the value of the entry with the `VacantEntry`'s key,\nand returns a mutable reference to it.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, u32> = BTreeMap::new();\n\nif let Entry::Vacant(o) = map.entry(\"poneyland\") {\n    o.insert(37);\n}\nassert_eq!(map[\"poneyland\"], 37);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["value",{"kind":"generic","inner":"V"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3630":{"id":"0:3630","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1918,0],"end":[1935,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3632:409","0:3633:411"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5567:2366":{"id":"0:5567:2366","crate_id":0,"name":"new_zeroed","span":{"filename":"library/alloc/src/sync.rs","begin":[535,4],"end":[543,5]},"visibility":"public","docs":"Constructs a new `Arc` with uninitialized contents, with the memory\nbeing filled with `0` bytes.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\nof this method.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nuse std::sync::Arc;\n\nlet zero = Arc::<u32>::new_zeroed();\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0)\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1519:2186"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6719:126":{"id":"0:6719:126","crate_id":0,"name":"Error","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3257,4],"end":[3257,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"b:1:3303-0:2978:4931":{"id":"b:1:3303-0:2978:4931","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:2978:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2708:2329-0:1680:4069":{"id":"a:1:2708:2329-0:1680:4069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:1680:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1280":{"id":"0:1280","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[386,0],"end":[565,1]},"visibility":{"restricted":{"parent":"0:1169:3668","path":"::collections::btree::map::entry"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:1216:3670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1285:3528","0:1286:3902","0:1287:3294","0:1288:3929","0:1289:4195","0:1290:3797","0:1291:3521"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6505:9983":{"id":"0:6505:9983","crate_id":0,"name":"split_at_spare_mut","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2301,4],"end":[2306,5]},"visibility":"public","docs":"Returns vector content as a slice of `T`, along with the remaining spare\ncapacity of the vector as a slice of `MaybeUninit<T>`.\n\nThe returned spare capacity slice can be used to fill the vector with data\n(e.g. by reading from a file) before marking the data as initialized using\nthe [`set_len`] method.\n\n[`set_len`]: Vec::set_len\n\nNote that this is a low-level API, which should be used with care for\noptimization purposes. If you need to append data to a `Vec`\nyou can use [`push`], [`extend`], [`extend_from_slice`],\n[`extend_from_within`], [`insert`], [`append`], [`resize`] or\n[`resize_with`], depending on your exact needs.\n\n[`push`]: Vec::push\n[`extend`]: Vec::extend\n[`extend_from_slice`]: Vec::extend_from_slice\n[`extend_from_within`]: Vec::extend_from_within\n[`insert`]: Vec::insert\n[`append`]: Vec::append\n[`resize`]: Vec::resize\n[`resize_with`]: Vec::resize_with\n\n# Examples\n\n```\n#![feature(vec_split_at_spare)]\n\nlet mut v = vec![1, 1, 2];\n\n// Reserve additional space big enough for 10 elements.\nv.reserve(10);\n\nlet (init, uninit) = v.split_at_spare_mut();\nlet sum = init.iter().copied().sum::<u32>();\n\n// Fill in the next 4 elements.\nuninit[0].write(sum);\nuninit[1].write(sum * 2);\nuninit[2].write(sum * 3);\nuninit[3].write(sum * 4);\n\n// Mark the 4 elements of the vector as being initialized.\nunsafe {\n    let len = v.len();\n    v.set_len(len + 4);\n}\n\nassert_eq!(&v, &[1, 1, 2, 4, 8, 12, 16]);\n```","links":{"Vec::extend_from_slice":"0:6511:7876","Vec::extend_from_within":"0:6512:8485","Vec::resize":"0:6510:6045","Vec::set_len":"0:6439:7494","Vec::extend":"0:6626:2885","Vec::append":"0:6491:3320","Vec::insert":"0:6442:3797","Vec::push":"0:6488:3275","Vec::resize_with":"0:6500:5901"},"attrs":["#[unstable(feature = \"vec_split_at_spare\", issue = \"81944\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:953:921":{"id":"0:953:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1553,4],"end":[1555,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3515:5429":{"id":"0:3515:5429","crate_id":0,"name":"insert_after","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1422,4],"end":[1435,5]},"visibility":"public","docs":"Inserts a new element into the `LinkedList` after the current one.\n\nIf the cursor is pointing at the \"ghost\" non-element then the new element is\ninserted at the front of the `LinkedList`.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["item",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6512:8485":{"id":"0:6512:8485","crate_id":0,"name":"extend_from_within","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2419,4],"end":[2431,5]},"visibility":"public","docs":"Copies elements from `src` range to the end of the vector.\n\n# Panics\n\nPanics if the starting point is greater than the end point or if\nthe end point is greater than the length of the vector.\n\n# Examples\n\n```\nlet mut vec = vec![0, 1, 2, 3, 4];\n\nvec.extend_from_within(2..);\nassert_eq!(vec, [0, 1, 2, 3, 4, 2, 3, 4]);\n\nvec.extend_from_within(..2);\nassert_eq!(vec, [0, 1, 2, 3, 4, 2, 3, 4, 0, 1]);\n\nvec.extend_from_within(4..8);\nassert_eq!(vec, [0, 1, 2, 3, 4, 2, 3, 4, 0, 1, 4, 2, 3, 4]);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"vec_extend_from_within\", since = \"1.53.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["src",{"kind":"generic","inner":"R"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3066:3663","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5045":{"id":"0:5045","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[40,20],"end":[40,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::FromStr","name":"FromStr","id":"1:10974:7939","glob":false}},"0:630:668":{"id":"0:630:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[2317,4],"end":[2321,5]},"visibility":"default","docs":"Converts a [`String`] into a box of dyn [`Error`].\n\n# Examples\n\n```\nuse std::error::Error;\nuse std::mem;\n\nlet a_string_error = \"a string error\".to_string();\nlet a_boxed_error = Box::<dyn Error>::from(a_string_error);\nassert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n```","links":{"`Error`":"1:2560:126","`String`":"0:6980:218"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["str_err",{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:2944:4916":{"id":"b:1:2499-0:2944:4916","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:2944:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5318:267":{"id":"0:5318:267","crate_id":0,"name":"add","span":{"filename":"library/alloc/src/string.rs","begin":[2338,4],"end":[2341,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1537":{"id":"0:1537","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1541,0],"end":[1548,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"items":["0:1542:2750","0:1543:3475","0:1544:757"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5811:9272":{"id":"0:5811:9272","crate_id":0,"name":"wake","span":{"filename":"library/alloc/src/task.rs","begin":[79,4],"end":[79,29]},"visibility":"default","docs":"Wake this task.","links":{},"attrs":["#[stable(feature = \"wake_trait\", since = \"1.51.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:5693:59":{"id":"0:5693:59","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/sync.rs","begin":[2206,4],"end":[2208,5]},"visibility":"default","docs":"Constructs a new `Weak<T>`, without allocating memory.\nCalling [`upgrade`] on the return value always\ngives [`None`].\n\n[`upgrade`]: Weak::upgrade\n\n# Examples\n\n```\nuse std::sync::Weak;\n\nlet empty: Weak<i64> = Default::default();\nassert!(empty.upgrade().is_none());\n```","links":{"Weak::upgrade":"0:5680:7614","`None`":"1:47999:173"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:1680:4069":{"id":"a:1:2644:214-0:1680:4069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:1680:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5666":{"id":"0:5666","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[1826,0],"end":[1846,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5668:908"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:914:921":{"id":"0:914:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1451,4],"end":[1453,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:6897:102":{"id":"b:1:2499-0:6897:102","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11330:3227":{"id":"1:11330:3227","crate_id":1,"name":"get_unchecked_mut","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[543,4],"end":[546,23]},"visibility":"public","docs":"Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9110:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9110:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:4573":{"id":"0:4573","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[790,0],"end":[828,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"items":["0:4575:329"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6444:3521":{"id":"0:6444:3521","crate_id":0,"name":"remove","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1503,4],"end":[1531,5]},"visibility":"public","docs":"Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.\n\nNote: Because this shifts over the remaining elements, it has a\nworst-case performance of *O*(*n*). If you don't need the order of elements\nto be preserved, use [`swap_remove`] instead. If you'd like to remove\nelements from the beginning of the `Vec`, consider using\n[`VecDeque::pop_front`] instead.\n\n[`swap_remove`]: Vec::swap_remove\n[`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front\n\n# Panics\n\nPanics if `index` is out of bounds.\n\n# Examples\n\n```\nlet mut v = vec![1, 2, 3];\nassert_eq!(v.remove(1), 2);\nassert_eq!(v, [1, 3]);\n```","links":{"Vec::swap_remove":"0:6440:9784","crate::collections::VecDeque::pop_front":"0:4124:5339"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[track_caller]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1904":{"id":"0:1904","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2221,0],"end":[2240,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]},"len":"N"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1909:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5559":{"id":"0:5559","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[348,0],"end":[688,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5561:908","0:5562:7155","0:5564:1758","0:5567:2366","0:5570:1003","0:5571:8973","0:5572:2380","0:5573:2386","0:5576:2391","0:5579:7193"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5397":{"id":"0:5397","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2751,0],"end":[2768,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:5399:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5383:307":{"id":"0:5383:307","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/string.rs","begin":[2640,4],"end":[2642,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6980:218":{"id":"0:6980:218","crate_id":0,"name":"String","span":{"filename":"library/alloc/src/string.rs","begin":[367,0],"end":[369,1]},"visibility":"public","docs":"A UTF-8–encoded, growable string.\n\nThe `String` type is the most common string type that has ownership over the\ncontents of the string. It has a close relationship with its borrowed\ncounterpart, the primitive [`str`].\n\n# Examples\n\nYou can create a `String` from [a literal string][`&str`] with [`String::from`]:\n\n[`String::from`]: From::from\n\n```\nlet hello = String::from(\"Hello, world!\");\n```\n\nYou can append a [`char`] to a `String` with the [`push`] method, and\nappend a [`&str`] with the [`push_str`] method:\n\n```\nlet mut hello = String::from(\"Hello, \");\n\nhello.push('w');\nhello.push_str(\"orld!\");\n```\n\n[`push`]: String::push\n[`push_str`]: String::push_str\n\nIf you have a vector of UTF-8 bytes, you can create a `String` from it with\nthe [`from_utf8`] method:\n\n```\n// some bytes, in a vector\nlet sparkle_heart = vec![240, 159, 146, 150];\n\n// We know these bytes are valid, so we'll use `unwrap()`.\nlet sparkle_heart = String::from_utf8(sparkle_heart).unwrap();\n\nassert_eq!(\"💖\", sparkle_heart);\n```\n\n[`from_utf8`]: String::from_utf8\n\n# UTF-8\n\n`String`s are always valid UTF-8. If you need a non-UTF-8 string, consider\n[`OsString`]. It is similar, but without the UTF-8 constraint. Because UTF-8\nis a variable width encoding, `String`s are typically smaller than an array of\nthe same `chars`:\n\n```\nuse std::mem;\n\n// `s` is ASCII which represents each `char` as one byte\nlet s = \"hello\";\nassert_eq!(s.len(), 5);\n\n// A `char` array with the same contents would be longer because\n// every `char` is four bytes\nlet s = ['h', 'e', 'l', 'l', 'o'];\nlet size: usize = s.into_iter().map(|c| mem::size_of_val(&c)).sum();\nassert_eq!(size, 20);\n\n// However, for non-ASCII strings, the difference will be smaller\n// and sometimes they are the same\nlet s = \"💖💖💖💖💖\";\nassert_eq!(s.len(), 20);\n\nlet s = ['💖', '💖', '💖', '💖', '💖'];\nlet size: usize = s.into_iter().map(|c| mem::size_of_val(&c)).sum();\nassert_eq!(size, 20);\n```\n\nThis raises interesting questions as to how `s[i]` should work.\nWhat should `i` be here? Several options include byte indices and\n`char` indices but, because of UTF-8 encoding, only byte indices\nwould provide constant time indexing. Getting the `i`th `char`, for\nexample, is available using [`chars`]:\n\n```\nlet s = \"hello\";\nlet third_character = s.chars().nth(2);\nassert_eq!(third_character, Some('l'));\n\nlet s = \"💖💖💖💖💖\";\nlet third_character = s.chars().nth(2);\nassert_eq!(third_character, Some('💖'));\n```\n\nNext, what should `s[i]` return? Because indexing returns a reference\nto underlying data it could be `&u8`, `&[u8]`, or something else similar.\nSince we're only providing one index, `&u8` makes the most sense but that\nmight not be what the user expects and can be explicitly achieved with\n[`as_bytes()`]:\n\n```\n// The first byte is 104 - the byte value of `'h'`\nlet s = \"hello\";\nassert_eq!(s.as_bytes()[0], 104);\n// or\nassert_eq!(s.as_bytes()[0], b'h');\n\n// The first byte is 240 which isn't obviously useful\nlet s = \"💖💖💖💖💖\";\nassert_eq!(s.as_bytes()[0], 240);\n```\n\nDue to these ambiguities/restrictions, indexing with a `usize` is simply\nforbidden:\n\n```compile_fail,E0277\nlet s = \"hello\";\n\n// The following will not compile!\nprintln!(\"The first letter of s is {}\", s[0]);\n```\n\nIt is more clear, however, how `&s[i..j]` should work (that is,\nindexing with a range). It should accept byte indices (to be constant-time)\nand return a `&str` which is UTF-8 encoded. This is also called \"string slicing\".\nNote this will panic if the byte indices provided are not character\nboundaries - see [`is_char_boundary`] for more details. See the implementations\nfor [`SliceIndex<str>`] for more details on string slicing. For a non-panicking\nversion of string slicing, see [`get`].\n\n[`OsString`]: ../../std/ffi/struct.OsString.html \"ffi::OsString\"\n[`SliceIndex<str>`]: core::slice::SliceIndex\n[`as_bytes()`]: str::as_bytes\n[`get`]: str::get\n[`is_char_boundary`]: str::is_char_boundary\n\nThe [`bytes`] and [`chars`] methods return iterators over the bytes and\ncodepoints of the string, respectively. To iterate over codepoints along\nwith byte indices, use [`char_indices`].\n\n[`bytes`]: str::bytes\n[`chars`]: str::chars\n[`char_indices`]: str::char_indices\n\n# Deref\n\n`String` implements <code>[Deref]<Target = [str]></code>, and so inherits all of [`str`]'s\nmethods. In addition, this means that you can pass a `String` to a\nfunction which takes a [`&str`] by using an ampersand (`&`):\n\n```\nfn takes_str(s: &str) { }\n\nlet s = String::from(\"Hello\");\n\ntakes_str(&s);\n```\n\nThis will create a [`&str`] from the `String` and pass it in. This\nconversion is very inexpensive, and so generally, functions will accept\n[`&str`]s as arguments unless they need a `String` for some specific\nreason.\n\nIn certain cases Rust doesn't have enough information to make this\nconversion, known as [`Deref`] coercion. In the following example a string\nslice [`&'a str`][`&str`] implements the trait `TraitExample`, and the function\n`example_func` takes anything that implements the trait. In this case Rust\nwould need to make two implicit conversions, which Rust doesn't have the\nmeans to do. For that reason, the following example will not compile.\n\n```compile_fail,E0277\ntrait TraitExample {}\n\nimpl<'a> TraitExample for &'a str {}\n\nfn example_func<A: TraitExample>(example_arg: A) {}\n\nlet example_string = String::from(\"example_string\");\nexample_func(&example_string);\n```\n\nThere are two options that would work instead. The first would be to\nchange the line `example_func(&example_string);` to\n`example_func(example_string.as_str());`, using the method [`as_str()`]\nto explicitly extract the string slice containing the string. The second\nway changes `example_func(&example_string);` to\n`example_func(&*example_string);`. In this case we are dereferencing a\n`String` to a [`str`], then referencing the [`str`] back to\n[`&str`]. The second way is more idiomatic, however both work to do the\nconversion explicitly rather than relying on the implicit conversion.\n\n# Representation\n\nA `String` is made up of three components: a pointer to some bytes, a\nlength, and a capacity. The pointer points to an internal buffer `String`\nuses to store its data. The length is the number of bytes currently stored\nin the buffer, and the capacity is the size of the buffer in bytes. As such,\nthe length will always be less than or equal to the capacity.\n\nThis buffer is always stored on the heap.\n\nYou can look at these with the [`as_ptr`], [`len`], and [`capacity`]\nmethods:\n\n```\nuse std::mem;\n\nlet story = String::from(\"Once upon a time...\");\n\n// Prevent automatically dropping the String's data\nlet mut story = mem::ManuallyDrop::new(story);\n\nlet ptr = story.as_mut_ptr();\nlet len = story.len();\nlet capacity = story.capacity();\n\n// story has nineteen bytes\nassert_eq!(19, len);\n\n// We can re-build a String out of ptr, len, and capacity. This is all\n// unsafe because we are responsible for making sure the components are\n// valid:\nlet s = unsafe { String::from_raw_parts(ptr, len, capacity) } ;\n\nassert_eq!(String::from(\"Once upon a time...\"), s);\n```\n\n[`as_ptr`]: str::as_ptr\n[`len`]: String::len\n[`capacity`]: String::capacity\n\nIf a `String` has enough capacity, adding elements to it will not\nre-allocate. For example, consider this program:\n\n```\nlet mut s = String::new();\n\nprintln!(\"{}\", s.capacity());\n\nfor _ in 0..5 {\n    s.push_str(\"hello\");\n    println!(\"{}\", s.capacity());\n}\n```\n\nThis will output the following:\n\n```text\n0\n8\n16\n16\n32\n32\n```\n\nAt first, we have no memory allocated at all, but as we append to the\nstring, it increases its capacity appropriately. If we instead use the\n[`with_capacity`] method to allocate the correct capacity initially:\n\n```\nlet mut s = String::with_capacity(25);\n\nprintln!(\"{}\", s.capacity());\n\nfor _ in 0..5 {\n    s.push_str(\"hello\");\n    println!(\"{}\", s.capacity());\n}\n```\n\n[`with_capacity`]: String::with_capacity\n\nWe end up with a different output:\n\n```text\n25\n25\n25\n25\n25\n25\n```\n\nHere, there's no need to allocate more memory inside the loop.\n\n[str]: prim@str \"str\"\n[`str`]: prim@str \"str\"\n[`&str`]: prim@str \"&str\"\n[Deref]: core::ops::Deref \"ops::Deref\"\n[`Deref`]: core::ops::Deref \"ops::Deref\"\n[`as_str()`]: String::as_str","links":{"core::ops::Deref":"1:2886:115","str::as_bytes":"1:11320:2629","From::from":"1:2474:668","String::len":"0:5214:782","String::with_capacity":"0:5164:2019","str::char_indices":"1:11337:8022","core::slice::SliceIndex":"1:9110:216","str::bytes":"1:11338:2612","str::get":"1:11324:3294","`char`":"1:58430:10458","prim@str":"1:58436:10463","str::is_char_boundary":"1:11314:8486","String::push":"0:5187:3275","str::as_ptr":"1:11322:306","String::from_utf8":"0:5165:6388","String::push_str":"0:5177:3005","str::chars":"1:11336:8030","String::as_str":"0:5175:308","String::capacity":"0:5180:2020"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[lang = \"String\"]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:5162","a:1:2658:222-0:6980:218","a:1:2644:214-0:6980:218","a:1:2708:2329-0:6980:218","a:1:7709:3766-0:6980:218","a:1:7710:3767-0:6980:218","b:0:5362-0:6980:218","b:0:671-0:6980:218","b:1:2510-0:6980:218","b:1:2505-0:6980:218","b:1:2216-0:6980:218","b:1:3303-0:6980:218","b:1:2219-0:6980:218","b:1:2499-0:6980:218","b:1:2495-0:6980:218","0:618","0:629","0:4701","0:5085","0:5087","0:6982","0:6984","0:6985","0:6987","0:5236","0:5239","0:5242","0:5246","0:5250","0:5253","0:5256","0:5260","0:5266","0:5272","0:5278","0:5282","0:5287","0:5293","0:5303","0:7007","0:7012","0:7017","0:7022","0:7047","0:7052","0:5307","0:5309","0:5311","0:5313","0:5316","0:5319","0:5321","0:5324","0:5327","0:5330","0:5333","0:5336","0:5339","0:5341","0:5343","0:5345","0:5347","0:5349","0:5351","0:5354","0:5357","0:5376","0:5378","0:5380","0:5382","0:5384","0:5386","0:5388","0:5390","0:5392","0:5394","0:5400","0:5403","0:5415","0:5419","0:5421","0:5453","0:5749"]}},"b:1:2510-0:1394:3826":{"id":"b:1:2510-0:1394:3826","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:1394:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6626:2885":{"id":"0:6626:2885","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2821,4],"end":[2823,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:5513:69":{"id":"b:1:2499-0:5513:69","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2216-0:6869:1971":{"id":"b:1:2216-0:6869:1971","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7710:3767-0:6881:1972":{"id":"a:1:7710:3767-0:6881:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3414:3974":{"id":"0:3414:3974","crate_id":0,"name":"drain_filter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[991,4],"end":[1000,5]},"visibility":"public","docs":"Creates an iterator which uses a closure to determine if an element should be removed.\n\nIf the closure returns true, then the element is removed and yielded.\nIf the closure returns false, the element will remain in the list and will not be yielded\nby the iterator.\n\nNote that `drain_filter` lets you mutate every element in the filter closure, regardless of\nwhether you choose to keep or remove it.\n\n# Examples\n\nSplitting a list into evens and odds, reusing the original list:\n\n```\n#![feature(drain_filter)]\nuse std::collections::LinkedList;\n\nlet mut numbers: LinkedList<u32> = LinkedList::new();\nnumbers.extend(&[1, 2, 3, 4, 5, 6, 8, 9, 11, 13, 14, 15]);\n\nlet evens = numbers.drain_filter(|x| *x % 2 == 0).collect::<LinkedList<_>>();\nlet odds = numbers;\n\nassert_eq!(evens.into_iter().collect::<Vec<_>>(), vec![2, 4, 6, 8, 14]);\nassert_eq!(odds.into_iter().collect::<Vec<_>>(), vec![1, 3, 5, 9, 11, 13, 15]);\n```","links":{},"attrs":["#[unstable(feature = \"drain_filter\", reason = \"recently added\", issue =\n\"43244\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["filter",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3531:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3519:5449":{"id":"0:3519:5449","crate_id":0,"name":"splice_after","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1502,4],"end":[1518,5]},"visibility":"public","docs":"Inserts the elements from the given `LinkedList` after the current one.\n\nIf the cursor is pointing at the \"ghost\" non-element then the new elements are\ninserted at the start of the `LinkedList`.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["list",{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5089":{"id":"0:5089","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[205,0],"end":[217,1]},"visibility":{"restricted":{"parent":"0:5004:1344","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"str"},"items":["0:5090:2677","0:5091:2903","0:5092:2911"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4712:668":{"id":"0:4712:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/rc.rs","begin":[2031,4],"end":[2036,5]},"visibility":"default","docs":"Create a reference-counted pointer from\na clone-on-write pointer by copying its content.\n\n# Example\n\n```rust\n# use std::rc::Rc;\n# use std::borrow::Cow;\nlet cow: Cow<str> = Cow::Borrowed(\"eggplant\");\nlet shared: Rc<str> = Rc::from(cow);\nassert_eq!(\"eggplant\", &shared[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["cow",{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:3004:4940":{"id":"b:1:3303-0:3004:4940","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:3004:4940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:714":{"id":"0:714","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[384,0],"end":[394,1]},"visibility":{"restricted":{"parent":"0:648:1793","path":"::borrow"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"constraint":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["0:716:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4283":{"id":"0:4283","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/mod.rs","begin":[86,22],"end":[86,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"self::c_str::CString","name":"CString","id":"0:6897:102","glob":false}},"0:1278:4237":{"id":"0:1278:4237","crate_id":0,"name":"into_key","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[329,4],"end":[331,5]},"visibility":"public","docs":"Take ownership of the key.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\n\nif let Entry::Vacant(v) = map.entry(\"poneyland\") {\n    v.into_key();\n}\n```","links":{},"attrs":["#[stable(feature = \"map_entry_recover_keys2\", since = \"1.12.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"K"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5163:908":{"id":"0:5163:908","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/string.rs","begin":[455,4],"end":[457,5]},"visibility":"public","docs":"Creates a new empty `String`.\n\nGiven that the `String` is empty, this will not allocate any initial\nbuffer. While that means that this initial operation is very\ninexpensive, it may cause excessive allocation later when you add\ndata. If you have an idea of how much data the `String` will hold,\nconsider the [`with_capacity`] method to prevent excessive\nre-allocation.\n\n[`with_capacity`]: String::with_capacity\n\n# Examples\n\nBasic usage:\n\n```\nlet s = String::new();\n```","links":{"String::with_capacity":"0:5164:2019"},"attrs":["#[inline]","#[rustc_const_stable(feature = \"const_string_new\", since = \"1.39.0\")]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5325:180":{"id":"0:5325:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/string.rs","begin":[2367,4],"end":[2367,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"str"}}},"0:5372":{"id":"0:5372","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2596,0],"end":[2601,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"str_to_string_specialization\", since = \"1.9.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5360:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"str"},"items":["0:5373:1398"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2658:222-0:676:109":{"id":"a:1:2658:222-0:676:109","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1751:2759":{"id":"0:1751:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1967,4],"end":[1969,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5066":{"id":"0:5066","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[55,20],"end":[55,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"utf8_chunks\", issue = \"99543\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::Utf8Chunk","name":"Utf8Chunk","id":"1:50573:7949","glob":false}},"0:4207:757":{"id":"0:4207:757","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2751,4],"end":[2753,5]},"visibility":"default","docs":"Consumes the deque into a front-to-back iterator yielding elements by\nvalue.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6449:5879":{"id":"0:6449:5879","crate_id":0,"name":"retain_mut","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1584,4],"end":[1675,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate, passing a mutable reference to it.\n\nIn other words, remove all elements `e` such that `f(&mut e)` returns `false`.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.\n\n# Examples\n\n```\nlet mut vec = vec![1, 2, 3, 4];\nvec.retain_mut(|x| if *x <= 3 {\n    *x += 1;\n    true\n} else {\n    false\n});\nassert_eq!(vec, [2, 3, 4]);\n```","links":{},"attrs":["#[stable(feature = \"vec_retain_mut\", since = \"1.61.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:276:1792":{"id":"b:1:2499-0:276:1792","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5248:670":{"id":"0:5248:670","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/string.rs","begin":[2023,4],"end":[2027,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:2937:3356":{"id":"b:1:3303-0:2937:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5381:2784":{"id":"0:5381:2784","crate_id":0,"name":"as_mut","span":{"filename":"library/alloc/src/string.rs","begin":[2632,4],"end":[2634,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:771:3221":{"id":"b:1:2499-0:771:3221","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PeekMut","id":"0:771:3221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2216-0:1348:3805":{"id":"b:1:2216-0:1348:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:1348:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:0:671-0:6944:6202":{"id":"b:0:671-0:6944:6202","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:0:5362-0:1230:3671":{"id":"b:0:5362-0:1230:3671","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2526,0],"end":[2540,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5360:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedError","id":"0:1230:3671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:5364:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1482:3348":{"id":"0:1482:3348","crate_id":0,"name":"retain","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1086,4],"end":[1092,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nIn other words, remove all pairs `(k, v)` for which `f(&k, &mut v)` returns `false`.\nThe elements are visited in ascending key order.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<i32, i32> = (0..8).map(|x| (x, x*10)).collect();\n// Keep only the elements with even-numbered keys.\nmap.retain(|&k, _| k % 2 == 0);\nassert!(map.into_iter().eq(vec![(0, 0), (2, 20), (4, 40), (6, 60)]));\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"btree_retain\", since = \"1.53.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5435:571":{"id":"0:5435:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/string.rs","begin":[2908,4],"end":[2917,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3570:921":{"id":"0:3570:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1787,4],"end":[1789,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:7020-0:1415:3837":{"id":"b:1:7020-0:1415:3837","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:1415:3837","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"b:1:2499-0:1415:3837":{"id":"b:1:2499-0:1415:3837","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:1415:3837","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6876":{"id":"0:6876","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[59,27],"end":[59,29]},"visibility":{"restricted":{"parent":"0:744:1794","path":"::collections"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"try_reserve\", since = \"1.57.0\")]","#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2655:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4093:5696":{"id":"0:4093:5696","crate_id":0,"name":"truncate","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1026,4],"end":[1068,5]},"visibility":"public","docs":"Shortens the deque, keeping the first `len` elements and dropping\nthe rest.\n\nIf `len` is greater than the deque's current length, this has no\neffect.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(5);\nbuf.push_back(10);\nbuf.push_back(15);\nassert_eq!(buf, [5, 10, 15]);\nbuf.truncate(1);\nassert_eq!(buf, [5]);\n```","links":{},"attrs":["#[stable(feature = \"deque_extras\", since = \"1.16.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5415":{"id":"0:5415","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2833,0],"end":[2837,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"cow_str_from_iter\", since = \"1.12.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7012:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:5417:670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:920":{"id":"0:920","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1469,0],"end":[1469,55]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"trusted_len\", issue = \"37572\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TrustedLen","id":"1:7403:3146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4108:782":{"id":"0:4108:782","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1203,4],"end":[1205,5]},"visibility":"public","docs":"Returns the number of elements in the deque.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque = VecDeque::new();\nassert_eq!(deque.len(), 0);\ndeque.push_back(1);\nassert_eq!(deque.len(), 1);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4684":{"id":"0:4684","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1871,0],"end":[1875,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4686:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5787:1793":{"id":"0:5787:1793","crate_id":0,"name":"borrow","span":{"filename":"library/alloc/src/sync.rs","begin":[2764,4],"end":[2766,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5925:2750":{"id":"0:5925:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/vec/splice.rs","begin":[32,4],"end":[32,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:7047":{"id":"0:7047","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2259,0],"end":[2259,33]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(unused_lifetimes)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:7050:595","0:7051:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4394:6499":{"id":"0:4394:6499","crate_id":0,"name":"nul_position","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[936,4],"end":[938,5]},"visibility":"public","docs":"Returns the position of the nul byte in the slice that caused\n[`CString::new`] to fail.\n\n# Examples\n\n```\nuse std::ffi::CString;\n\nlet nul_error = CString::new(\"foo\\0bar\").unwrap_err();\nassert_eq!(nul_error.nul_position(), 3);\n\nlet nul_error = CString::new(\"foo bar\\0\").unwrap_err();\nassert_eq!(nul_error.nul_position(), 7);\n```","links":{"`CString::new`":"0:4314:908"},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6642":{"id":"0:6642","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3010,0],"end":[3024,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":"Extend implementation that copies elements out of references before pushing them onto the Vec.\n\nThis implementation is specialized for slice iterators, where it uses [`copy_from_slice`] to\nappend the entire slice at once.\n\n[`copy_from_slice`]: slice::copy_from_slice","links":{"slice::copy_from_slice":"1:10470:7405"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"extend_ref\", since = \"1.2.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:2656:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7025:3507","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6646:2885","0:6648:1746","0:6649:3508"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5349":{"id":"0:5349","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2447,0],"end":[2452,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:2973:5511","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeToInclusive","id":"1:46409:197","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5350:743"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4927:7823":{"id":"0:4927:7823","crate_id":0,"name":"join","span":{"filename":"library/alloc/src/slice.rs","begin":[571,4],"end":[576,5]},"visibility":"public","docs":"Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.\n\n# Examples\n\n```\nassert_eq!([\"hello\", \"world\"].join(\" \"), \"hello world\");\nassert_eq!([[1, 2], [3, 4]].join(&0), [1, 2, 0, 3, 4]);\nassert_eq!([[1, 2], [3, 4]].join(&[0, 0][..]), [1, 2, 0, 0, 3, 4]);\n```","links":{},"attrs":["#[rustc_allow_incoherent_impl]","#[stable(feature = \"rename_connect_to_join\", since = \"1.3.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["sep",{"kind":"generic","inner":"Separator"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Join","id":"0:4938:7826","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Separator"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Join","id":"0:4938:7826","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Separator"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:7057:4069":{"id":"b:1:2499-0:7057:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:7057:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6414:908":{"id":"0:6414:908","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[424,4],"end":[426,5]},"visibility":"public","docs":"Constructs a new, empty `Vec<T>`.\n\nThe vector will not allocate until elements are pushed onto it.\n\n# Examples\n\n```\n# #![allow(unused_mut)]\nlet mut vec: Vec<i32> = Vec::new();\n```","links":{},"attrs":["#[inline]","#[rustc_const_stable(feature = \"const_vec_new\", since = \"1.39.0\")]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5798:2822":{"id":"0:5798:2822","crate_id":0,"name":"description","span":{"filename":"library/alloc/src/sync.rs","begin":[2804,4],"end":[2806,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated, deprecated_in_future)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5074:180":{"id":"0:5074:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/str.rs","begin":[72,4],"end":[72,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:6106":{"id":"0:6106","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[171,0],"end":[175,1]},"visibility":{"restricted":{"parent":"0:6056:757","path":"::vec::into_iter"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"vec_intoiter_as_ref\", since = \"1.46.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2463:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6109:307"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2505-0:2908:95":{"id":"b:1:2505-0:2908:95","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4398":{"id":"0:4398","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[966,0],"end":[977,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4399:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11431:13487":{"id":"1:11431:13487","crate_id":1,"name":"is_ascii","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[2370,4],"end":[2370,34]},"visibility":"public","docs":"Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5660:571":{"id":"0:5660:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/sync.rs","begin":[1706,4],"end":[1747,5]},"visibility":"default","docs":"Drops the `Arc`.\n\nThis will decrement the strong reference count. If the strong reference\ncount reaches zero then the only other references (if any) are\n[`Weak`], so we `drop` the inner value.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nstruct Foo;\n\nimpl Drop for Foo {\n    fn drop(&mut self) {\n        println!(\"dropped!\");\n    }\n}\n\nlet foo  = Arc::new(Foo);\nlet foo2 = Arc::clone(&foo);\n\ndrop(foo);    // Doesn't print anything\ndrop(foo2);   // Prints \"dropped!\"\n```","links":{"`Weak`":"0:5533:7157"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3219:2753":{"id":"0:3219:2753","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1578,4],"end":[1580,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4666:595":{"id":"0:4666:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/rc.rs","begin":[1717,4],"end":[1719,5]},"visibility":"default","docs":"Equality for two `Rc`s.\n\nTwo `Rc`s are equal if their inner values are equal, even if they are\nstored in different allocation.\n\nIf `T` also implements `Eq` (implying reflexivity of equality),\ntwo `Rc`s that point to the same allocation are\nalways equal.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nassert!(five == Rc::new(5));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:455:2731":{"id":"0:455:2731","crate_id":0,"name":"downcast","span":{"filename":"library/alloc/src/boxed.rs","begin":[1774,4],"end":[1776,5]},"visibility":"public","docs":"Attempt to downcast the box to a concrete type.\n\n# Examples\n\n```\nuse std::any::Any;\n\nfn print_if_string(value: Box<dyn Any + Send>) {\n    if let Ok(string) = value.downcast::<String>() {\n        println!(\"String ({}): {}\", string.len(), string);\n    }\n}\n\nlet my_string = \"Hello World\".to_string();\nprint_if_string(Box::new(my_string));\nprint_if_string(Box::new(0i8));\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:6897:102":{"id":"b:1:2505-0:6897:102","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3104":{"id":"0:3104","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1303,0],"end":[1310,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3096:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3108:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3634":{"id":"0:3634","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1938,0],"end":[1942,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3636:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:519:782":{"id":"0:519:782","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/boxed.rs","begin":[1972,4],"end":[1974,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4443":{"id":"0:4443","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[567,20],"end":[567,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::DebugList","name":"DebugList","id":"1:8379:6923","glob":false}},"0:3080:668":{"id":"0:3080:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1240,4],"end":[1250,5]},"visibility":"default","docs":"Converts a `[T; N]` into a `BTreeSet<T>`.\n\n```\nuse std::collections::BTreeSet;\n\nlet set1 = BTreeSet::from([1, 2, 3, 4]);\nlet set2: BTreeSet<_> = [1, 2, 3, 4].into();\nassert_eq!(set1, set2);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["arr",{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11379:13659":{"id":"1:11379:13659","crate_id":1,"name":"rsplitn","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1637,4],"end":[1639,54]},"visibility":"public","docs":"An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```","links":{"self::pattern":"1:11013:1760","prim@char":"1:58430:10458","str::splitn":"1:11376:13671"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitN","id":"1:50087:7701","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11033:7919","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4722":{"id":"0:4722","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2073,0],"end":[2115,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_iter\", since = \"1.37.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7012:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"items":["0:4724:670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:435":{"id":"0:435","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1641,0],"end":[1660,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"boxed_slice_try_from\", since = \"1.43.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}}],"bindings":[]}}}},"items":["0:439:126","0:440:1418"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7710:3767-0:6740:3364":{"id":"a:1:7710:3767-0:6740:3364","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3617:1746":{"id":"0:3617:1746","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1883,4],"end":[1885,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["elem",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5597:7249":{"id":"0:5597:7249","crate_id":0,"name":"downgrade","span":{"filename":"library/alloc/src/sync.rs","begin":[949,4],"end":[978,5]},"visibility":"public","docs":"Creates a new [`Weak`] pointer to this allocation.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nlet weak_five = Arc::downgrade(&five);\n```","links":{"`Weak`":"0:5533:7157"},"attrs":["#[must_use =\n\"this returns a new `Weak` pointer, \\\n                  without modifying the original `Arc`\"]","#[stable(feature = \"arc_weak\", since = \"1.4.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5322:180":{"id":"0:5322:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/string.rs","begin":[2358,4],"end":[2358,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"str"}}},"0:3523:5331":{"id":"0:3523:5331","crate_id":0,"name":"push_front","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1576,4],"end":[1582,5]},"visibility":"public","docs":"Appends an element to the front of the cursor's parent list. The node\nthat the cursor points to is unchanged, even if it is the \"ghost\" node.\n\nThis operation should compute in *O*(1) time.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["elt",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:384":{"id":"0:384","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1387,0],"end":[1436,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"indirect_hasher_impl\", since = \"1.22.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Hasher","id":"1:8805:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["write_i8","write_u64","write_u8","write_str","write_i128","write_i16","write_u128","write_u16","write_isize","write_i32","write_usize","write_u32","write_length_prefix","write_i64"],"trait":{"name":"Hasher","id":"1:8805:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:387:2633","0:388:2221","0:389:2634","0:390:2635","0:391:2636","0:392:2637","0:393:2638","0:394:2639","0:395:2640","0:396:2641","0:397:2642","0:398:2643","0:399:2644","0:400:2645","0:401:2646","0:402:1536"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4092:3422":{"id":"0:4092:3422","crate_id":0,"name":"shrink_to","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[937,4],"end":[1004,5]},"visibility":"public","docs":"Shrinks the capacity of the deque with a lower bound.\n\nThe capacity will remain at least as large as both the length\nand the supplied value.\n\nIf the current capacity is less than the lower limit, this is a no-op.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::with_capacity(15);\nbuf.extend(0..4);\nassert_eq!(buf.capacity(), 15);\nbuf.shrink_to(6);\nassert!(buf.capacity() >= 6);\nbuf.shrink_to(0);\nassert!(buf.capacity() >= 4);\n```","links":{},"attrs":["#[stable(feature = \"shrink_to\", since = \"1.56.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["min_capacity",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:0:5362-0:5513:69":{"id":"b:0:5362-0:5513:69","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2526,0],"end":[2540,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5360:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5364:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4189":{"id":"0:4189","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2720,0],"end":[2727,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:2969:3662","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:4192:180","0:4193:742"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2510-0:1185:3669":{"id":"b:1:2510-0:1185:3669","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:1185:3669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4592:7357":{"id":"0:4592:7357","crate_id":0,"name":"make_mut","span":{"filename":"library/alloc/src/rc.rs","begin":[1229,4],"end":[1259,5]},"visibility":"public","docs":"Makes a mutable reference into the given `Rc`.\n\nIf there are other `Rc` pointers to the same allocation, then `make_mut` will\n[`clone`] the inner value to a new allocation to ensure unique ownership.  This is also\nreferred to as clone-on-write.\n\nHowever, if there are no other `Rc` pointers to this allocation, but some [`Weak`]\npointers, then the [`Weak`] pointers will be disassociated and the inner value will not\nbe cloned.\n\nSee also [`get_mut`], which will fail rather than cloning the inner value\nor disassociating [`Weak`] pointers.\n\n[`clone`]: Clone::clone\n[`get_mut`]: Rc::get_mut\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet mut data = Rc::new(5);\n\n*Rc::make_mut(&mut data) += 1;         // Won't clone anything\nlet mut other_data = Rc::clone(&data); // Won't clone inner data\n*Rc::make_mut(&mut data) += 1;         // Clones inner data\n*Rc::make_mut(&mut data) += 1;         // Won't clone anything\n*Rc::make_mut(&mut other_data) *= 2;   // Won't clone anything\n\n// Now `data` and `other_data` point to different allocations.\nassert_eq!(*data, 8);\nassert_eq!(*other_data, 12);\n```\n\n[`Weak`] pointers will be disassociated:\n\n```\nuse std::rc::Rc;\n\nlet mut data = Rc::new(75);\nlet weak = Rc::downgrade(&data);\n\nassert!(75 == *data);\nassert!(75 == *weak.upgrade().unwrap());\n\n*Rc::make_mut(&mut data) += 1;\n\nassert!(76 == *data);\nassert!(weak.upgrade().is_none());\n```","links":{"`Weak`":"0:4737:7157","Clone::clone":"1:2234:409","Rc::get_mut":"0:4587:3929"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rc_unique\", since = \"1.4.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1237":{"id":"0:1237","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[111,0],"end":[119,1]},"visibility":{"restricted":{"parent":"0:1169:3668","path":"::collections::btree::map::entry"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"map_try_insert\", issue = \"82766\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedError","id":"0:1230:3671","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1241:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2219-0:6822:3475":{"id":"b:1:2219-0:6822:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2495-0:3531:4069":{"id":"b:1:2495-0:3531:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3531:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5233:2822":{"id":"0:5233:2822","crate_id":0,"name":"description","span":{"filename":"library/alloc/src/string.rs","begin":[1975,4],"end":[1977,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:1376:3816":{"id":"b:1:2505-0:1376:3816","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:1376:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3303-0:1348:3805":{"id":"b:1:3303-0:1348:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:1348:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3269":{"id":"0:3269","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1761,0],"end":[1761,78]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:2978:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4114:4017":{"id":"0:4114:4017","crate_id":0,"name":"range_mut","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1320,4],"end":[1332,5]},"visibility":"public","docs":"Creates an iterator that covers the specified mutable range in the deque.\n\n# Panics\n\nPanics if the starting point is greater than the end point or if\nthe end point is greater than the length of the deque.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque: VecDeque<_> = [1, 2, 3].into();\nfor v in deque.range_mut(2..) {\n  *v *= 2;\n}\nassert_eq!(deque, [1, 2, 6]);\n\n// A full range covers all contents\nfor v in deque.range_mut(..) {\n  *v *= 2;\n}\nassert_eq!(deque, [2, 4, 12]);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"deque_range\", since = \"1.51.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["range",{"kind":"generic","inner":"R"}]],"output":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3066:3663","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6684":{"id":"0:6684","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3100,0],"end":[3104,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"vec_as_mut\", since = \"1.5.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2466:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6687:2784"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3665":{"id":"0:3665","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2000,0],"end":[2000,47]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3352:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5419":{"id":"0:5419","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2840,0],"end":[2858,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"from_string_for_vec_u8\", since = \"1.14.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"items":["0:5420:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:892:2751":{"id":"0:892:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1391,4],"end":[1393,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:896":{"id":"0:896","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1405,0],"end":[1409,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:898:2762"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2505-0:7002:8296":{"id":"b:1:2505-0:7002:8296","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf16Error","id":"0:7002:8296","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:7005":{"id":"0:7005","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[429,9],"end":[429,14]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf16Error","id":"0:7002:8296","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7006:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1564":{"id":"0:1564","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1600,0],"end":[1600,49]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:1348:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4183":{"id":"0:4183","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2706,0],"end":[2717,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:8791:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:8791:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:4186:702"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3303-0:6787:192":{"id":"b:1:3303-0:6787:192","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:6787:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7709:3766-0:215:2341":{"id":"a:1:7709:3766-0:215:2341","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1734:921":{"id":"0:1734:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1931,4],"end":[1933,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5332:742":{"id":"0:5332:742","crate_id":0,"name":"index","span":{"filename":"library/alloc/src/string.rs","begin":[2388,4],"end":[2390,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["_index",{"kind":"resolved_path","inner":{"name":"ops::RangeFull","id":"1:46305:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:3723:3449":{"id":"b:1:2216-0:3723:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:3723:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2499-0:6980:218":{"id":"b:1:2499-0:6980:218","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1712:2750":{"id":"0:1712:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1869,4],"end":[1869,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}},"0:1868":{"id":"0:1868","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2161,0],"end":[2166,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1871:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:423":{"id":"0:423","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1607,0],"end":[1622,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_from_array\", since = \"1.45.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"items":["0:427:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5169:8399":{"id":"0:5169:8399","crate_id":0,"name":"from_utf16_lossy","span":{"filename":"library/alloc/src/string.rs","begin":[724,4],"end":[726,5]},"visibility":"public","docs":"Decode a UTF-16–encoded slice `v` into a `String`, replacing\ninvalid data with [the replacement character (`U+FFFD`)][U+FFFD].\n\nUnlike [`from_utf8_lossy`] which returns a [`Cow<'a, str>`],\n`from_utf16_lossy` returns a `String` since the UTF-16 to UTF-8\nconversion requires a memory allocation.\n\n[`from_utf8_lossy`]: String::from_utf8_lossy\n[`Cow<'a, str>`]: crate::borrow::Cow \"borrow::Cow\"\n[U+FFFD]: core::char::REPLACEMENT_CHARACTER\n\n# Examples\n\nBasic usage:\n\n```\n// 𝄞mus<invalid>ic<invalid>\nlet v = &[0xD834, 0xDD1E, 0x006d, 0x0075,\n          0x0073, 0xDD1E, 0x0069, 0x0063,\n          0xD834];\n\nassert_eq!(String::from(\"𝄞mus\\u{FFFD}ic\\u{FFFD}\"),\n           String::from_utf16_lossy(v));\n```","links":{"String::from_utf8_lossy":"0:5166:6537","core::char::REPLACEMENT_CHARACTER":"1:4512:8111","crate::borrow::Cow":"0:676:109"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:6816:3475":{"id":"a:1:2708:2329-0:6816:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2510-0:5533:7157":{"id":"b:1:2510-0:5533:7157","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5168:8387":{"id":"0:5168:8387","crate_id":0,"name":"from_utf16","span":{"filename":"library/alloc/src/string.rs","begin":[682,4],"end":[694,5]},"visibility":"public","docs":"Decode a UTF-16–encoded vector `v` into a `String`, returning [`Err`]\nif `v` contains any invalid data.\n\n# Examples\n\nBasic usage:\n\n```\n// 𝄞music\nlet v = &[0xD834, 0xDD1E, 0x006d, 0x0075,\n          0x0073, 0x0069, 0x0063];\nassert_eq!(String::from(\"𝄞music\"),\n           String::from_utf16(v).unwrap());\n\n// 𝄞mu<invalid>ic\nlet v = &[0xD834, 0xDD1E, 0x006d, 0x0075,\n          0xD800, 0x0069, 0x0063];\nassert!(String::from_utf16(v).is_err());\n```","links":{"`Err`":"1:48147:125"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u16"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"FromUtf16Error","id":"0:7002:8296","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:768:96":{"id":"b:1:2499-0:768:96","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2644:214-0:6991:8288":{"id":"a:1:2644:214-0:6991:8288","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:2978:4931":{"id":"0:2978:4931","crate_id":0,"name":"Intersection","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[261,0],"end":[267,1]},"visibility":"public","docs":"A lazy iterator producing elements in the intersection of `BTreeSet`s.\n\nThis `struct` is created by the [`intersection`] method on [`BTreeSet`].\nSee its documentation for more.\n\n[`intersection`]: BTreeSet::intersection","links":{"BTreeSet::intersection":"0:3027:4981","`BTreeSet`":"0:2908:95"},"attrs":["#[must_use =\n\"this returns the intersection as an iterator, \\\n              without modifying either input set\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:2978:4931","a:1:2644:214-0:2978:4931","a:1:2708:2329-0:2978:4931","a:1:7709:3766-0:2978:4931","a:1:7710:3767-0:2978:4931","b:0:671-0:2978:4931","b:1:7020-0:2978:4931","b:1:2510-0:2978:4931","b:1:2505-0:2978:4931","b:1:2216-0:2978:4931","b:1:3303-0:2978:4931","b:1:2219-0:2978:4931","b:1:2499-0:2978:4931","b:1:2495-0:2978:4931","0:3000","0:3257","0:3261","0:3269"]}},"0:5645:536":{"id":"0:5645:536","crate_id":0,"name":"deref","span":{"filename":"library/alloc/src/sync.rs","begin":[1390,4],"end":[1392,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4640":{"id":"0:4640","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1562,0],"end":[1605,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4642:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:379":{"id":"0:379","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1380,0],"end":[1384,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:8791:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:8791:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:382:702"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:396:2641":{"id":"0:396:2641","crate_id":0,"name":"write_i16","span":{"filename":"library/alloc/src/boxed.rs","begin":[1415,4],"end":[1417,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"i16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6490:3231":{"id":"0:6490:3231","crate_id":0,"name":"pop","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1906,4],"end":[1915,5]},"visibility":"public","docs":"Removes the last element from a vector and returns it, or [`None`] if it\nis empty.\n\nIf you'd like to pop the first element, consider using\n[`VecDeque::pop_front`] instead.\n\n[`VecDeque::pop_front`]: crate::collections::VecDeque::pop_front\n\n# Examples\n\n```\nlet mut vec = vec![1, 2, 3];\nassert_eq!(vec.pop(), Some(3));\nassert_eq!(vec, [1, 2]);\n```","links":{"`None`":"1:47999:173","crate::collections::VecDeque::pop_front":"0:4124:5339"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:685":{"id":"0:685","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[193,0],"end":[210,1]},"visibility":{"restricted":{"parent":"0:648:1793","path":"::borrow"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["0:687:409","0:688:411"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2708:2329-0:7002:8296":{"id":"a:1:2708:2329-0:7002:8296","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf16Error","id":"0:7002:8296","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2495-0:4016:238":{"id":"b:1:2495-0:4016:238","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1839":{"id":"0:1839","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2107,0],"end":[2119,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7012:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1842:670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1441":{"id":"0:1441","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[558,0],"end":[563,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangeMut","id":"0:1435:3845","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1444:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5299:8711":{"id":"0:5299:8711","crate_id":0,"name":"is_prefix_of","span":{"filename":"library/alloc/src/string.rs","begin":[2190,4],"end":[2192,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:1680:4069":{"id":"a:1:7710:3767-0:1680:4069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:1680:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:3303-0:1359:3475":{"id":"b:1:3303-0:1359:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1359:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4915:7781":{"id":"0:4915:7781","crate_id":0,"name":"sort_by_cached_key","span":{"filename":"library/alloc/src/slice.rs","begin":[347,4],"end":[391,5]},"visibility":"public","docs":"Sorts the slice with a key extraction function.\n\nDuring sorting, the key function is called at most once per element, by using\ntemporary storage to remember the results of key evaluation.\nThe order of calls to the key function is unspecified and may change in future versions\nof the standard library.\n\nThis sort is stable (i.e., does not reorder equal elements) and *O*(*m* \\* *n* + *n* \\* log(*n*))\nworst-case, where the key function is *O*(*m*).\n\nFor simple key functions (e.g., functions that are property accesses or\nbasic operations), [`sort_by_key`](slice::sort_by_key) is likely to be\nfaster.\n\n# Current implementation\n\nThe current algorithm is based on [pattern-defeating quicksort][pdqsort] by Orson Peters,\nwhich combines the fast average case of randomized quicksort with the fast worst case of\nheapsort, while achieving linear time on slices with certain patterns. It uses some\nrandomization to avoid degenerate cases, but with a fixed seed to always provide\ndeterministic behavior.\n\nIn the worst case, the algorithm allocates temporary storage in a `Vec<(K, usize)>` the\nlength of the slice.\n\n# Examples\n\n```\nlet mut v = [-5i32, 4, 32, -3, 2];\n\nv.sort_by_cached_key(|k| k.to_string());\nassert!(v == [-3, -5, 2, 32, 4]);\n```\n\n[pdqsort]: https://github.com/orlp/pdqsort","links":{"slice::sort_by_key":"0:4911:7759"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[stable(feature = \"slice_sort_by_cached_key\", since = \"1.34.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"generic","inner":"K"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:405:668":{"id":"0:405:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1454,4],"end":[1456,5]},"visibility":"default","docs":"Converts a `T` into a `Box<T>`\n\nThe conversion allocates on the heap and moves `t`\nfrom the stack into it.\n\n# Examples\n\n```rust\nlet x = 5;\nlet boxed = Box::new(5);\n\nassert_eq!(Box::from(x), boxed);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5235:2822":{"id":"0:5235:2822","crate_id":0,"name":"description","span":{"filename":"library/alloc/src/string.rs","begin":[1983,4],"end":[1985,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:1376:3816":{"id":"a:1:2708:2329-0:1376:3816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:1376:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5746:668":{"id":"0:5746:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/sync.rs","begin":[2532,4],"end":[2534,5]},"visibility":"default","docs":"Allocate a reference-counted slice and fill it by cloning `v`'s items.\n\n# Example\n\n```\n# use std::sync::Arc;\nlet original: &[i32] = &[1, 2, 3];\nlet shared: Arc<[i32]> = Arc::from(original);\nassert_eq!(&[1, 2, 3], &shared[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3013":{"id":"0:3013","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[332,0],"end":[351,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3015:908"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2708:2329-0:6725:1970":{"id":"a:1:2708:2329-0:6725:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:7709:3766-0:3328:157":{"id":"a:1:7709:3766-0:3328:157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1661:2751":{"id":"0:1661:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1779,4],"end":[1781,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:1426:192":{"id":"b:1:2219-0:1426:192","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:1426:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6504:7711":{"id":"0:6504:7711","crate_id":0,"name":"spare_capacity_mut","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2236,4],"end":[2246,5]},"visibility":"public","docs":"Returns the remaining spare capacity of the vector as a slice of\n`MaybeUninit<T>`.\n\nThe returned slice can be used to fill the vector with data (e.g. by\nreading from a file) before marking the data as initialized using the\n[`set_len`] method.\n\n[`set_len`]: Vec::set_len\n\n# Examples\n\n```\n// Allocate vector big enough for 10 elements.\nlet mut v = Vec::with_capacity(10);\n\n// Fill in the first 3 elements.\nlet uninit = v.spare_capacity_mut();\nuninit[0].write(0);\nuninit[1].write(1);\nuninit[2].write(2);\n\n// Mark the first 3 elements of the vector as being initialized.\nunsafe {\n    v.set_len(3);\n}\n\nassert_eq!(&v, &[0, 1, 2]);\n```","links":{"Vec::set_len":"0:6439:7494"},"attrs":["#[stable(feature = \"vec_spare_capacity\", since = \"1.60.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1610:2751":{"id":"0:1610:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1699,4],"end":[1701,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5526":{"id":"0:5526","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[261,0],"end":[261,76]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Unsize","id":"1:2652:2330","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DispatchFromDyn","id":"1:3218:2333","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:594":{"id":"0:594","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2129,0],"end":[2139,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"async_iterator\", issue = \"79024\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"AsyncIterator","id":"1:3985:2324","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["size_hint"],"trait":{"name":"AsyncIterator","id":"1:3985:2324","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"S"}}],"bindings":[]}}}},"items":["0:596:2750","0:597:2793","0:598:2751"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:0:671-0:6914:6204":{"id":"b:0:671-0:6914:6204","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:11612-0:276:1792":{"id":"b:1:11612-0:276:1792","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/future/into_future.rs","begin":[132,0],"end":[132,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Future","id":"1:11595:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoFuture","id":"1:11608:10704","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:11614:180","1:11615:10704","1:11616:756"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"F"}}},"0:4434":{"id":"0:4434","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[561,27],"end":[561,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::ArgumentV1","name":"ArgumentV1","id":"1:49061:71","glob":false}},"0:1903:742":{"id":"0:1903:742","crate_id":0,"name":"index","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2215,4],"end":[2217,5]},"visibility":"default","docs":"Returns a reference to the value corresponding to the supplied key.\n\n# Panics\n\nPanics if the key is not present in the `BTreeMap`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1663":{"id":"0:1663","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1789,0],"end":[1793,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:1385:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1667:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2970:4926":{"id":"0:2970:4926","crate_id":0,"name":"SymmetricDifference","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[243,0],"end":[243,71]},"visibility":"public","docs":"A lazy iterator producing elements in the symmetric difference of `BTreeSet`s.\n\nThis `struct` is created by the [`symmetric_difference`] method on\n[`BTreeSet`]. See its documentation for more.\n\n[`symmetric_difference`]: BTreeSet::symmetric_difference","links":{"`BTreeSet`":"0:2908:95","BTreeSet::symmetric_difference":"0:3025:4976"},"attrs":["#[must_use =\n\"this returns the difference as an iterator, \\\n              without modifying either input set\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:2970:4926","a:1:2644:214-0:2970:4926","a:1:2708:2329-0:2970:4926","a:1:7709:3766-0:2970:4926","a:1:7710:3767-0:2970:4926","b:0:671-0:2970:4926","b:1:7020-0:2970:4926","b:1:2510-0:2970:4926","b:1:2505-0:2970:4926","b:1:2216-0:2970:4926","b:1:3303-0:2970:4926","b:1:2219-0:2970:4926","b:1:2499-0:2970:4926","b:1:2495-0:2970:4926","0:2975","0:3245","0:3248","0:3255"]}},"0:6756:650":{"id":"0:6756:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1478,9],"end":[1478,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3093:2750":{"id":"0:3093:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1277,4],"end":[1277,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"b:0:5362-0:676:109":{"id":"b:0:5362-0:676:109","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2526,0],"end":[2540,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5360:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["0:5364:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3874":{"id":"0:3874","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[58,0],"end":[63,1]},"visibility":{"restricted":{"parent":"0:3850:757","path":"::collections::vec_deque::into_iter"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3877:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2216-0:6957:6203":{"id":"b:1:2216-0:6957:6203","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3922:2751":{"id":"0:3922:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[68,4],"end":[71,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4263":{"id":"0:4263","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[53,0],"end":[53,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"vec_deque::VecDeque","name":"VecDeque","id":"0:4016:238","glob":false}},"0:5319":{"id":"0:5319","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2349,0],"end":[2354,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":"Implements the `+=` operator for appending to a `String`.\n\nThis has the same behavior as the [`push_str`][String::push_str] method.","links":{"String::push_str":"0:5177:3005"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"stringaddassign\", since = \"1.12.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"1:2766:2888","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5320:268"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1193:3943":{"id":"0:1193:3943","crate_id":0,"name":"Occupied","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[32,4],"end":[32,86]},"visibility":"default","docs":"An occupied entry.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:1195:1545"]}},"b:0:671-0:6740:3364":{"id":"b:0:671-0:6740:3364","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4766:7257":{"id":"0:4766:7257","crate_id":0,"name":"weak_count","span":{"filename":"library/alloc/src/rc.rs","begin":[2425,4],"end":[2435,5]},"visibility":"public","docs":"Gets the number of `Weak` pointers pointing to this allocation.\n\nIf no strong pointers remain, this will return zero.","links":{},"attrs":["#[must_use]","#[stable(feature = \"weak_counts\", since = \"1.41.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:832:2105":{"id":"0:832:2105","crate_id":0,"name":"try_reserve_exact","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1005,4],"end":[1007,5]},"visibility":"public","docs":"Tries to reserve the minimum capacity for at least `additional` elements\nmore than the current length. Unlike [`try_reserve`], this will not\ndeliberately over-allocate to speculatively avoid frequent allocations.\nAfter calling `try_reserve_exact`, capacity will be greater than or\nequal to `self.len() + additional` if it returns `Ok(())`.\nDoes nothing if the capacity is already sufficient.\n\nNote that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer [`try_reserve`] if future insertions are expected.\n\n[`try_reserve`]: BinaryHeap::try_reserve\n\n# Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse std::collections::BinaryHeap;\nuse std::collections::TryReserveError;\n\nfn find_max_slow(data: &[u32]) -> Result<Option<u32>, TryReserveError> {\n    let mut heap = BinaryHeap::new();\n\n    // Pre-reserve the memory, exiting if we can't\n    heap.try_reserve_exact(data.len())?;\n\n    // Now we know this can't OOM in the middle of our complex work\n    heap.extend(data.iter());\n\n    Ok(heap.pop())\n}\n# find_max_slow(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n```","links":{"BinaryHeap::try_reserve":"0:833:2097"},"attrs":["#[stable(feature = \"try_reserve_2\", since = \"1.63.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6154":{"id":"0:6154","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[385,0],"end":[407,1]},"visibility":{"restricted":{"parent":"0:6056:757","path":"::vec::into_iter"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6157:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4430":{"id":"0:4430","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[557,0],"end":[557,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::Alignment","name":"Alignment","id":"1:48976:67","glob":false}},"0:5370":{"id":"0:5370","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2573,0],"end":[2592,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"i8_to_string_specialization\", since = \"1.54.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5360:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"i8"},"items":["0:5371:1398"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2644:214-0:1376:3816":{"id":"a:1:2644:214-0:1376:3816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:1376:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1743:921":{"id":"0:1743:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1952,4],"end":[1954,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4336:6299":{"id":"0:4336:6299","crate_id":0,"name":"into_bytes","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[497,4],"end":[502,5]},"visibility":"public","docs":"Consumes the `CString` and returns the underlying byte buffer.\n\nThe returned buffer does **not** contain the trailing nul\nterminator, and it is guaranteed to not have any interior nul\nbytes.\n\n# Examples\n\n```\nuse std::ffi::CString;\n\nlet c_string = CString::new(\"foo\").expect(\"CString::new failed\");\nlet bytes = c_string.into_bytes();\nassert_eq!(bytes, vec![b'f', b'o', b'o']);\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"cstring_into\", since = \"1.7.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7228":{"id":"0:7228","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[25,0],"end":[25,103]},"visibility":{"restricted":{"parent":"0:6257:9314","path":"::vec::partial_eq"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"U"}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:7232:595","0:7233:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5314:702":{"id":"0:5314:702","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/string.rs","begin":[2290,4],"end":[2292,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["hasher",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"hash::Hasher","id":"1:8805:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5055":{"id":"0:5055","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[47,29],"end":[47,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::RMatches","name":"RMatches","id":"1:50187:7945","glob":false}},"1:11420:40326":{"id":"1:11420:40326","crate_id":1,"name":"trim_end_matches","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[2211,4],"end":[2213,54]},"visibility":"public","docs":"Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```","links":{"self::pattern":"1:11013:1760","prim@char":"1:58430:10458"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11033:7919","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:4521:198":{"id":"b:1:2510-0:4521:198","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4281":{"id":"0:4281","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/mod.rs","begin":[84,0],"end":[84,41]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"self::c_str::FromVecWithNulError","name":"FromVecWithNulError","id":"0:6944:6202","glob":false}},"0:3150:1359":{"id":"0:3150:1359","crate_id":0,"name":"sub","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1399,4],"end":[1404,5]},"visibility":"default","docs":"Returns the difference of `self` and `rhs` as a new `BTreeSet<T>`.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet a = BTreeSet::from([1, 2, 3]);\nlet b = BTreeSet::from([3, 4, 5]);\n\nlet result = &a - &b;\nassert_eq!(result, BTreeSet::from([1, 2]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4208":{"id":"0:4208","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2757,0],"end":[2764,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"items":["0:4212:2750","0:4213:3475","0:4214:757"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5882:283":{"id":"0:5882:283","crate_id":0,"name":"allocator","span":{"filename":"library/alloc/src/vec/drain_filter.rs","begin":[55,4],"end":[57,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1576:2750":{"id":"0:1576:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1612,4],"end":[1612,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}},"0:1554:2120":{"id":"0:1554:2120","crate_id":0,"name":"max","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1575,4],"end":[1577,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3436":{"id":"0:3436","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1055,0],"end":[1070,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3439:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:586:240":{"id":"0:586:240","crate_id":0,"name":"Yield","span":{"filename":"library/alloc/src/boxed.rs","begin":[2108,4],"end":[2108,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Yield","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"G"},"trait":{"name":"Generator","id":"1:2951:2334","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}}},"0:689":{"id":"0:689","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[212,0],"end":[328,1]},"visibility":{"restricted":{"parent":"0:648:1793","path":"::borrow"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["0:691:2972","0:692:2978","0:693:2987","0:694:2999"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5278":{"id":"0:5278","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2133,0],"end":[2137,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_str2\", since = \"1.45.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7025:3507","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5279:2885"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2708:2329-0:1426:192":{"id":"a:1:2708:2329-0:1426:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:1426:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6947":{"id":"0:6947","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[159,9],"end":[159,14]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6948:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2495-0:6957:6203":{"id":"b:1:2495-0:6957:6203","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3027:4981":{"id":"0:3027:4981","crate_id":0,"name":"intersection","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[522,4],"end":[552,5]},"visibility":"public","docs":"Visits the elements representing the intersection,\ni.e., the elements that are both in `self` and `other`,\nin ascending order.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut a = BTreeSet::new();\na.insert(1);\na.insert(2);\n\nlet mut b = BTreeSet::new();\nb.insert(2);\nb.insert(3);\n\nlet intersection: Vec<_> = a.intersection(&b).cloned().collect();\nassert_eq!(intersection, [2]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:2978:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:495:2752":{"id":"0:495:2752","crate_id":0,"name":"nth","span":{"filename":"library/alloc/src/boxed.rs","begin":[1927,4],"end":[1929,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"1:7130:154","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:6957:6203":{"id":"a:1:7709:3766-0:6957:6203","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3637":{"id":"0:3637","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1945,0],"end":[1952,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:8791:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:8791:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3639:702"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11370:14024":{"id":"1:11370:14024","crate_id":1,"name":"split_terminator","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1487,4],"end":[1487,91]},"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```","links":{"self::pattern":"1:11013:1760","str::split":"1:11361:3524","`DoubleEndedIterator`":"1:7053:119","str::rsplit_terminator":"1:11373:14020","prim@char":"1:58430:10458"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitTerminator","id":"1:50015:7947","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:6822:3475":{"id":"a:1:2644:214-0:6822:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5382":{"id":"0:5382","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2638,0],"end":[2643,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2463:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5383:307"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6853":{"id":"0:6853","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2687,0],"end":[2687,63]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"vec_deque_partial_eq_slice\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"U"},"len":"N"}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6859:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3135:1746":{"id":"0:3135:1746","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1357,4],"end":[1359,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["elem",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:6407:237":{"id":"a:1:2644:214-0:6407:237","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5513:69":{"id":"0:5513:69","crate_id":0,"name":"Arc","span":{"filename":"library/alloc/src/sync.rs","begin":[244,0],"end":[247,1]},"visibility":"public","docs":"A thread-safe reference-counting pointer. 'Arc' stands for 'Atomically\nReference Counted'.\n\nThe type `Arc<T>` provides shared ownership of a value of type `T`,\nallocated in the heap. Invoking [`clone`][clone] on `Arc` produces\na new `Arc` instance, which points to the same allocation on the heap as the\nsource `Arc`, while increasing a reference count. When the last `Arc`\npointer to a given allocation is destroyed, the value stored in that allocation (often\nreferred to as \"inner value\") is also dropped.\n\nShared references in Rust disallow mutation by default, and `Arc` is no\nexception: you cannot generally obtain a mutable reference to something\ninside an `Arc`. If you need to mutate through an `Arc`, use\n[`Mutex`][mutex], [`RwLock`][rwlock], or one of the [`Atomic`][atomic]\ntypes.\n\n**Note**: This type is only available on platforms that support atomic\nloads and stores of pointers, which includes all platforms that support\nthe `std` crate but not all those which only support [`alloc`](crate).\nThis may be detected at compile time using `#[cfg(target_has_atomic = \"ptr\")]`.\n\n## Thread Safety\n\nUnlike [`Rc<T>`], `Arc<T>` uses atomic operations for its reference\ncounting. This means that it is thread-safe. The disadvantage is that\natomic operations are more expensive than ordinary memory accesses. If you\nare not sharing reference-counted allocations between threads, consider using\n[`Rc<T>`] for lower overhead. [`Rc<T>`] is a safe default, because the\ncompiler will catch any attempt to send an [`Rc<T>`] between threads.\nHowever, a library might choose `Arc<T>` in order to give library consumers\nmore flexibility.\n\n`Arc<T>` will implement [`Send`] and [`Sync`] as long as the `T` implements\n[`Send`] and [`Sync`]. Why can't you put a non-thread-safe type `T` in an\n`Arc<T>` to make it thread-safe? This may be a bit counter-intuitive at\nfirst: after all, isn't the point of `Arc<T>` thread safety? The key is\nthis: `Arc<T>` makes it thread safe to have multiple ownership of the same\ndata, but it  doesn't add thread safety to its data. Consider\n<code>Arc<[RefCell\\<T>]></code>. [`RefCell<T>`] isn't [`Sync`], and if `Arc<T>` was always\n[`Send`], <code>Arc<[RefCell\\<T>]></code> would be as well. But then we'd have a problem:\n[`RefCell<T>`] is not thread safe; it keeps track of the borrowing count using\nnon-atomic operations.\n\nIn the end, this means that you may need to pair `Arc<T>` with some sort of\n[`std::sync`] type, usually [`Mutex<T>`][mutex].\n\n## Breaking cycles with `Weak`\n\nThe [`downgrade`][downgrade] method can be used to create a non-owning\n[`Weak`] pointer. A [`Weak`] pointer can be [`upgrade`][upgrade]d\nto an `Arc`, but this will return [`None`] if the value stored in the allocation has\nalready been dropped. In other words, `Weak` pointers do not keep the value\ninside the allocation alive; however, they *do* keep the allocation\n(the backing store for the value) alive.\n\nA cycle between `Arc` pointers will never be deallocated. For this reason,\n[`Weak`] is used to break cycles. For example, a tree could have\nstrong `Arc` pointers from parent nodes to children, and [`Weak`]\npointers from children back to their parents.\n\n# Cloning references\n\nCreating a new reference from an existing reference-counted pointer is done using the\n`Clone` trait implemented for [`Arc<T>`][Arc] and [`Weak<T>`][Weak].\n\n```\nuse std::sync::Arc;\nlet foo = Arc::new(vec![1.0, 2.0, 3.0]);\n// The two syntaxes below are equivalent.\nlet a = foo.clone();\nlet b = Arc::clone(&foo);\n// a, b, and foo are all Arcs that point to the same memory location\n```\n\n## `Deref` behavior\n\n`Arc<T>` automatically dereferences to `T` (via the [`Deref`][deref] trait),\nso you can call `T`'s methods on a value of type `Arc<T>`. To avoid name\nclashes with `T`'s methods, the methods of `Arc<T>` itself are associated\nfunctions, called using [fully qualified syntax]:\n\n```\nuse std::sync::Arc;\n\nlet my_arc = Arc::new(());\nlet my_weak = Arc::downgrade(&my_arc);\n```\n\n`Arc<T>`'s implementations of traits like `Clone` may also be called using\nfully qualified syntax. Some people prefer to use fully qualified syntax,\nwhile others prefer using method-call syntax.\n\n```\nuse std::sync::Arc;\n\nlet arc = Arc::new(());\n// Method-call syntax\nlet arc2 = arc.clone();\n// Fully qualified syntax\nlet arc3 = Arc::clone(&arc);\n```\n\n[`Weak<T>`][Weak] does not auto-dereference to `T`, because the inner value may have\nalready been dropped.\n\n[`Rc<T>`]: crate::rc::Rc\n[clone]: Clone::clone\n[mutex]: ../../std/sync/struct.Mutex.html\n[rwlock]: ../../std/sync/struct.RwLock.html\n[atomic]: core::sync::atomic\n[`Send`]: core::marker::Send\n[`Sync`]: core::marker::Sync\n[deref]: core::ops::Deref\n[downgrade]: Arc::downgrade\n[upgrade]: Weak::upgrade\n[RefCell\\<T>]: core::cell::RefCell\n[`RefCell<T>`]: core::cell::RefCell\n[`std::sync`]: ../../std/sync/index.html\n[`Arc::clone(&from)`]: Arc::clone\n[fully qualified syntax]: https://doc.rust-lang.org/book/ch19-03-advanced-traits.html#fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name\n\n# Examples\n\nSharing some immutable data between threads:\n\n```no_run\nuse std::sync::Arc;\nuse std::thread;\n\nlet five = Arc::new(5);\n\nfor _ in 0..10 {\n    let five = Arc::clone(&five);\n\n    thread::spawn(move || {\n        println!(\"{five:?}\");\n    });\n}\n```\n\nSharing a mutable [`AtomicUsize`]:\n\n[`AtomicUsize`]: core::sync::atomic::AtomicUsize \"sync::atomic::AtomicUsize\"\n\n```no_run\nuse std::sync::Arc;\nuse std::sync::atomic::{AtomicUsize, Ordering};\nuse std::thread;\n\nlet val = Arc::new(AtomicUsize::new(5));\n\nfor _ in 0..10 {\n    let val = Arc::clone(&val);\n\n    thread::spawn(move || {\n        let v = val.fetch_add(1, Ordering::SeqCst);\n        println!(\"{v:?}\");\n    });\n}\n```\n\nSee the [`rc` documentation][rc_examples] for more examples of reference\ncounting in general.\n\n[rc_examples]: crate::rc#examples","links":{"core::marker::Send":"1:2644:214","core::ops::Deref":"1:2886:115","`None`":"1:47999:173","Weak":"0:5533:7157","Arc::downgrade":"0:5597:7249","Clone::clone":"1:2234:409","core::sync::atomic::AtomicUsize":"1:48576:92","core::sync::atomic":"1:8127:333","core::marker::Sync":"1:2658:222","Weak::upgrade":"0:5680:7614","crate::rc#examples":"0:4463:1795","crate::rc::Rc":"0:4521:198","Arc":"0:5513:69","`Weak`":"0:5533:7157","core::cell::RefCell":"1:4173:201","crate":"0:0:279"},"attrs":["#[rustc_diagnostic_item = \"Arc\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:5559","0:5580","0:5586","0:5589","0:5592","0:5648","0:5653","0:5661","a:1:7710:3767-0:5513:69","b:0:5362-0:5513:69","b:0:671-0:5513:69","b:1:2567-0:5513:69","b:1:2510-0:5513:69","b:1:2505-0:5513:69","b:1:2216-0:5513:69","b:1:3303-0:5513:69","b:1:2219-0:5513:69","b:1:2502-0:5513:69","b:1:2499-0:5513:69","b:1:2495-0:5513:69","0:4383","0:4385","0:5517","0:5519","0:5521","0:5523","0:5526","0:5639","0:5642","0:5658","0:5709","0:5713","0:5720","0:5723","0:5725","0:5728","0:5731","0:5734","0:5737","0:5741","0:5744","0:5747","0:5749","0:5751","0:5754","0:5757","0:5761","0:5763","0:5770","0:5785","0:5788","0:5791","0:5796","0:5813","0:5816"]}},"a:1:7710:3767-0:6957:6203":{"id":"a:1:7710:3767-0:6957:6203","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6746":{"id":"0:6746","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1441,16],"end":[1441,21]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:6748:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2658:222-0:1185:3669":{"id":"a:1:2658:222-0:1185:3669","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:1185:3669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3166":{"id":"0:3166","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1483,0],"end":[1487,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3169:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2658:222-0:1359:3475":{"id":"a:1:2658:222-0:1359:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1359:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:3303-0:1201:3672":{"id":"b:1:3303-0:1201:3672","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:1201:3672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2219-0:1338:3356":{"id":"b:1:2219-0:1338:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:957":{"id":"0:957","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1568,0],"end":[1568,52]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainSorted","id":"0:6757:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1297":{"id":"0:1297","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[24,38],"end":[24,51]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"entry::OccupiedError","name":"OccupiedError","id":"0:1230:3671","glob":false}},"a:1:2708:2329-0:3723:3449":{"id":"a:1:2708:2329-0:3723:3449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:3723:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4384:668":{"id":"0:4384:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[870,4],"end":[873,5]},"visibility":"default","docs":"Converts a [`CString`] into an <code>[Arc]<[CStr]></code> by moving the [`CString`]\ndata into a new [`Arc`] buffer.","links":{"Arc":"0:5513:69","CStr":"1:46902:101","`CString`":"0:6897:102","`Arc`":"0:5513:69"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:691:2972":{"id":"0:691:2972","crate_id":0,"name":"is_borrowed","span":{"filename":"library/alloc/src/borrow.rs","begin":[229,4],"end":[234,5]},"visibility":"public","docs":"Returns true if the data is borrowed, i.e. if `to_mut` would require additional work.\n\n# Examples\n\n```\n#![feature(cow_is_borrowed)]\nuse std::borrow::Cow;\n\nlet cow = Cow::Borrowed(\"moo\");\nassert!(cow.is_borrowed());\n\nlet bull: Cow<'_, str> = Cow::Owned(\"...moo?\".to_string());\nassert!(!bull.is_borrowed());\n```","links":{},"attrs":["#[unstable(feature = \"cow_is_borrowed\", issue = \"65143\")]","#[rustc_const_unstable(feature = \"const_cow_is_borrowed\", issue = \"65143\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:1348:3805":{"id":"a:1:7710:3767-0:1348:3805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:1348:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:310":{"id":"0:310","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[738,0],"end":[796,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:313:2454","0:314:2458"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3951":{"id":"0:3951","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[171,0],"end":[171,44]},"visibility":{"restricted":{"parent":"0:3889:768","path":"::collections::vec_deque::iter"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"trusted_len\", issue = \"37572\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TrustedLen","id":"1:7403:3146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1215:650":{"id":"0:1215:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[68,4],"end":[70,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4027":{"id":"0:4027","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[123,0],"end":[145,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:4030:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1835:2759":{"id":"0:1835:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2098,4],"end":[2100,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3941:6117":{"id":"0:3941:6117","crate_id":0,"name":"try_rfold","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[146,4],"end":[153,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7130:154","args":null}}}],"output":{"kind":"generic","inner":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3139:227","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"B"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6092":{"id":"0:6092","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[49,0],"end":[53,1]},"visibility":{"restricted":{"parent":"0:6056:757","path":"::vec::into_iter"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"vec_intoiter_debug\", since = \"1.13.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6095:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4752:908":{"id":"0:4752:908","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/rc.rs","begin":[2216,4],"end":[2218,5]},"visibility":"public","docs":"Constructs a new `Weak<T>`, without allocating any memory.\nCalling [`upgrade`] on the return value always gives [`None`].\n\n[`upgrade`]: Weak::upgrade\n\n# Examples\n\n```\nuse std::rc::Weak;\n\nlet empty: Weak<i64> = Weak::new();\nassert!(empty.upgrade().is_none());\n```","links":{"Weak::upgrade":"0:4764:7614","`None`":"1:47999:173"},"attrs":["#[stable(feature = \"downgraded_weak\", since = \"1.10.0\")]","#[rustc_const_unstable(feature = \"const_weak_new\", issue = \"95091\", reason =\n\"recently added\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:3339:3356":{"id":"b:1:2219-0:3339:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11339:13876":{"id":"1:11339:13876","crate_id":1,"name":"split_whitespace","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[916,4],"end":[916,57]},"visibility":"public","docs":"Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_whitespace().next(), None);\nassert_eq!(\"   \".split_whitespace().next(), None);\n```","links":{"str::split_ascii_whitespace":"1:11340:7925"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_split_whitespace\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitWhitespace","id":"1:50239:7927","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5517":{"id":"0:5517","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[250,0],"end":[250,55]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3265:2750":{"id":"0:3265:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1721,4],"end":[1721,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"b:1:7020-0:3900:3356":{"id":"b:1:7020-0:3900:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:3749":{"id":"0:3749","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[108,0],"end":[190,1]},"visibility":{"restricted":{"parent":"0:3709:3448","path":"::collections::vec_deque::drain"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:3723:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3752:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6427:2104":{"id":"0:6427:2104","crate_id":0,"name":"reserve_exact","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[936,4],"end":[938,5]},"visibility":"public","docs":"Reserves the minimum capacity for at least `additional` more elements to\nbe inserted in the given `Vec<T>`. Unlike [`reserve`], this will not\ndeliberately over-allocate to speculatively avoid frequent allocations.\nAfter calling `reserve_exact`, capacity will be greater than or equal to\n`self.len() + additional`. Does nothing if the capacity is already\nsufficient.\n\nNote that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer [`reserve`] if future insertions are expected.\n\n[`reserve`]: Vec::reserve\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` bytes.\n\n# Examples\n\n```\nlet mut vec = vec![1];\nvec.reserve_exact(10);\nassert!(vec.capacity() >= 11);\n```","links":{"Vec::reserve":"0:6426:2086"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3225:2759":{"id":"0:3225:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1593,4],"end":[1595,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4706":{"id":"0:4706","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1990,0],"end":[2010,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"items":["0:4708:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2499-0:7074:9310":{"id":"b:1:2499-0:7074:9310","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Splice","id":"0:7074:9310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2658:222-0:6407:237":{"id":"a:1:2658:222-0:6407:237","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4778:650":{"id":"0:4778:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/rc.rs","begin":[2565,4],"end":[2567,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2658:222-0:1216:3670":{"id":"a:1:2658:222-0:1216:3670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:1216:3670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5711:595":{"id":"0:5711:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/sync.rs","begin":[2313,4],"end":[2315,5]},"visibility":"default","docs":"Equality for two `Arc`s.\n\nTwo `Arc`s are equal if their inner values are equal, even if they are\nstored in different allocation.\n\nIf `T` also implements `Eq` (implying reflexivity of equality),\ntwo `Arc`s that point to the same allocation are always equal.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nassert!(five == Arc::new(5));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:2944:4916":{"id":"a:1:2708:2329-0:2944:4916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:2944:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5684:7257":{"id":"0:5684:7257","crate_id":0,"name":"weak_count","span":{"filename":"library/alloc/src/sync.rs","begin":[2070,4],"end":[2087,5]},"visibility":"public","docs":"Gets an approximation of the number of `Weak` pointers pointing to this\nallocation.\n\nIf `self` was created using [`Weak::new`], or if there are no remaining\nstrong pointers, this will return 0.\n\n# Accuracy\n\nDue to implementation details, the returned value can be off by 1 in\neither direction when other threads are manipulating any `Arc`s or\n`Weak`s pointing to the same allocation.","links":{"`Weak::new`":"0:5668:908"},"attrs":["#[must_use]","#[stable(feature = \"weak_counts\", since = \"1.41.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:1348:3805":{"id":"a:1:2644:214-0:1348:3805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:1348:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1508:2750":{"id":"0:1508:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1473,4],"end":[1473,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}},"0:3216:2750":{"id":"0:3216:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1572,4],"end":[1572,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"0:1822":{"id":"0:1822","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2076,0],"end":[2094,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangeMut","id":"0:1435:3845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1826:2750","0:1827:921","0:1828:2753","0:1829:4091","0:1830:2120"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3303-0:771:3221":{"id":"b:1:3303-0:771:3221","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PeekMut","id":"0:771:3221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:799:59":{"id":"0:799:59","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[347,4],"end":[349,5]},"visibility":"default","docs":"Creates an empty `BinaryHeap<T>`.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4220:3475":{"id":"0:4220:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2769,4],"end":[2769,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"0:3723:3449":{"id":"0:3723:3449","crate_id":0,"name":"Drain","span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[18,0],"end":[35,1]},"visibility":"public","docs":"A draining iterator over the elements of a `VecDeque`.\n\nThis `struct` is created by the [`drain`] method on [`VecDeque`]. See its\ndocumentation for more.\n\n[`drain`]: VecDeque::drain","links":{"`VecDeque`":"0:4016:238","VecDeque::drain":"0:4116:3448"},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2708:2329-0:3723:3449","a:1:7709:3766-0:3723:3449","a:1:7710:3767-0:3723:3449","b:1:7020-0:3723:3449","b:1:2510-0:3723:3449","b:1:2505-0:3723:3449","b:1:2216-0:3723:3449","b:1:3303-0:3723:3449","b:1:2219-0:3723:3449","b:1:2499-0:3723:3449","b:1:2495-0:3723:3449","0:3739","0:3743","0:3746","0:3749","0:3766","0:3772","0:3776","0:3779"]}},"0:1891:416":{"id":"0:1891:416","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2189,4],"end":[2191,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4233:2885":{"id":"0:4233:2885","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2795,4],"end":[2797,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:6757:3337":{"id":"b:1:2499-0:6757:3337","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainSorted","id":"0:6757:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5270:1746":{"id":"0:5270:1746","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/string.rs","begin":[2108,4],"end":[2110,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["c",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"char"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:1385:3820":{"id":"a:1:2708:2329-0:1385:3820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:1385:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5394":{"id":"0:5394","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2727,0],"end":[2747,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"string_from_cow_str\", since = \"1.14.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5396:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3303-0:1385:3820":{"id":"b:1:3303-0:1385:3820","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:1385:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:7020-0:1385:3820":{"id":"b:1:7020-0:1385:3820","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:1385:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:5451:2759":{"id":"0:5451:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/string.rs","begin":[2975,4],"end":[2977,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5734":{"id":"0:5734","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2473,0],"end":[2487,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5736:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:406":{"id":"0:406","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1461,0],"end":[1479,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"pin\", since = \"1.33.0\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"1:48133:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:409:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5231:650":{"id":"0:5231:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/string.rs","begin":[1967,4],"end":[1969,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1499:4080":{"id":"0:1499:4080","crate_id":0,"name":"into_keys","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1432,4],"end":[1434,5]},"visibility":"public","docs":"Creates a consuming iterator visiting all the keys, in sorted order.\nThe map cannot be used after calling this.\nThe iterator element type is `K`.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(2, \"b\");\na.insert(1, \"a\");\n\nlet keys: Vec<i32> = a.into_keys().collect();\nassert_eq!(keys, [1, 2]);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:1404:3833","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:3328:157":{"id":"b:1:2505-0:3328:157","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6757:3337":{"id":"0:6757:3337","crate_id":0,"name":"DrainSorted","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1524,0],"end":[1526,1]},"visibility":"public","docs":"A draining iterator over the elements of a `BinaryHeap`.\n\nThis `struct` is created by [`BinaryHeap::drain_sorted()`]. See its\ndocumentation for more.\n\n[`drain_sorted`]: BinaryHeap::drain_sorted","links":{"`BinaryHeap::drain_sorted()`":"0:820:3336"},"attrs":["#[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:6757:3337","a:1:2644:214-0:6757:3337","a:1:2708:2329-0:6757:3337","a:1:7709:3766-0:6757:3337","a:1:7710:3767-0:6757:3337","b:1:7020-0:6757:3337","b:1:2510-0:6757:3337","b:1:2505-0:6757:3337","b:1:2216-0:6757:3337","b:1:3303-0:6757:3337","b:1:2219-0:6757:3337","b:1:2499-0:6757:3337","b:1:2495-0:6757:3337","0:6761","0:935","0:950","0:955","0:957","0:959"]}},"0:0:279":{"id":"0:0:279","crate_id":0,"name":"alloc","span":{"filename":"library/alloc/src/lib.rs","begin":[1,0],"end":[258,1]},"visibility":"public","docs":"# The Rust core allocation and collections library\n\nThis library provides smart pointers and collections for managing\nheap-allocated values.\n\nThis library, like libcore, normally doesn’t need to be used directly\nsince its contents are re-exported in the [`std` crate](../std/index.html).\nCrates that use the `#![no_std]` attribute however will typically\nnot depend on `std`, so they’d use this crate instead.\n\n## Boxed values\n\nThe [`Box`] type is a smart pointer type. There can only be one owner of a\n[`Box`], and the owner can decide to mutate the contents, which live on the\nheap.\n\nThis type can be sent among threads efficiently as the size of a `Box` value\nis the same as that of a pointer. Tree-like data structures are often built\nwith boxes because each node often has only one owner, the parent.\n\n## Reference counted pointers\n\nThe [`Rc`] type is a non-threadsafe reference-counted pointer type intended\nfor sharing memory within a thread. An [`Rc`] pointer wraps a type, `T`, and\nonly allows access to `&T`, a shared reference.\n\nThis type is useful when inherited mutability (such as using [`Box`]) is too\nconstraining for an application, and is often paired with the [`Cell`] or\n[`RefCell`] types in order to allow mutation.\n\n## Atomically reference counted pointers\n\nThe [`Arc`] type is the threadsafe equivalent of the [`Rc`] type. It\nprovides all the same functionality of [`Rc`], except it requires that the\ncontained type `T` is shareable. Additionally, [`Arc<T>`][`Arc`] is itself\nsendable while [`Rc<T>`][`Rc`] is not.\n\nThis type allows for shared access to the contained data, and is often\npaired with synchronization primitives such as mutexes to allow mutation of\nshared resources.\n\n## Collections\n\nImplementations of the most common general purpose data structures are\ndefined in this library. They are re-exported through the\n[standard collections library](../std/collections/index.html).\n\n## Heap interfaces\n\nThe [`alloc`](alloc/index.html) module defines the low-level interface to the\ndefault global allocator. It is not compatible with the libc allocator API.\n\n[`Arc`]: sync\n[`Box`]: boxed\n[`Cell`]: core::cell\n[`Rc`]: rc\n[`RefCell`]: core::cell","links":{"rc":"0:4463:1795","core::cell":"1:4018:7100","boxed":"0:141:1791","sync":"0:5455:1364"},"attrs":["#![allow(unused_attributes)]","#![stable(feature = \"alloc\", since = \"1.36.0\")]","#![doc(html_playground_url = \"https://play.rust-lang.org/\",\nissue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\ntest(no_crate_inject, attr(allow(unused_variables), deny(warnings))))]","#![doc(cfg_hide(not(test), not(any(test, bootstrap)),\nany(not(feature = \"miri-test-libstd\"), test, doctest), no_global_oom_handling,\nnot(no_global_oom_handling), not(no_rc), not(no_sync), target_has_atomic =\n\"ptr\"))]","#![no_std]","#![needs_allocator]","#![cfg(any(not(feature = \"miri-test-libstd\"), test, doctest))]","#![deny(unsafe_op_in_unsafe_fn)]","#![deny(fuzzy_provenance_casts)]","#![warn(deprecated_in_future)]","#![warn(missing_debug_implementations)]","#![warn(missing_docs)]","#![allow(explicit_outlives_requirements)]","#![feature(alloc_layout_extra)]","#![feature(allocator_api)]","#![feature(array_chunks)]","#![feature(array_into_iter_constructors)]","#![feature(array_methods)]","#![feature(array_windows)]","#![feature(assert_matches)]","#![feature(async_iterator)]","#![feature(coerce_unsized)]","#![feature(const_alloc_error)]","#![feature(const_box)]","#![feature(const_btree_len)]","#![feature(const_cow_is_borrowed)]","#![feature(const_convert)]","#![feature(const_size_of_val)]","#![feature(const_align_of_val)]","#![feature(const_ptr_read)]","#![feature(const_maybe_uninit_write)]","#![feature(const_maybe_uninit_as_mut_ptr)]","#![feature(const_refs_to_cell)]","#![feature(core_intrinsics)]","#![feature(const_eval_select)]","#![feature(const_pin)]","#![feature(const_waker)]","#![feature(cstr_from_bytes_until_nul)]","#![feature(dispatch_from_dyn)]","#![feature(error_generic_member_access)]","#![feature(error_in_core)]","#![feature(exact_size_is_empty)]","#![feature(extend_one)]","#![feature(fmt_internals)]","#![feature(fn_traits)]","#![feature(hasher_prefixfree_extras)]","#![feature(inline_const)]","#![feature(inplace_iteration)]","#![feature(iter_advance_by)]","#![feature(iter_next_chunk)]","#![feature(iter_repeat_n)]","#![feature(layout_for_ptr)]","#![feature(maybe_uninit_slice)]","#![feature(maybe_uninit_uninit_array)]","#![feature(maybe_uninit_uninit_array_transpose)]","#![feature(nonnull_slice_from_raw_parts)]","#![feature(pattern)]","#![feature(pointer_byte_offsets)]","#![feature(provide_any)]","#![feature(ptr_internals)]","#![feature(ptr_metadata)]","#![feature(ptr_sub_ptr)]","#![feature(receiver_trait)]","#![feature(saturating_int_impl)]","#![feature(set_ptr_value)]","#![feature(sized_type_properties)]","#![feature(slice_from_ptr_range)]","#![feature(slice_group_by)]","#![feature(slice_ptr_get)]","#![feature(slice_ptr_len)]","#![feature(slice_range)]","#![feature(str_internals)]","#![feature(strict_provenance)]","#![feature(trusted_len)]","#![feature(trusted_random_access)]","#![feature(try_trait_v2)]","#![feature(tuple_trait)]","#![feature(unchecked_math)]","#![feature(unicode_internals)]","#![feature(unsize)]","#![feature(utf8_chunks)]","#![feature(std_internals)]","#![feature(allocator_internals)]","#![feature(allow_internal_unstable)]","#![feature(associated_type_bounds)]","#![feature(cfg_sanitize)]","#![feature(const_deref)]","#![feature(const_mut_refs)]","#![feature(const_ptr_write)]","#![feature(const_precise_live_drops)]","#![feature(const_trait_impl)]","#![feature(const_try)]","#![feature(dropck_eyepatch)]","#![feature(exclusive_range_pattern)]","#![feature(fundamental)]","#![feature(generator_trait)]","#![feature(hashmap_internals)]","#![feature(lang_items)]","#![feature(min_specialization)]","#![feature(negative_impls)]","#![feature(never_type)]","#![feature(rustc_allow_const_fn_unstable)]","#![feature(rustc_attrs)]","#![feature(pointer_is_aligned)]","#![feature(slice_internals)]","#![feature(staged_api)]","#![feature(stmt_expr_attributes)]","#![feature(unboxed_closures)]","#![feature(unsized_fn_params)]","#![feature(c_unwind)]","#![feature(with_negative_coherence)]","#![feature(doc_cfg)]","#![feature(doc_cfg_hide)]","#![feature(intra_doc_pointers)]","#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":true,"items":["0:92:279","0:141:1791","0:648:1793","0:744:1794","0:4280:635","0:4428:650","0:4463:1795","0:4810:1314","0:5004:1344","0:5121:1796","0:5455:1364","0:5803:1797","0:5829:1505","0:5:1505","0:6:659"],"is_stripped":false}},"0:451:2733":{"id":"0:451:2733","crate_id":0,"name":"downcast_unchecked","span":{"filename":"library/alloc/src/boxed.rs","begin":[1745,4],"end":[1751,5]},"visibility":"public","docs":"Downcasts the box to a concrete type.\n\nFor a safe alternative see [`downcast`].\n\n# Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\n\nlet x: Box<dyn Any> = Box::new(1_usize);\n\nunsafe {\n    assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n}\n```\n\n# Safety\n\nThe contained value must be of type `T`. Calling this method\nwith the incorrect type is *undefined behavior*.\n\n[`downcast`]: Self::downcast","links":{"Self::downcast":"0:449:2731"},"attrs":["#[inline]","#[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:635:668":{"id":"0:635:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[2365,4],"end":[2367,5]},"visibility":"default","docs":"Converts a [`str`] into a box of dyn [`Error`].\n\n[`str`]: prim@str\n\n# Examples\n\n```\nuse std::error::Error;\nuse std::mem;\n\nlet a_str_error = \"a str error\";\nlet a_boxed_error = Box::<dyn Error>::from(a_str_error);\nassert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n```","links":{"`Error`":"1:2560:126","prim@str":"1:58436:10463"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["err",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:6083:3475":{"id":"a:1:7709:3766-0:6083:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2510-0:3531:4069":{"id":"b:1:2510-0:3531:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3531:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4690":{"id":"0:4690","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1885,0],"end":[1889,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Pointer","id":"1:8583:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4692:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7709:3766-0:6980:218":{"id":"a:1:7709:3766-0:6980:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:7709:3766-0:6734:3475":{"id":"a:1:7709:3766-0:6734:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2216-0:3096:4069":{"id":"b:1:2216-0:3096:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3096:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6882:2116":{"id":"0:6882:2116","crate_id":0,"name":"CapacityOverflow","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[89,4],"end":[89,20]},"visibility":"default","docs":"Error due to the computed capacity exceeding the collection's maximum\n(usually `isize::MAX` bytes).","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"plain","variant_inner":null}},"0:3003:650":{"id":"0:3003:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[301,4],"end":[303,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:356:411":{"id":"0:356:411","crate_id":0,"name":"clone_from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1320,4],"end":[1322,5]},"visibility":"default","docs":"Copies `source`'s contents into `self` without creating a new allocation.\n\n# Examples\n\n```\nlet x = Box::new(5);\nlet mut y = Box::new(10);\nlet yp: *const i32 = &*y;\n\ny.clone_from(&x);\n\n// The value is the same\nassert_eq!(x, y);\n\n// And no allocation occurred\nassert_eq!(yp, &*y);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2658:222-0:3004:4940":{"id":"a:1:2658:222-0:3004:4940","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:3004:4940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2499-0:3531:4069":{"id":"b:1:2499-0:3531:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3531:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4280:635":{"id":"0:4280:635","crate_id":0,"name":"ffi","span":{"filename":"library/alloc/src/ffi/mod.rs","begin":[1,0],"end":[88,10]},"visibility":"public","docs":"Utilities related to FFI bindings.\n\nThis module provides utilities to handle data across non-Rust\ninterfaces, like other programming languages and the underlying\noperating system. It is mainly of use for FFI (Foreign Function\nInterface) bindings and code that needs to exchange C-like strings\nwith other languages.\n\n# Overview\n\nRust represents owned strings with the [`String`] type, and\nborrowed slices of strings with the [`str`] primitive. Both are\nalways in UTF-8 encoding, and may contain nul bytes in the middle,\ni.e., if you look at the bytes that make up the string, there may\nbe a `\\0` among them. Both `String` and `str` store their length\nexplicitly; there are no nul terminators at the end of strings\nlike in C.\n\nC strings are different from Rust strings:\n\n* **Encodings** - Rust strings are UTF-8, but C strings may use\nother encodings. If you are using a string from C, you should\ncheck its encoding explicitly, rather than just assuming that it\nis UTF-8 like you can do in Rust.\n\n* **Character size** - C strings may use `char` or `wchar_t`-sized\ncharacters; please **note** that C's `char` is different from Rust's.\nThe C standard leaves the actual sizes of those types open to\ninterpretation, but defines different APIs for strings made up of\neach character type. Rust strings are always UTF-8, so different\nUnicode characters will be encoded in a variable number of bytes\neach. The Rust type [`char`] represents a '[Unicode scalar\nvalue]', which is similar to, but not the same as, a '[Unicode\ncode point]'.\n\n* **Nul terminators and implicit string lengths** - Often, C\nstrings are nul-terminated, i.e., they have a `\\0` character at the\nend. The length of a string buffer is not stored, but has to be\ncalculated; to compute the length of a string, C code must\nmanually call a function like `strlen()` for `char`-based strings,\nor `wcslen()` for `wchar_t`-based ones. Those functions return\nthe number of characters in the string excluding the nul\nterminator, so the buffer length is really `len+1` characters.\nRust strings don't have a nul terminator; their length is always\nstored and does not need to be calculated. While in Rust\naccessing a string's length is an *O*(1) operation (because the\nlength is stored); in C it is an *O*(*n*) operation because the\nlength needs to be computed by scanning the string for the nul\nterminator.\n\n* **Internal nul characters** - When C strings have a nul\nterminator character, this usually means that they cannot have nul\ncharacters in the middle — a nul character would essentially\ntruncate the string. Rust strings *can* have nul characters in\nthe middle, because nul does not have to mark the end of the\nstring in Rust.\n\n# Representations of non-Rust strings\n\n[`CString`] and [`CStr`] are useful when you need to transfer\nUTF-8 strings to and from languages with a C ABI, like Python.\n\n* **From Rust to C:** [`CString`] represents an owned, C-friendly\nstring: it is nul-terminated, and has no internal nul characters.\nRust code can create a [`CString`] out of a normal string (provided\nthat the string doesn't have nul characters in the middle), and\nthen use a variety of methods to obtain a raw <code>\\*mut [u8]</code> that can\nthen be passed as an argument to functions which use the C\nconventions for strings.\n\n* **From C to Rust:** [`CStr`] represents a borrowed C string; it\nis what you would use to wrap a raw <code>\\*const [u8]</code> that you got from\na C function. A [`CStr`] is guaranteed to be a nul-terminated array\nof bytes. Once you have a [`CStr`], you can convert it to a Rust\n<code>&[str]</code> if it's valid UTF-8, or lossily convert it by adding\nreplacement characters.\n\n[`String`]: crate::string::String\n[`CStr`]: core::ffi::CStr","links":{"`CString`":"0:6897:102","u8":"1:58447:10472","str":"1:58436:10463","`char`":"1:58430:10458","crate::string::String":"0:6980:218","`str`":"1:58436:10463","core::ffi::CStr":"1:46902:101"},"attrs":["#[cfg(all(not(no_rc), not(no_sync), not(no_global_oom_handling)))]","#![stable(feature = \"alloc_ffi\", since = \"1.64.0\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4281","0:4283","0:4284","0:4285"],"is_stripped":false}},"0:1465:3901":{"id":"0:1465:3901","crate_id":0,"name":"pop_first","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[777,4],"end":[782,5]},"visibility":"public","docs":"Removes and returns the first element in the map.\nThe key of this element is the minimum key that was in the map.\n\n# Examples\n\nDraining elements in ascending order, while keeping a usable map each iteration.\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nmap.insert(2, \"b\");\nwhile let Some((key, _val)) = map.pop_first() {\n    assert!(map.iter().all(|(k, _v)| *k > key));\n}\nassert!(map.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"map_first_last\", since = \"1.66.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:284:908":{"id":"0:284:908","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/boxed.rs","begin":[217,4],"end":[220,5]},"visibility":"public","docs":"Allocates memory on the heap and then places `x` into it.\n\nThis doesn't actually allocate if `T` is zero-sized.\n\n# Examples\n\n```\nlet five = Box::new(5);\n```","links":{},"attrs":["#[cfg(all(not(no_global_oom_handling)))]","#[inline(always)]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["x",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6949":{"id":"0:6949","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[159,16],"end":[159,25]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]","#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2654:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6657":{"id":"0:6657","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3040,0],"end":[3045,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":"Implements ordering of vectors, [lexicographically](core::cmp::Ord#lexicographical-comparison).","links":{"core::cmp::Ord#lexicographical-comparison":"1:2299:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","clamp","min"],"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6660:416"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5258:670":{"id":"0:5258:670","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/string.rs","begin":[2062,4],"end":[2076,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:6816:3475":{"id":"a:1:7709:3766-0:6816:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4221:757":{"id":"0:4221:757","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2771,4],"end":[2773,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1229:650":{"id":"0:1229:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3083":{"id":"0:3083","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1254,0],"end":[1273,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3086:2750","0:3087:3475","0:3088:757"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:306:2436":{"id":"0:306:2436","crate_id":0,"name":"new_uninit_slice","span":{"filename":"library/alloc/src/boxed.rs","begin":[643,4],"end":[645,5]},"visibility":"public","docs":"Constructs a new boxed slice with uninitialized contents.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nlet mut values = Box::<[u32]>::new_uninit_slice(3);\n\nlet values = unsafe {\n    // Deferred initialization:\n    values[0].as_mut_ptr().write(1);\n    values[1].as_mut_ptr().write(2);\n    values[2].as_mut_ptr().write(3);\n\n    values.assume_init()\n};\n\nassert_eq!(*values, [1, 2, 3])\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:1680:4069":{"id":"b:1:2219-0:1680:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:1680:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4972:2911":{"id":"0:4972:2911","crate_id":0,"name":"clone_into","span":{"filename":"library/alloc/src/slice.rs","begin":[794,4],"end":[805,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5436":{"id":"0:5436","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2920,0],"end":[2937,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:5438:308"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:92:279":{"id":"0:92:279","crate_id":0,"name":"alloc","span":{"filename":"library/alloc/src/alloc.rs","begin":[1,0],"end":[430,1]},"visibility":"public","docs":"Memory allocation APIs","links":{},"attrs":["#![stable(feature = \"alloc_module\", since = \"1.28.0\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:6725:1970","0:108:279","0:109:512","0:110:1077","0:111:282","0:128:1968","0:101"],"is_stripped":false}},"0:5719:682":{"id":"0:5719:682","crate_id":0,"name":"ge","span":{"filename":"library/alloc/src/sync.rs","begin":[2423,4],"end":[2425,5]},"visibility":"default","docs":"'Greater than or equal to' comparison for two `Arc`s.\n\nThe two are compared by calling `>=` on their inner values.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nassert!(five >= Arc::new(5));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1448:908":{"id":"0:1448:908","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[585,4],"end":[587,5]},"visibility":"public","docs":"Makes a new, empty `BTreeMap`.\n\nDoes not allocate anything on its own.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\n\n// entries can now be inserted into the empty map\nmap.insert(1, \"a\");\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_btree_new\", since = \"1.66.0\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4248:668":{"id":"0:4248:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2865,4],"end":[2880,5]},"visibility":"default","docs":"Turn a [`VecDeque<T>`] into a [`Vec<T>`].\n\n[`Vec<T>`]: crate::vec::Vec\n[`VecDeque<T>`]: crate::collections::VecDeque\n\nThis never needs to re-allocate, but does need to do *O*(*n*) data movement if\nthe circular buffer doesn't happen to be at the beginning of the allocation.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\n// This one is *O*(1).\nlet deque: VecDeque<_> = (1..5).collect();\nlet ptr = deque.as_slices().0.as_ptr();\nlet vec = Vec::from(deque);\nassert_eq!(vec, [1, 2, 3, 4]);\nassert_eq!(vec.as_ptr(), ptr);\n\n// This one needs data rearranging.\nlet mut deque: VecDeque<_> = (1..5).collect();\ndeque.push_front(9);\ndeque.push_front(8);\nlet ptr = deque.as_slices().1.as_ptr();\nlet vec = Vec::from(deque);\nassert_eq!(vec, [8, 9, 1, 2, 3, 4]);\nassert_eq!(vec.as_ptr(), ptr);\n```","links":{"crate::vec::Vec":"0:6407:237","crate::collections::VecDeque":"0:4016:238"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["other",{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:6779:3475":{"id":"a:1:7710:3767-0:6779:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6779:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:493:921":{"id":"0:493:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/boxed.rs","begin":[1921,4],"end":[1923,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"1:7130:154","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:6914:6204":{"id":"a:1:2644:214-0:6914:6204","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:300:2413":{"id":"0:300:2413","crate_id":0,"name":"pin_in","span":{"filename":"library/alloc/src/boxed.rs","begin":[580,4],"end":[585,5]},"visibility":"public","docs":"Constructs a new `Pin<Box<T, A>>`. If `T` does not implement [`Unpin`], then\n`x` will be pinned in memory and unable to be moved.\n\nConstructing and pinning of the `Box` can also be done in two steps: `Box::pin_in(x, alloc)`\ndoes the same as <code>[Box::into_pin]\\([Box::new_in]\\(x, alloc))</code>. Consider using\n[`into_pin`](Box::into_pin) if you already have a `Box<T, A>`, or if you want to\nconstruct a (pinned) `Box` in a different way than with [`Box::new_in`].","links":{"Box::new_in":"0:294:2010","`Unpin`":"1:2708:2329","`Box::new_in`":"0:294:2010","Box::into_pin":"0:337:2414"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]","#[must_use]","#[inline(always)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["x",{"kind":"generic","inner":"T"}],["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"resolved_path","inner":{"name":"Pin","id":"1:48133:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe_const"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3210":{"id":"0:3210","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1564,0],"end":[1568,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:6787:192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3212:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4091:2111":{"id":"0:4091:2111","crate_id":0,"name":"shrink_to_fit","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[912,4],"end":[914,5]},"visibility":"public","docs":"Shrinks the capacity of the deque as much as possible.\n\nIt will drop down as close as possible to the length but the allocator may still inform the\ndeque that there is space for a few more elements.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::with_capacity(15);\nbuf.extend(0..4);\nassert_eq!(buf.capacity(), 15);\nbuf.shrink_to_fit();\nassert!(buf.capacity() >= 4);\n```","links":{},"attrs":["#[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:3004:4940":{"id":"a:1:2708:2329-0:3004:4940","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:3004:4940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:3303-0:215:2341":{"id":"b:1:3303-0:215:2341","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5334:180":{"id":"0:5334:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/string.rs","begin":[2394,4],"end":[2394,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"str"}}},"0:5369:1398":{"id":"0:5369:1398","crate_id":0,"name":"to_string","span":{"filename":"library/alloc/src/string.rs","begin":[2555,4],"end":[2568,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3911:650":{"id":"0:3911:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4382:668":{"id":"0:4382:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[859,4],"end":[861,5]},"visibility":"default","docs":"Converts a `&`[`CString`] into a borrowed [`Cow`] without copying or allocating.","links":{"`CString`":"0:6897:102","`Cow`":"0:676:109"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:6734:3475":{"id":"a:1:2708:2329-0:6734:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11400:40317":{"id":"1:11400:40317","crate_id":1,"name":"trim","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1867,4],"end":[1867,30]},"visibility":"public","docs":"Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4022":{"id":"0:4022","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[109,0],"end":[120,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:4025:409","0:4026:411"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3571:2751":{"id":"0:3571:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1792,4],"end":[1794,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4198":{"id":"0:4198","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2738,0],"end":[2742,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7012:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4200:670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5287":{"id":"0:5287","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2154,0],"end":[2163,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"herd_cows\", since = \"1.19.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7025:3507","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5289:2885","0:5292:1746"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3588":{"id":"0:3588","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1833,0],"end":[1840,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"items":["0:3591:2750","0:3592:3475","0:3593:757"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5371:1398":{"id":"0:5371:1398","crate_id":0,"name":"to_string","span":{"filename":"library/alloc/src/string.rs","begin":[2575,4],"end":[2591,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5772:670":{"id":"0:5772:670","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/sync.rs","begin":[2718,4],"end":[2720,5]},"visibility":"default","docs":"Takes each element in the `Iterator` and collects it into an `Arc<[T]>`.\n\n# Performance characteristics\n\n## The general case\n\nIn the general case, collecting into `Arc<[T]>` is done by first\ncollecting into a `Vec<T>`. That is, when writing the following:\n\n```rust\n# use std::sync::Arc;\nlet evens: Arc<[u8]> = (0..10).filter(|&x| x % 2 == 0).collect();\n# assert_eq!(&*evens, &[0, 2, 4, 6, 8]);\n```\n\nthis behaves as if we wrote:\n\n```rust\n# use std::sync::Arc;\nlet evens: Arc<[u8]> = (0..10).filter(|&x| x % 2 == 0)\n    .collect::<Vec<_>>() // The first set of allocations happens here.\n    .into(); // A second allocation for `Arc<[T]>` happens here.\n# assert_eq!(&*evens, &[0, 2, 4, 6, 8]);\n```\n\nThis will allocate as many times as needed for constructing the `Vec<T>`\nand then it will allocate once for turning the `Vec<T>` into the `Arc<[T]>`.\n\n## Iterators of known length\n\nWhen your `Iterator` implements `TrustedLen` and is of an exact size,\na single allocation will be made for the `Arc<[T]>`. For example:\n\n```rust\n# use std::sync::Arc;\nlet evens: Arc<[u8]> = (0..10).collect(); // Just a single allocation happens here.\n# assert_eq!(&*evens, &*(0..10).collect::<Vec<_>>());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"iter::IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:6749:3449":{"id":"a:1:2644:214-0:6749:3449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:6749:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4849":{"id":"0:4849","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[54,33],"end":[54,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::Split","name":"Split","id":"1:9306:7687","glob":false}},"0:1747":{"id":"0:1747","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1966,0],"end":[1970,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"map_values_mut\", since = \"1.10.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:1394:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1751:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2708:2329-0:6944:6202":{"id":"a:1:2708:2329-0:6944:6202","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:7012":{"id":"0:7012","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2252,0],"end":[2252,24]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(unused_lifetimes)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"primitive","inner":"str"},"items":["0:7015:595","0:7016:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5041":{"id":"0:5041","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[38,20],"end":[38,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::EscapeDebug","name":"EscapeDebug","id":"1:50264:7936","glob":false}},"0:1515:2750":{"id":"0:1515:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1483,4],"end":[1483,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}},"0:5434":{"id":"0:5434","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2907,0],"end":[2918,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:5435:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2499-0:6787:192":{"id":"b:1:2499-0:6787:192","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:6787:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6914:6204":{"id":"0:6914:6204","crate_id":0,"name":"NulError","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[136,0],"end":[136,36]},"visibility":"public","docs":"An error indicating that an interior nul byte was found.\n\nWhile Rust strings may contain nul bytes in the middle, C strings\ncan't, as that byte would effectively truncate the string.\n\nThis error is created by the [`new`][`CString::new`] method on\n[`CString`]. See its documentation for more.\n\n# Examples\n\n```\nuse std::ffi::{CString, NulError};\n\nlet _: NulError = CString::new(b\"f\\0oo\".to_vec()).unwrap_err();\n```","links":{"`CString`":"0:6897:102","`CString::new`":"0:4314:908"},"attrs":["#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null,null]},"generics":{"params":[],"where_predicates":[]},"impls":["0:4393","a:1:2658:222-0:6914:6204","a:1:2644:214-0:6914:6204","a:1:2708:2329-0:6914:6204","a:1:7709:3766-0:6914:6204","a:1:7710:3767-0:6914:6204","b:0:5362-0:6914:6204","b:0:671-0:6914:6204","b:1:2567-0:6914:6204","b:1:2510-0:6914:6204","b:1:2505-0:6914:6204","b:1:2216-0:6914:6204","b:1:3303-0:6914:6204","b:1:2219-0:6914:6204","b:1:2499-0:6914:6204","b:1:2495-0:6914:6204","0:6918","0:6920","0:6921","0:6923","0:6924","0:6926","0:4396","0:4422"]}},"b:0:671-0:5513:69":{"id":"b:0:671-0:5513:69","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3172:409":{"id":"0:3172:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1491,4],"end":[1493,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:3352:3805":{"id":"a:1:2708:2329-0:3352:3805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3352:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4408":{"id":"0:4408","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1017,0],"end":[1029,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"cstr_borrow\", since = \"1.3.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4409:2677","0:4410:2903","0:4411:2911"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2216-0:2908:95":{"id":"b:1:2216-0:2908:95","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3909":{"id":"0:3909","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[24,0],"end":[28,1]},"visibility":{"restricted":{"parent":"0:3889:768","path":"::collections::vec_deque::iter"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3911:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3517:5370":{"id":"0:3517:5370","crate_id":0,"name":"remove_current","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1462,4],"end":[1470,5]},"visibility":"public","docs":"Removes the current element from the `LinkedList`.\n\nThe element that was removed is returned, and the cursor is\nmoved to point to the next element in the `LinkedList`.\n\nIf the cursor is currently pointing to the \"ghost\" non-element then no element\nis removed and `None` is returned.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4125:5349":{"id":"0:4125:5349","crate_id":0,"name":"pop_back","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1591,4],"end":[1598,5]},"visibility":"public","docs":"Removes the last element from the deque and returns it, or `None` if\nit is empty.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nassert_eq!(buf.pop_back(), None);\nbuf.push_back(1);\nbuf.push_back(3);\nassert_eq!(buf.pop_back(), Some(3));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6734:3475":{"id":"0:6734:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1370,0],"end":[1372,1]},"visibility":"public","docs":"An owning iterator over the elements of a `BinaryHeap`.\n\nThis `struct` is created by [`BinaryHeap::into_iter()`]\n(provided by the [`IntoIterator`] trait). See its documentation for more.\n\n[`into_iter`]: BinaryHeap::into_iter\n[`IntoIterator`]: core::iter::IntoIterator","links":{"core::iter::IntoIterator":"1:7016:147","`BinaryHeap::into_iter()`":"0:981:757"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:6734:3475","a:1:2644:214-0:6734:3475","a:1:2708:2329-0:6734:3475","a:1:7709:3766-0:6734:3475","a:1:7710:3767-0:6734:3475","b:0:671-0:6734:3475","b:1:7020-0:6734:3475","b:1:2510-0:6734:3475","b:1:2505-0:6734:3475","b:1:2216-0:6734:3475","b:1:3303-0:6734:3475","b:1:2219-0:6734:3475","b:1:2499-0:6734:3475","b:1:2495-0:6734:3475","0:6737","0:885","0:888","0:893","0:896","0:899"]}},"0:3432:921":{"id":"0:3432:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1029,4],"end":[1041,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:5424:3449":{"id":"b:1:2510-0:5424:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3502:5369":{"id":"0:3502:5369","crate_id":0,"name":"move_next","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1322,4],"end":[1336,5]},"visibility":"public","docs":"Moves the cursor to the next element of the `LinkedList`.\n\nIf the cursor is pointing to the \"ghost\" non-element then this will move it to\nthe first element of the `LinkedList`. If it is pointing to the last\nelement of the `LinkedList` then this will move it to the \"ghost\" non-element.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:1338:3356":{"id":"b:1:2495-0:1338:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6819":{"id":"0:6819","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[134,9],"end":[134,14]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:6821:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3388:3320":{"id":"0:3388:3320","crate_id":0,"name":"append","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[457,4],"end":[474,5]},"visibility":"public","docs":"Moves all elements from `other` to the end of the list.\n\nThis reuses all the nodes from `other` and moves them into `self`. After\nthis operation, `other` becomes empty.\n\nThis operation should compute in *O*(1) time and *O*(1) memory.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut list1 = LinkedList::new();\nlist1.push_back('a');\n\nlet mut list2 = LinkedList::new();\nlist2.push_back('b');\nlist2.push_back('c');\n\nlist1.append(&mut list2);\n\nlet mut iter = list1.iter();\nassert_eq!(iter.next(), Some(&'a'));\nassert_eq!(iter.next(), Some(&'b'));\nassert_eq!(iter.next(), Some(&'c'));\nassert!(iter.next().is_none());\n\nassert!(list2.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:1359:3475":{"id":"a:1:2644:214-0:1359:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1359:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1258:4194":{"id":"0:1258:4194","crate_id":0,"name":"or_insert","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[161,4],"end":[166,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nassert_eq!(map[\"poneyland\"], 12);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["default",{"kind":"generic","inner":"V"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:304":{"id":"0:304","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[619,0],"end":[736,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"items":["0:306:2436","0:307:2441","0:308:2446","0:309:2451"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2216-0:7057:4069":{"id":"b:1:2216-0:7057:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:7057:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2708:2329-0:6749:3449":{"id":"a:1:2708:2329-0:6749:3449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:6749:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4135:3348":{"id":"0:4135:3348","crate_id":0,"name":"retain","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1971,4],"end":[1976,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` for which `f(&e)` returns false.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.extend(1..5);\nbuf.retain(|&x| x % 2 == 0);\nassert_eq!(buf, [2, 4]);\n```\n\nBecause the elements are visited exactly once in the original order,\nexternal state may be used to decide which elements to keep.\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.extend(1..6);\n\nlet keep = [false, true, true, false, true];\nlet mut iter = keep.iter();\nbuf.retain(|_| *iter.next().unwrap());\nassert_eq!(buf, [2, 3, 5]);\n```","links":{},"attrs":["#[stable(feature = \"vec_deque_retain\", since = \"1.4.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:5964:3449":{"id":"b:1:2495-0:5964:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5664:2733":{"id":"0:5664:2733","crate_id":0,"name":"downcast_unchecked","span":{"filename":"library/alloc/src/sync.rs","begin":[1814,4],"end":[1823,5]},"visibility":"public","docs":"Downcasts the `Arc<dyn Any + Send + Sync>` to a concrete type.\n\nFor a safe alternative see [`downcast`].\n\n# Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\nuse std::sync::Arc;\n\nlet x: Arc<dyn Any + Send + Sync> = Arc::new(1_usize);\n\nunsafe {\n    assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n}\n```\n\n# Safety\n\nThe contained value must be of type `T`. Calling this method\nwith the incorrect type is *undefined behavior*.\n\n\n[`downcast`]: Self::downcast","links":{"Self::downcast":"0:5662:2731"},"attrs":["#[inline]","#[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2658:222-0:6740:3364":{"id":"a:1:2658:222-0:6740:3364","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2499-0:3339:3356":{"id":"b:1:2499-0:3339:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3303-0:6816:3475":{"id":"b:1:3303-0:6816:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1858:2885":{"id":"0:1858:2885","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2140,4],"end":[2142,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5753:668":{"id":"0:5753:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/sync.rs","begin":[2589,4],"end":[2591,5]},"visibility":"default","docs":"Move a boxed object to a new, reference-counted allocation.\n\n# Example\n\n```\n# use std::sync::Arc;\nlet unique: Box<str> = Box::from(\"eggplant\");\nlet shared: Arc<str> = Arc::from(unique);\nassert_eq!(\"eggplant\", &shared[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:465":{"id":"0:465","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1874,0],"end":[1878,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:468:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2495-0:215:2341":{"id":"b:1:2495-0:215:2341","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3303-0:2908:95":{"id":"b:1:3303-0:2908:95","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6956:650":{"id":"0:6956:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[159,31],"end":[159,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5209:3797":{"id":"0:5209:3797","crate_id":0,"name":"insert","span":{"filename":"library/alloc/src/string.rs","begin":[1531,4],"end":[1539,5]},"visibility":"public","docs":"Inserts a character into this `String` at a byte position.\n\nThis is an *O*(*n*) operation as it requires copying every element in the\nbuffer.\n\n# Panics\n\nPanics if `idx` is larger than the `String`'s length, or if it does not\nlie on a [`char`] boundary.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::with_capacity(3);\n\ns.insert(0, 'f');\ns.insert(1, 'o');\ns.insert(2, 'o');\n\nassert_eq!(\"foo\", s);\n```","links":{"`char`":"1:58430:10458"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["idx",{"kind":"primitive","inner":"usize"}],["ch",{"kind":"primitive","inner":"char"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3065:2762":{"id":"0:3065:2762","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1201,4],"end":[1203,5]},"visibility":"public","docs":"Returns `true` if the set contains no elements.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut v = BTreeSet::new();\nassert!(v.is_empty());\nv.insert(1);\nassert!(!v.is_empty());\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_unstable(feature = \"const_btree_len\", issue = \"71835\",\nimplied_by = \"const_btree_new\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4674:781":{"id":"0:4674:781","crate_id":0,"name":"le","span":{"filename":"library/alloc/src/rc.rs","begin":[1800,4],"end":[1802,5]},"visibility":"default","docs":"'Less than or equal to' comparison for two `Rc`s.\n\nThe two are compared by calling `<=` on their inner values.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nassert!(five <= Rc::new(5));\n```","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3604:1746":{"id":"0:3604:1746","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1859,4],"end":[1861,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["elem",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4696":{"id":"0:4696","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1914,0],"end":[1929,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"items":["0:4698:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4563:7193":{"id":"0:4563:7193","crate_id":0,"name":"try_unwrap","span":{"filename":"library/alloc/src/rc.rs","begin":[666,4],"end":[683,5]},"visibility":"public","docs":"Returns the inner value, if the `Rc` has exactly one strong reference.\n\nOtherwise, an [`Err`] is returned with the same `Rc` that was\npassed in.\n\nThis will succeed even if there are outstanding weak references.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet x = Rc::new(3);\nassert_eq!(Rc::try_unwrap(x), Ok(3));\n\nlet x = Rc::new(4);\nlet _y = Rc::clone(&x);\nassert_eq!(*Rc::try_unwrap(x).unwrap_err(), 4);\n```","links":{"`Err`":"1:48147:125"},"attrs":["#[inline]","#[stable(feature = \"rc_unique\", since = \"1.4.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3181:2120":{"id":"0:3181:2120","crate_id":0,"name":"max","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1515,4],"end":[1517,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4338:2629":{"id":"0:4338:2629","crate_id":0,"name":"as_bytes","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[541,4],"end":[544,5]},"visibility":"public","docs":"Returns the contents of this `CString` as a slice of bytes.\n\nThe returned slice does **not** contain the trailing nul\nterminator, and it is guaranteed to not have any interior nul\nbytes. If you need the nul terminator, use\n[`CString::as_bytes_with_nul`] instead.\n\n# Examples\n\n```\nuse std::ffi::CString;\n\nlet c_string = CString::new(\"foo\").expect(\"CString::new failed\");\nlet bytes = c_string.as_bytes();\nassert_eq!(bytes, &[b'f', b'o', b'o']);\n```","links":{"`CString::as_bytes_with_nul`":"0:4339:6412"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:1404:3833":{"id":"b:1:2510-0:1404:3833","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:1404:3833","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1014:1746":{"id":"0:1014:1746","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1713,4],"end":[1715,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["item",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:0:671-0:6869:1971":{"id":"b:0:671-0:6869:1971","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6424:6072":{"id":"0:6424:6072","crate_id":0,"name":"into_raw_parts_with_alloc","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[862,4],"end":[869,5]},"visibility":"public","docs":"Decomposes a `Vec<T>` into its raw components.\n\nReturns the raw pointer to the underlying data, the length of the vector (in elements),\nthe allocated capacity of the data (in elements), and the allocator. These are the same\narguments in the same order as the arguments to [`from_raw_parts_in`].\n\nAfter calling this function, the caller is responsible for the\nmemory previously managed by the `Vec`. The only way to do\nthis is to convert the raw pointer, length, and capacity back\ninto a `Vec` with the [`from_raw_parts_in`] function, allowing\nthe destructor to perform the cleanup.\n\n[`from_raw_parts_in`]: Vec::from_raw_parts_in\n\n# Examples\n\n```\n#![feature(allocator_api, vec_into_raw_parts)]\n\nuse std::alloc::System;\n\nlet mut v: Vec<i32, System> = Vec::new_in(System);\nv.push(-1);\nv.push(0);\nv.push(1);\n\nlet (ptr, len, cap, alloc) = v.into_raw_parts_with_alloc();\n\nlet rebuilt = unsafe {\n    // We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    let ptr = ptr as *mut u32;\n\n    Vec::from_raw_parts_in(ptr, len, cap, alloc)\n};\nassert_eq!(rebuilt, [4294967295, 0, 1]);\n```","links":{"Vec::from_raw_parts_in":"0:6422:2065"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"generic","inner":"T"}}},{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"usize"},{"kind":"generic","inner":"A"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5338:742":{"id":"0:5338:742","crate_id":0,"name":"index","span":{"filename":"library/alloc/src/string.rs","begin":[2406,4],"end":[2408,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"resolved_path","inner":{"name":"ops::RangeToInclusive","id":"1:46409:197","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:0:671-0:2978:4931":{"id":"b:0:671-0:2978:4931","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:2978:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4924:7809":{"id":"0:4924:7809","crate_id":0,"name":"repeat","span":{"filename":"library/alloc/src/slice.rs","begin":[484,4],"end":[540,5]},"visibility":"public","docs":"Creates a vector by copying a slice `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!([1, 2].repeat(3), vec![1, 2, 1, 2, 1, 2]);\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nb\"0123456789abcdef\".repeat(usize::MAX);\n```","links":{},"attrs":["#[rustc_allow_incoherent_impl]","#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"repeat_generic_slice\", since = \"1.40.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:2656:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:738":{"id":"0:738","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[464,0],"end":[477,1]},"visibility":{"restricted":{"parent":"0:648:1793","path":"::borrow"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"cow_add\", since = \"1.14.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"1:2766:2888","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:740:268"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2505-0:1426:192":{"id":"b:1:2505-0:1426:192","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:1426:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2505-0:6740:3364":{"id":"b:1:2505-0:6740:3364","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4762:2546":{"id":"0:4762:2546","crate_id":0,"name":"into_raw","span":{"filename":"library/alloc/src/rc.rs","begin":[2304,4],"end":[2308,5]},"visibility":"public","docs":"Consumes the `Weak<T>` and turns it into a raw pointer.\n\nThis converts the weak pointer into a raw pointer, while still preserving the ownership of\none weak reference (the weak count is not modified by this operation). It can be turned\nback into the `Weak<T>` with [`from_raw`].\n\nThe same restrictions of accessing the target of the pointer as with\n[`as_ptr`] apply.\n\n# Examples\n\n```\nuse std::rc::{Rc, Weak};\n\nlet strong = Rc::new(\"hello\".to_owned());\nlet weak = Rc::downgrade(&strong);\nlet raw = weak.into_raw();\n\nassert_eq!(1, Rc::weak_count(&strong));\nassert_eq!(\"hello\", unsafe { &*raw });\n\ndrop(unsafe { Weak::from_raw(raw) });\nassert_eq!(0, Rc::weak_count(&strong));\n```\n\n[`from_raw`]: Weak::from_raw\n[`as_ptr`]: Weak::as_ptr","links":{"Weak::as_ptr":"0:4761:306","Weak::from_raw":"0:4763:2513"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:534:379":{"id":"0:534:379","crate_id":0,"name":"call_mut","span":{"filename":"library/alloc/src/boxed.rs","begin":[1994,4],"end":[1996,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["args",{"kind":"generic","inner":"Args"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:2920:2768","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":{"Other":"\"rust-call\""}},"has_body":true}},"0:6026:2762":{"id":"0:6026:2762","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[246,4],"end":[248,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:3352:3805":{"id":"b:1:2219-0:3352:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3352:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:7234":{"id":"0:7234","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[26,0],"end":[26,122]},"visibility":{"restricted":{"parent":"0:6257:9314","path":"::vec::partial_eq"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"partialeq_vec_for_ref_slice\", since = \"1.46.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},"items":["0:7238:595","0:7239:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4328:6330":{"id":"0:4328:6330","crate_id":0,"name":"from_vec_unchecked","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[340,4],"end":[343,5]},"visibility":"public","docs":"Creates a C-compatible string by consuming a byte vector,\nwithout checking for interior 0 bytes.\n\nTrailing 0 byte will be appended by this function.\n\nThis method is equivalent to [`CString::new`] except that no runtime\nassertion is made that `v` contains no 0 bytes, and it requires an\nactual byte vector, not anything that can be converted to one with Into.\n\n# Examples\n\n```\nuse std::ffi::CString;\n\nlet raw = b\"foo\".to_vec();\nunsafe {\n    let c_string = CString::from_vec_unchecked(raw);\n}\n```","links":{"`CString::new`":"0:4314:908"},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:1849:2885":{"id":"0:1849:2885","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2124,4],"end":[2128,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3409:5339":{"id":"0:3409:5339","crate_id":0,"name":"pop_front","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[817,4],"end":[819,5]},"visibility":"public","docs":"Removes the first element and returns it, or `None` if the list is\nempty.\n\nThis operation should compute in *O*(1) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\nassert_eq!(d.pop_front(), None);\n\nd.push_front(1);\nd.push_front(3);\nassert_eq!(d.pop_front(), Some(3));\nassert_eq!(d.pop_front(), Some(1));\nassert_eq!(d.pop_front(), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3160:354":{"id":"0:3160:354","crate_id":0,"name":"bitand","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1449,4],"end":[1454,5]},"visibility":"default","docs":"Returns the intersection of `self` and `rhs` as a new `BTreeSet<T>`.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet a = BTreeSet::from([1, 2, 3]);\nlet b = BTreeSet::from([2, 3, 4]);\n\nlet result = &a & &b;\nassert_eq!(result, BTreeSet::from([2, 3]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:6980:218":{"id":"b:1:2505-0:6980:218","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2567-0:6991:8288":{"id":"b:1:2567-0:6991:8288","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/error.rs","begin":[198,0],"end":[198,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"1:3352:10680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:9224"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"b:1:2216-0:6407:237":{"id":"b:1:2216-0:6407:237","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4869":{"id":"0:4869","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[64,51],"end":[64,60]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::SplitNMut","name":"SplitNMut","id":"1:9568:7704","glob":false}},"b:1:2505-0:1230:3671":{"id":"b:1:2505-0:1230:3671","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedError","id":"0:1230:3671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4580:2513":{"id":"0:4580:2513","crate_id":0,"name":"from_raw","span":{"filename":"library/alloc/src/rc.rs","begin":[915,4],"end":[922,5]},"visibility":"public","docs":"Constructs an `Rc<T>` from a raw pointer.\n\nThe raw pointer must have been previously returned by a call to\n[`Rc<U>::into_raw`][into_raw] where `U` must have the same size\nand alignment as `T`. This is trivially true if `U` is `T`.\nNote that if `U` is not `T` but has the same size and alignment, this is\nbasically like transmuting references of different types. See\n[`mem::transmute`] for more information on what\nrestrictions apply in this case.\n\nThe user of `from_raw` has to make sure a specific value of `T` is only\ndropped once.\n\nThis function is unsafe because improper use may lead to memory unsafety,\neven if the returned `Rc<T>` is never accessed.\n\n[into_raw]: Rc::into_raw\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet x = Rc::new(\"hello\".to_owned());\nlet x_ptr = Rc::into_raw(x);\n\nunsafe {\n    // Convert back to an `Rc` to prevent leak.\n    let x = Rc::from_raw(x_ptr);\n    assert_eq!(&*x, \"hello\");\n\n    // Further calls to `Rc::from_raw(x_ptr)` would be memory-unsafe.\n}\n\n// The memory was freed when `x` went out of scope above, so `x_ptr` is now dangling!\n```","links":{"Rc::into_raw":"0:4578:2546","`mem::transmute`":"1:1284:1407"},"attrs":["#[stable(feature = \"rc_raw\", since = \"1.17.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["ptr",{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:7246":{"id":"0:7246","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[28,0],"end":[28,118]},"visibility":{"restricted":{"parent":"0:6257:9314","path":"::vec::partial_eq"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"partialeq_vec_for_slice\", since = \"1.48.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"U"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:7250:595","0:7251:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6:659":{"id":"0:6:659","crate_id":0,"name":"format","span":{"filename":"library/alloc/src/macros.rs","begin":[116,0],"end":[121,1]},"visibility":"public","docs":"Creates a `String` using interpolation of runtime expressions.\n\nThe first argument `format!` receives is a format string. This must be a string\nliteral. The power of the formatting string is in the `{}`s contained.\n\nAdditional parameters passed to `format!` replace the `{}`s within the\nformatting string in the order given unless named or positional parameters\nare used; see [`std::fmt`] for more information.\n\nA common use for `format!` is concatenation and interpolation of strings.\nThe same convention is used with [`print!`] and [`write!`] macros,\ndepending on the intended destination of the string.\n\nTo convert a single value to a string, use the [`to_string`] method. This\nwill use the [`Display`] formatting trait.\n\n[`std::fmt`]: ../std/fmt/index.html\n[`print!`]: ../std/macro.print.html\n[`write!`]: core::write\n[`to_string`]: crate::string::ToString\n[`Display`]: core::fmt::Display\n\n# Panics\n\n`format!` panics if a formatting trait implementation returns an error.\nThis indicates an incorrect implementation\nsince `fmt::Write for String` never returns an error itself.\n\n# Examples\n\n```\nformat!(\"test\");\nformat!(\"hello {}\", \"world!\");\nformat!(\"x = {}, y = {y}\", 10, y = 30);\nlet (x, y) = (1, 2);\nformat!(\"{x} + {y} = 3\");\n```","links":{"core::fmt::Display":"1:8573:118","core::write":"1:14:2221","crate::string::ToString":"0:5360:226"},"attrs":["#[macro_export]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"format_macro\"]"],"deprecation":null,"kind":"macro","inner":"macro_rules! format {\n    ($($arg:tt)*) => { ... };\n}"},"a:1:7709:3766-0:6779:3475":{"id":"a:1:7709:3766-0:6779:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6779:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2708:2329-0:768:96":{"id":"a:1:2708:2329-0:768:96","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6869:1971":{"id":"0:6869:1971","crate_id":0,"name":"TryReserveError","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[61,0],"end":[63,1]},"visibility":"public","docs":"The error type for `try_reserve` methods.","links":{},"attrs":["#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:4268","a:1:2658:222-0:6869:1971","a:1:2644:214-0:6869:1971","a:1:2708:2329-0:6869:1971","a:1:7709:3766-0:6869:1971","a:1:7710:3767-0:6869:1971","b:0:5362-0:6869:1971","b:0:671-0:6869:1971","b:1:2567-0:6869:1971","b:1:2510-0:6869:1971","b:1:2505-0:6869:1971","b:1:2216-0:6869:1971","b:1:3303-0:6869:1971","b:1:2219-0:6869:1971","b:1:2499-0:6869:1971","b:1:2495-0:6869:1971","0:6871","0:6873","0:6874","0:6876","0:6877","0:6879","0:4270","0:4274","0:4279"]}},"b:0:671-0:6991:8288":{"id":"b:0:671-0:6991:8288","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3949":{"id":"0:3949","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[168,0],"end":[168,40]},"visibility":{"restricted":{"parent":"0:3889:768","path":"::collections::vec_deque::iter"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5812:9278":{"id":"0:5812:9278","crate_id":0,"name":"wake_by_ref","span":{"filename":"library/alloc/src/task.rs","begin":[89,4],"end":[91,5]},"visibility":"default","docs":"Wake this task without consuming the waker.\n\nIf an executor supports a cheaper way to wake without consuming the\nwaker, it should override this method. By default, it clones the\n[`Arc`] and calls [`wake`] on the clone.\n\n[`wake`]: Wake::wake","links":{"Wake::wake":"0:5811:9272","`Arc`":"0:5513:69"},"attrs":["#[stable(feature = \"wake_trait\", since = \"1.51.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6732":{"id":"0:6732","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/alloc.rs","begin":[53,31],"end":[53,36]},"visibility":{"restricted":{"parent":"0:92:279","path":"::alloc"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6733:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3932":{"id":"0:3932","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[111,0],"end":[154,1]},"visibility":{"restricted":{"parent":"0:3889:768","path":"::collections::vec_deque::iter"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3935:2759","0:3936:6115","0:3938:6116","0:3941:6117"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1876:595":{"id":"0:1876:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2170,4],"end":[2172,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:4016:238":{"id":"a:1:2708:2329-0:4016:238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2644:214-0:3900:3356":{"id":"a:1:2644:214-0:3900:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5355:538":{"id":"0:5355:538","crate_id":0,"name":"deref_mut","span":{"filename":"library/alloc/src/string.rs","begin":[2467,4],"end":[2469,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:1338:3356":{"id":"b:1:2505-0:1338:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7709:3766-0:6822:3475":{"id":"a:1:7709:3766-0:6822:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1672:782":{"id":"0:1672:782","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1797,4],"end":[1799,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7280:595":{"id":"0:7280:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[36,0],"end":[36,117]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"U"},"len":"N"}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:676:109":{"id":"a:1:2644:214-0:676:109","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5046":{"id":"0:5046","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[40,29],"end":[40,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::Utf8Error","name":"Utf8Error","id":"1:49909:6209","glob":false}},"b:1:2216-0:6740:3364":{"id":"b:1:2216-0:6740:3364","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5454:668":{"id":"0:5454:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[2995,4],"end":[2997,5]},"visibility":"default","docs":"Allocates an owned [`String`] from a single character.\n\n# Example\n```rust\nlet c: char = 'a';\nlet s: String = String::from(c);\nassert_eq!(\"a\", &s[..]);\n```","links":{"`String`":"0:6980:218"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["c",{"kind":"primitive","inner":"char"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:6740:3364":{"id":"b:1:2219-0:6740:3364","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6708":{"id":"0:6708","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3216,0],"end":[3238,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[cfg(not(test))]","#[stable(feature = \"box_from_vec\", since = \"1.20.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6711:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:350:59":{"id":"0:350:59","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/boxed.rs","begin":[1265,4],"end":[1272,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3398:4997":{"id":"0:3398:4997","crate_id":0,"name":"contains","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[665,4],"end":[670,5]},"visibility":"public","docs":"Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.\n\nThis operation should compute linearly in *O*(*n*) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut list: LinkedList<u32> = LinkedList::new();\n\nlist.push_back(0);\nlist.push_back(1);\nlist.push_back(2);\n\nassert_eq!(list.contains(&0), true);\nassert_eq!(list.contains(&10), false);\n```","links":{},"attrs":["#[stable(feature = \"linked_list_contains\", since = \"1.12.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["x",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:110:1077":{"id":"0:110:1077","crate_id":0,"name":"realloc","span":{"filename":"library/alloc/src/alloc.rs","begin":[131,0],"end":[133,1]},"visibility":"public","docs":"Reallocate memory with the global allocator.\n\nThis function forwards calls to the [`GlobalAlloc::realloc`] method\nof the allocator registered with the `#[global_allocator]` attribute\nif there is one, or the `std` crate’s default.\n\nThis function is expected to be deprecated in favor of the `realloc` method\nof the [`Global`] type when it and the [`Allocator`] trait become stable.\n\n# Safety\n\nSee [`GlobalAlloc::realloc`].","links":{"`Allocator`":"1:11946:1969","`GlobalAlloc::realloc`":"1:11895:1077","`Global`":"0:6725:1970"},"attrs":["#[stable(feature = \"global_alloc\", since = \"1.28.0\")]","#[must_use = \"losing the pointer will leak memory\"]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["ptr",{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50943:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["new_size",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:4429":{"id":"0:4429","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[555,0],"end":[555,22]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"fmt_internals\", issue = \"none\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::rt","name":"rt","id":"1:8515:1122","glob":false}},"0:6493:3448":{"id":"0:6493:3448","crate_id":0,"name":"drain","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1984,4],"end":[2012,5]},"visibility":"public","docs":"Removes the specified range from the vector in bulk, returning all\nremoved elements as an iterator. If the iterator is dropped before\nbeing fully consumed, it drops the remaining removed elements.\n\nThe returned iterator keeps a mutable borrow on the vector to optimize\nits implementation.\n\n# Panics\n\nPanics if the starting point is greater than the end point or if\nthe end point is greater than the length of the vector.\n\n# Leaking\n\nIf the returned iterator goes out of scope without being dropped (due to\n[`mem::forget`], for example), the vector may have lost and leaked\nelements arbitrarily, including elements outside the range.\n\n# Examples\n\n```\nlet mut v = vec![1, 2, 3];\nlet u: Vec<_> = v.drain(1..).collect();\nassert_eq!(v, &[1]);\nassert_eq!(u, &[2, 3]);\n\n// A full range clears the vector, like `clear()` does\nv.drain(..);\nassert_eq!(v, &[]);\n```","links":{"`mem::forget`":"1:1592:658"},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["range",{"kind":"generic","inner":"R"}]],"output":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3066:3663","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6083:3475":{"id":"0:6083:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[32,0],"end":[46,1]},"visibility":"public","docs":"An iterator that moves out of a vector.\n\nThis `struct` is created by the `into_iter` method on [`Vec`](super::Vec)\n(provided by the [`IntoIterator`] trait).\n\n# Example\n\n```\nlet v = vec![0, 1, 2];\nlet iter: std::vec::IntoIter<_> = v.into_iter();\n```","links":{"super::Vec":"0:6407:237","`IntoIterator`":"1:7016:147"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_insignificant_dtor]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:6096","a:1:2708:2329-0:6083:3475","a:1:7709:3766-0:6083:3475","a:1:7710:3767-0:6083:3475","b:0:671-0:6083:3475","b:1:7020-0:6083:3475","b:1:2510-0:6083:3475","b:1:2505-0:6083:3475","b:1:2216-0:6083:3475","b:1:3303-0:6083:3475","b:1:2219-0:6083:3475","b:1:2499-0:6083:3475","b:1:2495-0:6083:3475","0:6092","0:6106","0:6110","0:6113","0:6116","0:6128","0:6133","0:6137","0:6140","0:6150","0:6154"]}},"0:5750:668":{"id":"0:5750:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/sync.rs","begin":[2570,4],"end":[2572,5]},"visibility":"default","docs":"Allocate a reference-counted `str` and copy `v` into it.\n\n# Example\n\n```\n# use std::sync::Arc;\nlet unique: String = \"eggplant\".to_owned();\nlet shared: Arc<str> = Arc::from(unique);\nassert_eq!(\"eggplant\", &shared[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:415:668":{"id":"0:415:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1517,4],"end":[1522,5]},"visibility":"default","docs":"Converts a `Cow<'_, [T]>` into a `Box<[T]>`\n\nWhen `cow` is the `Cow::Borrowed` variant, this\nconversion allocates on the heap and copies the\nunderlying slice. Otherwise, it will try to reuse the owned\n`Vec`'s allocation.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["cow",{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5350:743":{"id":"0:5350:743","crate_id":0,"name":"index_mut","span":{"filename":"library/alloc/src/string.rs","begin":[2449,4],"end":[2451,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"resolved_path","inner":{"name":"ops::RangeToInclusive","id":"1:46409:197","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4334:6387":{"id":"0:4334:6387","crate_id":0,"name":"into_string","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[473,4],"end":[478,5]},"visibility":"public","docs":"Converts the `CString` into a [`String`] if it contains valid UTF-8 data.\n\nOn failure, ownership of the original `CString` is returned.\n\n# Examples\n\n```\nuse std::ffi::CString;\n\nlet valid_utf8 = vec![b'f', b'o', b'o'];\nlet cstring = CString::new(valid_utf8).expect(\"CString::new failed\");\nassert_eq!(cstring.into_string().expect(\"into_string() call failed\"), \"foo\");\n\nlet invalid_utf8 = vec![b'f', 0xff, b'o', b'o'];\nlet cstring = CString::new(invalid_utf8).expect(\"CString::new failed\");\nlet err = cstring.into_string().err().expect(\"into_string().err() failed\");\nassert_eq!(err.utf8_error().valid_up_to(), 1);\n```","links":{"`String`":"0:6980:218"},"attrs":["#[stable(feature = \"cstring_into\", since = \"1.7.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7057:4069":{"id":"0:7057:4069","crate_id":0,"name":"DrainFilter","span":{"filename":"library/alloc/src/vec/drain_filter.rs","begin":[23,0],"end":[46,1]},"visibility":"public","docs":"An iterator which uses a closure to determine if an element should be removed.\n\nThis struct is created by [`Vec::drain_filter`].\nSee its documentation for more.\n\n# Example\n\n```\n#![feature(drain_filter)]\n\nlet mut v = vec![0, 1, 2];\nlet iter: std::vec::DrainFilter<_, _> = v.drain_filter(|x| *x % 2 == 0);\n```","links":{"`Vec::drain_filter`":"0:6640:3974"},"attrs":["#[unstable(feature = \"drain_filter\", reason = \"recently added\", issue =\n\"43244\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["0:5878","a:1:2658:222-0:7057:4069","a:1:2644:214-0:7057:4069","a:1:2708:2329-0:7057:4069","a:1:7709:3766-0:7057:4069","a:1:7710:3767-0:7057:4069","b:1:7020-0:7057:4069","b:1:2510-0:7057:4069","b:1:2505-0:7057:4069","b:1:2216-0:7057:4069","b:1:3303-0:7057:4069","b:1:2219-0:7057:4069","b:1:2499-0:7057:4069","b:1:2495-0:7057:4069","0:7068","0:5884","0:5891"]}},"0:1769:4091":{"id":"0:1769:4091","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1998,4],"end":[2000,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:5964:3449":{"id":"b:1:2510-0:5964:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1658:2750":{"id":"0:1658:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1773,4],"end":[1773,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}}},"b:1:2495-0:1301:94":{"id":"b:1:2495-0:1301:94","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2219-0:215:2341":{"id":"b:1:2219-0:215:2341","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5931:2759":{"id":"0:5931:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/vec/splice.rs","begin":[45,4],"end":[47,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7130:154","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6640:3974":{"id":"0:6640:3974","crate_id":0,"name":"drain_filter","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2987,4],"end":[2999,5]},"visibility":"public","docs":"Creates an iterator which uses a closure to determine if an element should be removed.\n\nIf the closure returns true, then the element is removed and yielded.\nIf the closure returns false, the element will remain in the vector and will not be yielded\nby the iterator.\n\nUsing this method is equivalent to the following code:\n\n```\n# let some_predicate = |x: &mut i32| { *x == 2 || *x == 3 || *x == 6 };\n# let mut vec = vec![1, 2, 3, 4, 5, 6];\nlet mut i = 0;\nwhile i < vec.len() {\n    if some_predicate(&mut vec[i]) {\n        let val = vec.remove(i);\n        // your code here\n    } else {\n        i += 1;\n    }\n}\n\n# assert_eq!(vec, vec![1, 4, 5]);\n```\n\nBut `drain_filter` is easier to use. `drain_filter` is also more efficient,\nbecause it can backshift the elements of the array in bulk.\n\nNote that `drain_filter` also lets you mutate every element in the filter closure,\nregardless of whether you choose to keep or remove it.\n\n# Examples\n\nSplitting an array into evens and odds, reusing the original allocation:\n\n```\n#![feature(drain_filter)]\nlet mut numbers = vec![1, 2, 3, 4, 5, 6, 8, 9, 11, 13, 14, 15];\n\nlet evens = numbers.drain_filter(|x| *x % 2 == 0).collect::<Vec<_>>();\nlet odds = numbers;\n\nassert_eq!(evens, vec![2, 4, 6, 8, 14]);\nassert_eq!(odds, vec![1, 3, 5, 9, 11, 13, 15]);\n```","links":{},"attrs":["#[unstable(feature = \"drain_filter\", reason = \"recently added\", issue =\n\"43244\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["filter",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:7057:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3058:4039":{"id":"0:3058:4039","crate_id":0,"name":"split_off","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1079,4],"end":[1085,5]},"visibility":"public","docs":"Splits the collection into two at the value. Returns a new collection\nwith all elements greater than or equal to the value.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeSet;\n\nlet mut a = BTreeSet::new();\na.insert(1);\na.insert(2);\na.insert(3);\na.insert(17);\na.insert(41);\n\nlet b = a.split_off(&3);\n\nassert_eq!(a.len(), 2);\nassert_eq!(b.len(), 3);\n\nassert!(a.contains(&1));\nassert!(a.contains(&2));\n\nassert!(b.contains(&3));\nassert!(b.contains(&17));\nassert!(b.contains(&41));\n```","links":{},"attrs":["#[stable(feature = \"btree_split_off\", since = \"1.11.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6713:668":{"id":"0:6713:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3250,4],"end":[3252,5]},"visibility":"default","docs":"Allocate a `Vec<u8>` and fill it with a UTF-8 string.\n\n# Examples\n\n```\nassert_eq!(Vec::from(\"123\"), vec![b'1', b'2', b'3']);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2658:222-0:6980:218":{"id":"a:1:2658:222-0:6980:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6417":{"id":"0:6417","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[593,0],"end":[2333,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6420:2010","0:6421:2021","0:6422:2065","0:6423:6474","0:6424:6072","0:6425:2020","0:6426:2086","0:6427:2104","0:6428:2097","0:6429:2105","0:6430:2111","0:6431:3422","0:6432:2419","0:6433:5696","0:6434:3433","0:6435:4583","0:6436:306","0:6437:2192","0:6438:283","0:6439:7494","0:6440:9784","0:6442:3797","0:6444:3521","0:6446:3348","0:6449:5879","0:6470:9833","0:6474:9832","0:6488:3275","0:6489:9872","0:6490:3231","0:6491:3320","0:6493:3448","0:6495:3451","0:6496:782","0:6497:2762","0:6498:4039","0:6500:5901","0:6502:1585","0:6504:7711","0:6505:9983"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2644:214-0:4016:238":{"id":"a:1:2644:214-0:4016:238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4435":{"id":"0:4435","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[561,39],"end":[561,48]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::Arguments","name":"Arguments","id":"1:49113:73","glob":false}},"0:2941":{"id":"0:2941","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[143,0],"end":[147,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:2943:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:575":{"id":"0:575","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2091,0],"end":[2101,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"generator_trait\", issue = \"43122\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Generator","id":"1:2951:2334","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Generator","id":"1:2951:2334","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"G"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:579:240","0:580:206","0:581:2788"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4593:7378":{"id":"0:4593:7378","crate_id":0,"name":"unwrap_or_clone","span":{"filename":"library/alloc/src/rc.rs","begin":[1292,4],"end":[1294,5]},"visibility":"public","docs":"If we have the only reference to `T` then unwrap it. Otherwise, clone `T` and return the\nclone.\n\nAssuming `rc_t` is of type `Rc<T>`, this function is functionally equivalent to\n`(*rc_t).clone()`, but will avoid cloning the inner value where possible.\n\n# Examples\n\n```\n#![feature(arc_unwrap_or_clone)]\n# use std::{ptr, rc::Rc};\nlet inner = String::from(\"test\");\nlet ptr = inner.as_ptr();\n\nlet rc = Rc::new(inner);\nlet inner = Rc::unwrap_or_clone(rc);\n// The inner value was not cloned\nassert!(ptr::eq(ptr, inner.as_ptr()));\n\nlet rc = Rc::new(inner);\nlet rc2 = rc.clone();\nlet inner = Rc::unwrap_or_clone(rc);\n// Because there were 2 references, we had to clone the inner value.\nassert!(!ptr::eq(ptr, inner.as_ptr()));\n// `rc2` is the last reference, so when we unwrap it we get back\n// the original `String`.\nlet inner = Rc::unwrap_or_clone(rc2);\nassert!(ptr::eq(ptr, inner.as_ptr()));\n```","links":{},"attrs":["#[inline]","#[unstable(feature = \"arc_unwrap_or_clone\", issue = \"93610\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6615:757":{"id":"0:6615:757","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2802,4],"end":[2804,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7016:147","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4952:7823":{"id":"0:4952:7823","crate_id":0,"name":"join","span":{"filename":"library/alloc/src/slice.rs","begin":[720,4],"end":[735,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["sep",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:6869:1971":{"id":"b:1:2219-0:6869:1971","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:319:2221":{"id":"0:319:2221","crate_id":0,"name":"write","span":{"filename":"library/alloc/src/boxed.rs","begin":[865,4],"end":[870,5]},"visibility":"public","docs":"Writes the value and converts to `Box<T, A>`.\n\nThis method converts the box similarly to [`Box::assume_init`] but\nwrites `value` into it before conversion thus guaranteeing safety.\nIn some scenarios use of this method may improve performance because\nthe compiler may be able to optimize copying from stack.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nlet big_box = Box::<[usize; 1024]>::new_uninit();\n\nlet mut array = [0; 1024];\nfor (i, place) in array.iter_mut().enumerate() {\n    *place = i;\n}\n\n// The optimizer may be able to elide this copy, so previous code writes\n// to heap directly.\nlet big_box = Box::write(big_box, array);\n\nfor (i, x) in big_box.iter().enumerate() {\n    assert_eq!(*x, i);\n}\n```","links":{"`Box::assume_init`":"0:318:329"},"attrs":["#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["boxed",{"kind":"generic","inner":"Self"}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:7020-0:6822:3475":{"id":"b:1:7020-0:6822:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:6040:668":{"id":"0:6040:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/cow.rs","begin":[14,4],"end":[16,5]},"visibility":"default","docs":"Creates a [`Borrowed`] variant of [`Cow`]\nfrom a slice.\n\nThis conversion does not allocate or clone the data.\n\n[`Borrowed`]: crate::borrow::Cow::Borrowed","links":{"crate::borrow::Cow::Borrowed":"0:679:2676","`Cow`":"0:676:109"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4968":{"id":"0:4968","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[782,0],"end":[806,1]},"visibility":{"restricted":{"parent":"0:4810:1314","path":"::slice"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"slice","inner":{"kind":"generic","inner":"T"}},"items":["0:4970:2677","0:4971:2903","0:4972:2911"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5356:8746":{"id":"0:5356:8746","crate_id":0,"name":"ParseError","span":{"filename":"library/alloc/src/string.rs","begin":[2478,0],"end":[2478,48]},"visibility":"public","docs":"A type alias for [`Infallible`].\n\nThis alias exists for backwards compatibility, and may be eventually deprecated.\n\n[`Infallible`]: core::convert::Infallible \"convert::Infallible\"","links":{"core::convert::Infallible":"1:39242:8747"},"attrs":["#[stable(feature = \"str_parse_error\", since = \"1.5.0\")]"],"deprecation":null,"kind":"typedef","inner":{"type":{"kind":"resolved_path","inner":{"name":"core::convert::Infallible","id":"1:39242:8747","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"generics":{"params":[],"where_predicates":[]}}},"0:285:1758":{"id":"0:285:1758","crate_id":0,"name":"new_uninit","span":{"filename":"library/alloc/src/boxed.rs","begin":[244,4],"end":[246,5]},"visibility":"public","docs":"Constructs a new box with uninitialized contents.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nlet mut five = Box::<u32>::new_uninit();\n\nlet five = unsafe {\n    // Deferred initialization:\n    five.as_mut_ptr().write(5);\n\n    five.assume_init()\n};\n\nassert_eq!(*five, 5)\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5748:668":{"id":"0:5748:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/sync.rs","begin":[2550,4],"end":[2553,5]},"visibility":"default","docs":"Allocate a reference-counted `str` and copy `v` into it.\n\n# Example\n\n```\n# use std::sync::Arc;\nlet shared: Arc<str> = Arc::from(\"eggplant\");\nassert_eq!(\"eggplant\", &shared[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4285":{"id":"0:4285","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/mod.rs","begin":[86,48],"end":[86,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"self::c_str::NulError","name":"NulError","id":"0:6914:6204","glob":false}},"a:1:7710:3767-0:6407:237":{"id":"a:1:7710:3767-0:6407:237","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5945":{"id":"0:5945","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[91,0],"end":[91,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"self::drain::Drain","name":"Drain","id":"0:5964:3449","glob":false}},"0:5519":{"id":"0:5519","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[252,0],"end":[252,55]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:740:268":{"id":"0:740:268","crate_id":0,"name":"add_assign","span":{"filename":"library/alloc/src/borrow.rs","begin":[465,4],"end":[476,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6922:595":{"id":"0:6922:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[134,16],"end":[134,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:676:109":{"id":"b:1:2216-0:676:109","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2219-0:771:3221":{"id":"b:1:2219-0:771:3221","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PeekMut","id":"0:771:3221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:540":{"id":"0:540","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2007,0],"end":[2007,94]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Unsize","id":"1:2652:2330","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"CoerceUnsized","id":"1:3181:2331","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5932":{"id":"0:5932","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/splice.rs","begin":[51,0],"end":[51,73]},"visibility":{"restricted":{"parent":"0:5911:8668","path":"::vec::splice"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"vec_splice\", since = \"1.21.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Splice","id":"0:7074:9310","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6431:3422":{"id":"0:6431:3422","crate_id":0,"name":"shrink_to","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1065,4],"end":[1069,5]},"visibility":"public","docs":"Shrinks the capacity of the vector with a lower bound.\n\nThe capacity will remain at least as large as both the length\nand the supplied value.\n\nIf the current capacity is less than the lower limit, this is a no-op.\n\n# Examples\n\n```\nlet mut vec = Vec::with_capacity(10);\nvec.extend([1, 2, 3]);\nassert_eq!(vec.capacity(), 10);\nvec.shrink_to(4);\nassert!(vec.capacity() >= 4);\nvec.shrink_to(0);\nassert!(vec.capacity() >= 3);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shrink_to\", since = \"1.56.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["min_capacity",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5362":{"id":"0:5362","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2526,0],"end":[2540,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":"# Panics\n\nIn this implementation, the `to_string` method panics\nif the `Display` implementation returns an error.\nThis indicates an incorrect `Display` implementation\nsince `fmt::Write for String` never returns an error itself.","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5360:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"generic","inner":"T"},"items":["0:5364:1398"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2510-0:5513:69":{"id":"b:1:2510-0:5513:69","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2644:214-0:1301:94":{"id":"a:1:2644:214-0:1301:94","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5230":{"id":"0:5230","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[1966,0],"end":[1970,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf16Error","id":"0:7002:8296","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5231:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5114:2337":{"id":"0:5114:2337","crate_id":0,"name":"from_boxed_utf8_unchecked","span":{"filename":"library/alloc/src/str.rs","begin":[618,0],"end":[620,1]},"visibility":"public","docs":"Converts a boxed slice of bytes to a boxed string slice without checking\nthat the string contains valid UTF-8.\n\n# Examples\n\nBasic usage:\n\n```\nlet smile_utf8 = Box::new([226, 152, 186]);\nlet smile = unsafe { std::str::from_boxed_utf8_unchecked(smile_utf8) };\n\nassert_eq!(\"☺\", &*smile);\n```","links":{},"attrs":["#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:3155:359":{"id":"0:3155:359","crate_id":0,"name":"bitxor","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1424,4],"end":[1429,5]},"visibility":"default","docs":"Returns the symmetric difference of `self` and `rhs` as a new `BTreeSet<T>`.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet a = BTreeSet::from([1, 2, 3]);\nlet b = BTreeSet::from([2, 3, 4]);\n\nlet result = &a ^ &b;\nassert_eq!(result, BTreeSet::from([1, 4]));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["rhs",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1225":{"id":"0:1225","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[93,0],"end":[97,1]},"visibility":{"restricted":{"parent":"0:1169:3668","path":"::collections::btree::map::entry"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"debug_btree_map\", since = \"1.12.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:1216:3670","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1229:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:50510:8714":{"id":"1:50510:8714","crate_id":1,"name":"strip_suffix_of","span":{"filename":"/rust-lang-rust/library/core/src/str/pattern.rs","begin":[910,4],"end":[910,93]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"resolved_path","inner":{"name":"CharPredicateSearcher","id":"1:50488:10935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11033:7919","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1777":{"id":"0:1777","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2015,0],"end":[2019,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:1404:3833","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1781:782"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4206:3475":{"id":"0:4206:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2747,4],"end":[2747,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"0:4856":{"id":"0:4856","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[58,28],"end":[58,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::IterMut","name":"IterMut","id":"1:9281:3805","glob":false}},"b:1:2219-0:4016:238":{"id":"b:1:2219-0:4016:238","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2216-0:6787:192":{"id":"b:1:2216-0:6787:192","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:6787:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7710:3767-0:3096:4069":{"id":"a:1:7710:3767-0:3096:4069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3096:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2658:222-0:6779:3475":{"id":"a:1:2658:222-0:6779:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6779:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4397:650":{"id":"0:4397:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[960,4],"end":[962,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:1426:192":{"id":"b:1:2216-0:1426:192","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:1426:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4193:742":{"id":"0:4193:742","crate_id":0,"name":"index","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2724,4],"end":[2726,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6044:668":{"id":"0:6044:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/cow.rs","begin":[27,4],"end":[29,5]},"visibility":"default","docs":"Creates an [`Owned`] variant of [`Cow`]\nfrom an owned instance of [`Vec`].\n\nThis conversion does not allocate or clone the data.\n\n[`Owned`]: crate::borrow::Cow::Owned","links":{"`Vec`":"0:6407:237","`Cow`":"0:676:109","crate::borrow::Cow::Owned":"0:682:2677"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4138:5879":{"id":"0:4138:5879","crate_id":0,"name":"retain_mut","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2000,4],"end":[2032,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` for which `f(&e)` returns false.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.extend(1..5);\nbuf.retain_mut(|x| if *x % 2 == 0 {\n    *x += 1;\n    true\n} else {\n    false\n});\nassert_eq!(buf, [3, 5]);\n```","links":{},"attrs":["#[stable(feature = \"vec_retain_mut\", since = \"1.61.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4837":{"id":"0:4837","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[46,42],"end":[46,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"slice_from_ptr_range\", issue = \"89792\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::from_ptr_range","name":"from_ptr_range","id":"1:10151:7679","glob":false}},"0:1621:782":{"id":"0:1621:782","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1714,4],"end":[1716,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5226:6299":{"id":"0:5226:6299","crate_id":0,"name":"into_bytes","span":{"filename":"library/alloc/src/string.rs","begin":[1924,4],"end":[1926,5]},"visibility":"public","docs":"Returns the bytes that were attempted to convert to a `String`.\n\nThis method is carefully constructed to avoid allocation. It will\nconsume the error, moving out the bytes, so that a copy of the bytes\ndoes not need to be made.\n\n# Examples\n\nBasic usage:\n\n```\n// some invalid bytes, in a vector\nlet bytes = vec![0, 159];\n\nlet value = String::from_utf8(bytes);\n\nassert_eq!(vec![0, 159], value.unwrap_err().into_bytes());\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3599:757":{"id":"0:3599:757","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1847,4],"end":[1849,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3352:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1821:409":{"id":"0:1821:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2070,4],"end":[2072,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:7057:4069":{"id":"b:1:2219-0:7057:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:7057:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1794:2753":{"id":"0:1794:2753","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2036,4],"end":[2038,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:1359:3475":{"id":"a:1:7710:3767-0:1359:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1359:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3418:571":{"id":"0:3418:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1005,4],"end":[1021,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5405:668":{"id":"0:5405:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[2810,4],"end":[2812,5]},"visibility":"default","docs":"Converts a [`String`] reference into a [`Borrowed`] variant.\nNo heap allocation is performed, and the string\nis not copied.\n\n# Example\n\n```\n# use std::borrow::Cow;\nlet s = \"eggplant\".to_string();\nassert_eq!(Cow::from(&s), Cow::Borrowed(\"eggplant\"));\n```\n\n[`Borrowed`]: crate::borrow::Cow::Borrowed \"borrow::Cow::Borrowed\"","links":{"`String`":"0:6980:218","crate::borrow::Cow::Borrowed":"0:679:2676"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:2970:4926":{"id":"a:1:7710:3767-0:2970:4926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:2970:4926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3511:5425":{"id":"0:3511:5425","crate_id":0,"name":"as_cursor","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1409,4],"end":[1411,5]},"visibility":"public","docs":"Returns a read-only cursor pointing to the current element.\n\nThe lifetime of the returned `Cursor` is bound to that of the\n`CursorMut`, which means it cannot outlive the `CursorMut` and that the\n`CursorMut` is frozen for the lifetime of the `Cursor`.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Cursor","id":"0:3462:5277","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4310":{"id":"0:4310","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[167,0],"end":[215,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4311:2629","0:4312:6299"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:796:411":{"id":"0:796:411","crate_id":0,"name":"clone_from","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[338,4],"end":[340,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:859:3356":{"id":"b:1:2505-0:859:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:732:180":{"id":"0:732:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/borrow.rs","begin":[441,4],"end":[441,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}},"0:7025:595":{"id":"0:7025:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[2253,0],"end":[2253,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5172:2866":{"id":"0:5172:2866","crate_id":0,"name":"from_raw_parts","span":{"filename":"library/alloc/src/string.rs","begin":[810,4],"end":[812,5]},"visibility":"public","docs":"Creates a new `String` from a length, capacity, and pointer.\n\n# Safety\n\nThis is highly unsafe, due to the number of invariants that aren't\nchecked:\n\n* The memory at `buf` needs to have been previously allocated by the\n  same allocator the standard library uses, with a required alignment of exactly 1.\n* `length` needs to be less than or equal to `capacity`.\n* `capacity` needs to be the correct value.\n* The first `length` bytes at `buf` need to be valid UTF-8.\n\nViolating these may cause problems like corrupting the allocator's\ninternal data structures. For example, it is normally **not** safe to\nbuild a `String` from a pointer to a C `char` array containing UTF-8\n_unless_ you are certain that array was originally allocated by the\nRust standard library's allocator.\n\nThe ownership of `buf` is effectively transferred to the\n`String` which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::mem;\n\nunsafe {\n    let s = String::from(\"hello\");\n\n    // Prevent automatically dropping the String's data\n    let mut s = mem::ManuallyDrop::new(s);\n\n    let ptr = s.as_mut_ptr();\n    let len = s.len();\n    let capacity = s.capacity();\n\n    let s = String::from_raw_parts(ptr, len, capacity);\n\n    assert_eq!(String::from(\"hello\"), s);\n}\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["buf",{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}}],["length",{"kind":"primitive","inner":"usize"}],["capacity",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:0:671-0:4016:238":{"id":"b:0:671-0:4016:238","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:7017":{"id":"0:7017","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2253,0],"end":[2253,28]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(unused_lifetimes)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7020:595","0:7021:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2510-0:6957:6203":{"id":"b:1:2510-0:6957:6203","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:7020-0:3794:3805":{"id":"b:1:7020-0:3794:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"b:1:3303-0:1216:3670":{"id":"b:1:3303-0:1216:3670","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:1216:3670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:514:2759":{"id":"0:514:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/boxed.rs","begin":[1963,4],"end":[1965,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"1:7130:154","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5570:1003":{"id":"0:5570:1003","crate_id":0,"name":"pin","span":{"filename":"library/alloc/src/sync.rs","begin":[550,4],"end":[552,5]},"visibility":"public","docs":"Constructs a new `Pin<Arc<T>>`. If `T` does not implement `Unpin`, then\n`data` will be pinned in memory and unable to be moved.","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"pin\", since = \"1.33.0\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["data",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Pin","id":"1:48133:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1235:3668":{"id":"0:1235:3668","crate_id":0,"name":"entry","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[105,4],"end":[105,41]},"visibility":"public","docs":"The entry in the map that was already occupied.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:1216:3670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}},"0:634":{"id":"0:634","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2350,0],"end":[2368,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"string_box_error\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}}},"items":["0:635:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5220:8669":{"id":"0:5220:8669","crate_id":0,"name":"replace_range","span":{"filename":"library/alloc/src/string.rs","begin":[1799,4],"end":[1827,5]},"visibility":"public","docs":"Removes the specified range in the string,\nand replaces it with the given string.\nThe given string doesn't need to be the same length as the range.\n\n# Panics\n\nPanics if the starting point or end point do not lie on a [`char`]\nboundary, or if they're out of bounds.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"α is alpha, β is beta\");\nlet beta_offset = s.find('β').unwrap_or(s.len());\n\n// Replace the range up until the β from the string\ns.replace_range(..beta_offset, \"Α is capital alpha; \");\nassert_eq!(s, \"Α is capital alpha; β is beta\");\n```","links":{"`char`":"1:58430:10458"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"splice\", since = \"1.27.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["range",{"kind":"generic","inner":"R"}],["replace_with",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3066:3663","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:5964:3449":{"id":"b:1:2219-0:5964:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4347:571":{"id":"0:4347:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[701,4],"end":[705,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:3474:5281":{"id":"b:1:2216-0:3474:5281","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CursorMut","id":"0:3474:5281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6412":{"id":"0:6412","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[409,0],"end":[591,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:6414:908","0:6415:2019","0:6416:2866"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5884":{"id":"0:5884","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain_filter.rs","begin":[116,0],"end":[151,1]},"visibility":{"restricted":{"parent":"0:5868:3974","path":"::vec::drain_filter"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"drain_filter\", reason = \"recently added\", issue =\n\"43244\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:7057:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:5888:2750","0:5889:921","0:5890:2751"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5591:329":{"id":"0:5591:329","crate_id":0,"name":"assume_init","span":{"filename":"library/alloc/src/sync.rs","begin":[831,4],"end":[833,5]},"visibility":"public","docs":"Converts to `Arc<[T]>`.\n\n# Safety\n\nAs with [`MaybeUninit::assume_init`],\nit is up to the caller to guarantee that the inner value\nreally is in an initialized state.\nCalling this when the content is not yet fully initialized\ncauses immediate undefined behavior.\n\n[`MaybeUninit::assume_init`]: mem::MaybeUninit::assume_init\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(get_mut_unchecked)]\n\nuse std::sync::Arc;\n\nlet mut values = Arc::<[u32]>::new_uninit_slice(3);\n\n// Deferred initialization:\nlet data = Arc::get_mut(&mut values).unwrap();\ndata[0].write(1);\ndata[1].write(2);\ndata[2].write(3);\n\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [1, 2, 3])\n```","links":{"mem::MaybeUninit::assume_init":"1:1523:329"},"attrs":["#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:520:2762":{"id":"0:520:2762","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/boxed.rs","begin":[1975,4],"end":[1977,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7073:650":{"id":"0:7073:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/vec/drain_filter.rs","begin":[22,9],"end":[22,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:1404:3833":{"id":"b:1:2216-0:1404:3833","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:1404:3833","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2219-0:5424:3449":{"id":"b:1:2219-0:5424:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2219-0:6407:237":{"id":"b:1:2219-0:6407:237","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:307:2441":{"id":"0:307:2441","crate_id":0,"name":"new_zeroed_slice","span":{"filename":"library/alloc/src/boxed.rs","begin":[668,4],"end":[670,5]},"visibility":"public","docs":"Constructs a new boxed slice with uninitialized contents, with the memory\nbeing filled with `0` bytes.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\nof this method.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nlet values = Box::<[u32]>::new_zeroed_slice(3);\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [0, 0, 0])\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1519:2186"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:676:109":{"id":"a:1:7710:3767-0:676:109","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6415:2019":{"id":"0:6415:2019","crate_id":0,"name":"with_capacity","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[482,4],"end":[484,5]},"visibility":"public","docs":"Constructs a new, empty `Vec<T>` with at least the specified capacity.\n\nThe vector will be able to hold at least `capacity` elements without\nreallocating. This method is allowed to allocate for more elements than\n`capacity`. If `capacity` is 0, the vector will not allocate.\n\nIt is important to note that although the returned vector has the\nminimum *capacity* specified, the vector will have a zero *length*. For\nan explanation of the difference between length and capacity, see\n*[Capacity and reallocation]*.\n\nIf it is important to know the exact allocated capacity of a `Vec`,\nalways use the [`capacity`] method after construction.\n\nFor `Vec<T>` where `T` is a zero-sized type, there will be no allocation\nand the capacity will always be `usize::MAX`.\n\n[Capacity and reallocation]: #capacity-and-reallocation\n[`capacity`]: Vec::capacity\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` bytes.\n\n# Examples\n\n```\nlet mut vec = Vec::with_capacity(10);\n\n// The vector contains no items, even though it has capacity for more\nassert_eq!(vec.len(), 0);\nassert!(vec.capacity() >= 10);\n\n// These are all done without reallocating...\nfor i in 0..10 {\n    vec.push(i);\n}\nassert_eq!(vec.len(), 10);\nassert!(vec.capacity() >= 10);\n\n// ...but this may make the vector reallocate\nvec.push(11);\nassert_eq!(vec.len(), 11);\nassert!(vec.capacity() >= 11);\n\n// A vector of a zero-sized type will always over-allocate, since no\n// allocation is necessary\nlet vec_units = Vec::<()>::with_capacity(10);\nassert_eq!(vec_units.capacity(), usize::MAX);\n```","links":{"Vec::capacity":"0:6425:2020"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["capacity",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3930:2753":{"id":"0:3930:2753","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[91,4],"end":[93,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4936:180":{"id":"0:4936:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/slice.rs","begin":[681,4],"end":[681,16]},"visibility":"default","docs":"The resulting type after concatenation","links":{},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:303:2427":{"id":"0:303:2427","crate_id":0,"name":"into_inner","span":{"filename":"library/alloc/src/boxed.rs","begin":[611,4],"end":[616,5]},"visibility":"public","docs":"Consumes the `Box`, returning the wrapped value.\n\n# Examples\n\n```\n#![feature(box_into_inner)]\n\nlet c = Box::new(5);\n\nassert_eq!(Box::into_inner(c), 5);\n```","links":{},"attrs":["#[unstable(feature = \"box_into_inner\", issue = \"80437\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["boxed",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6099:3433":{"id":"0:6099:3433","crate_id":0,"name":"as_slice","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[68,4],"end":[70,5]},"visibility":"public","docs":"Returns the remaining items of this iterator as a slice.\n\n# Examples\n\n```\nlet vec = vec!['a', 'b', 'c'];\nlet mut into_iter = vec.into_iter();\nassert_eq!(into_iter.as_slice(), &['a', 'b', 'c']);\nlet _ = into_iter.next().unwrap();\nassert_eq!(into_iter.as_slice(), &['b', 'c']);\n```","links":{},"attrs":["#[stable(feature = \"vec_into_iter_as_slice\", since = \"1.15.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4179":{"id":"0:4179","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2698,0],"end":[2703,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","clamp","min"],"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:4182:416"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2505-0:3794:3805":{"id":"b:1:2505-0:3794:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3667":{"id":"0:3667","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2003,0],"end":[2003,46]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cursor","id":"0:3462:5277","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1487:3801":{"id":"0:1487:3801","crate_id":0,"name":"range","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1183,4],"end":[1194,5]},"visibility":"public","docs":"Constructs a double-ended iterator over a sub-range of elements in the map.\nThe simplest way is to use the range syntax `min..max`, thus `range(min..max)` will\nyield elements from min (inclusive) to max (exclusive).\nThe range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n`range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive\nrange from 4 to 10.\n\n# Panics\n\nPanics if range `start > end`.\nPanics if range `start == end` and both bounds are `Excluded`.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeMap;\nuse std::ops::Bound::Included;\n\nlet mut map = BTreeMap::new();\nmap.insert(3, \"a\");\nmap.insert(5, \"b\");\nmap.insert(8, \"c\");\nfor (&key, &value) in map.range((Included(&4), Included(&8))) {\n    println!(\"{key}: {value}\");\n}\nassert_eq!(Some((&5, &\"b\")), map.range(4..).next());\n```","links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["range",{"kind":"generic","inner":"R"}]],"output":{"kind":"resolved_path","inner":{"name":"Range","id":"0:1426:192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3066:3663","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:494:2751":{"id":"0:494:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/boxed.rs","begin":[1924,4],"end":[1926,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1490:4017":{"id":"0:1490:4017","crate_id":0,"name":"range_mut","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1225,4],"end":[1236,5]},"visibility":"public","docs":"Constructs a mutable double-ended iterator over a sub-range of elements in the map.\nThe simplest way is to use the range syntax `min..max`, thus `range(min..max)` will\nyield elements from min (inclusive) to max (exclusive).\nThe range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n`range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive\nrange from 4 to 10.\n\n# Panics\n\nPanics if range `start > end`.\nPanics if range `start == end` and both bounds are `Excluded`.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, i32> =\n    [(\"Alice\", 0), (\"Bob\", 0), (\"Carol\", 0), (\"Cheryl\", 0)].into();\nfor (_, balance) in map.range_mut(\"B\"..\"Cheryl\") {\n    *balance += 100;\n}\nfor (name, balance) in &map {\n    println!(\"{name} => {balance}\");\n}\n```","links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["range",{"kind":"generic","inner":"R"}]],"output":{"kind":"resolved_path","inner":{"name":"RangeMut","id":"0:1435:3845","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3066:3663","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3540":{"id":"0:3540","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1717,0],"end":[1743,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"drain_filter\", reason = \"recently added\", issue =\n\"43244\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3531:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:3543:2750","0:3544:921","0:3545:2751"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5815:668":{"id":"0:5815:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/task.rs","begin":[99,4],"end":[103,5]},"visibility":"default","docs":"Use a `Wake`-able type as a `Waker`.\n\nNo heap allocations or atomic operations are used for this conversion.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["waker",{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Waker","id":"1:11834:9231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4648:59":{"id":"0:4648:59","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/rc.rs","begin":[1646,4],"end":[1648,5]},"visibility":"default","docs":"Creates a new `Rc<T>`, with the `Default` value for `T`.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet x: Rc<i32> = Default::default();\nassert_eq!(*x, 0);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:6816:3475":{"id":"b:1:2505-0:6816:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6783":{"id":"0:6783","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[157,9],"end":[157,14]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6779:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6786:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1738":{"id":"0:1738","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1949,0],"end":[1963,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"map_values_mut\", since = \"1.10.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:1394:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1742:2750","0:1743:921","0:1745:2751","0:1746:2753"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4584:7271":{"id":"0:4584:7271","crate_id":0,"name":"increment_strong_count","span":{"filename":"library/alloc/src/rc.rs","begin":[1007,4],"end":[1012,5]},"visibility":"public","docs":"Increments the strong reference count on the `Rc<T>` associated with the\nprovided pointer by one.\n\n# Safety\n\nThe pointer must have been obtained through `Rc::into_raw`, and the\nassociated `Rc` instance must be valid (i.e. the strong count must be at\nleast 1) for the duration of this method.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nunsafe {\n    let ptr = Rc::into_raw(five);\n    Rc::increment_strong_count(ptr);\n\n    let five = Rc::from_raw(ptr);\n    assert_eq!(2, Rc::strong_count(&five));\n}\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rc_mutate_strong_count\", since = \"1.53.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["ptr",{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:771:3221":{"id":"b:1:2505-0:771:3221","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PeekMut","id":"0:771:3221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6879":{"id":"0:6879","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[59,31],"end":[59,36]},"visibility":{"restricted":{"parent":"0:744:1794","path":"::collections"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6880:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6728":{"id":"0:6728","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/alloc.rs","begin":[53,15],"end":[53,20]},"visibility":{"restricted":{"parent":"0:92:279","path":"::alloc"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6729:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3471":{"id":"0:3471","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1157,0],"end":[1161,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cursor","id":"0:3462:5277","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3473:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2708:2329-0:6881:1972":{"id":"a:1:2708:2329-0:6881:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3482:650":{"id":"0:3482:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1182,4],"end":[1184,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4692:650":{"id":"0:4692:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/rc.rs","begin":[1886,4],"end":[1888,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:1201:3672":{"id":"b:1:2219-0:1201:3672","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:1201:3672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7710:3767-0:4737:7157":{"id":"a:1:7710:3767-0:4737:7157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:4677":{"id":"0:4677","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1842,0],"end":[1861,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","clamp","min"],"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4679:416"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3392:5280":{"id":"0:3392:5280","crate_id":0,"name":"cursor_front_mut","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[546,4],"end":[548,5]},"visibility":"public","docs":"Provides a cursor with editing operations at the front element.\n\nThe cursor is pointing to the \"ghost\" non-element if the list is empty.","links":{},"attrs":["#[inline]","#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CursorMut","id":"0:3474:5281","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:6869:1971":{"id":"b:1:2510-0:6869:1971","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:469":{"id":"0:469","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1881,0],"end":[1885,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:472:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:826:768":{"id":"0:826:768","crate_id":0,"name":"iter","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[842,4],"end":[844,5]},"visibility":"public","docs":"Returns an iterator visiting all values in the underlying vector, in\narbitrary order.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet heap = BinaryHeap::from([1, 2, 3, 4]);\n\n// Print 1, 2, 3, 4 in arbitrary order\nfor x in heap.iter() {\n    println!(\"{x}\");\n}\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:3462:5277":{"id":"b:1:2510-0:3462:5277","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cursor","id":"0:3462:5277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7710:3767-0:2978:4931":{"id":"a:1:7710:3767-0:2978:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:2978:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5733:650":{"id":"0:5733:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/sync.rs","begin":[2466,4],"end":[2468,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5173:7932":{"id":"0:5173:7932","crate_id":0,"name":"from_utf8_unchecked","span":{"filename":"library/alloc/src/string.rs","begin":[845,4],"end":[847,5]},"visibility":"public","docs":"Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.\n\nSee the safe version, [`from_utf8`], for more details.\n\n[`from_utf8`]: String::from_utf8\n\n# Safety\n\nThis function is unsafe because it does not check that the bytes passed\nto it are valid UTF-8. If this constraint is violated, it may cause\nmemory unsafety issues with future users of the `String`, as the rest of\nthe standard library assumes that `String`s are valid UTF-8.\n\n# Examples\n\nBasic usage:\n\n```\n// some bytes, in a vector\nlet sparkle_heart = vec![240, 159, 146, 150];\n\nlet sparkle_heart = unsafe {\n    String::from_utf8_unchecked(sparkle_heart)\n};\n\nassert_eq!(\"💖\", sparkle_heart);\n```","links":{"String::from_utf8":"0:5165:6388"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["bytes",{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:1453:3451":{"id":"0:1453:3451","crate_id":0,"name":"clear","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[606,4],"end":[614,5]},"visibility":"public","docs":"Clears the map, removing all elements.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(1, \"a\");\na.clear();\nassert!(a.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6902":{"id":"0:6902","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[109,20],"end":[109,30]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["le","ge","lt","gt"],"trait":{"name":"PartialOrd","id":"1:2305:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6903:995"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:556":{"id":"0:556","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2038,0],"end":[2042,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"box_borrow\", since = \"1.1.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:559:1793"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4373:668":{"id":"0:4373:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[832,4],"end":[834,5]},"visibility":"default","docs":"Converts a [`CString`] into a <code>[Box]<[CStr]></code> without copying or allocating.","links":{"CStr":"1:46902:101","`CString`":"0:6897:102","Box":"0:276:1792"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3146":{"id":"0:3146","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1383,0],"end":[1405,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sub","id":"1:2740:4876","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"items":["0:3149:180","0:3150:1359"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4343:6433":{"id":"0:4343:6433","crate_id":0,"name":"from_vec_with_nul_unchecked","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[632,4],"end":[635,5]},"visibility":"public","docs":"Converts a <code>[Vec]<[u8]></code> to a [`CString`] without checking the\ninvariants on the given [`Vec`].\n\n# Safety\n\nThe given [`Vec`] **must** have one nul byte as its last element.\nThis means it cannot be empty nor have any other nul byte anywhere else.\n\n# Example\n\n```\nuse std::ffi::CString;\nassert_eq!(\n    unsafe { CString::from_vec_with_nul_unchecked(b\"abc\\0\".to_vec()) },\n    unsafe { CString::from_vec_unchecked(b\"abc\".to_vec()) }\n);\n```","links":{"Vec":"0:6407:237","`Vec`":"0:6407:237","u8":"1:58447:10472","`CString`":"0:6897:102"},"attrs":["#[must_use]","#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:3752:571":{"id":"0:3752:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[109,4],"end":[189,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3159:180":{"id":"0:3159:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1434,4],"end":[1434,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"0:6113":{"id":"0:6113","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[180,0],"end":[180,68]},"visibility":{"restricted":{"parent":"0:6056:757","path":"::vec::into_iter"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1424:650":{"id":"0:1424:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[518,4],"end":[520,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3149:180":{"id":"0:3149:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1384,4],"end":[1384,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"b:1:2499-0:3900:3356":{"id":"b:1:2499-0:3900:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2510-0:6787:192":{"id":"b:1:2510-0:6787:192","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:6787:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3346":{"id":"0:3346","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[77,0],"end":[89,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3348:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:781:571":{"id":"0:781:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[294,4],"end":[299,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4941:7823":{"id":"0:4941:7823","crate_id":0,"name":"join","span":{"filename":"library/alloc/src/slice.rs","begin":[697,4],"end":[697,58]},"visibility":"default","docs":"Implementation of [`[T]::join`](slice::join)","links":{"slice::join":"0:4927:7823"},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["sep",{"kind":"generic","inner":"Separator"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:4938:7826","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:7056:895":{"id":"0:7056:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/string.rs","begin":[2259,0],"end":[2259,33]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6470:9833":{"id":"0:6470:9833","crate_id":0,"name":"dedup_by_key","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1693,4],"end":[1699,5]},"visibility":"public","docs":"Removes all but the first of consecutive elements in the vector that resolve to the same\nkey.\n\nIf the vector is sorted, this removes all duplicates.\n\n# Examples\n\n```\nlet mut vec = vec![10, 20, 21, 30, 20];\n\nvec.dedup_by_key(|i| *i / 10);\n\nassert_eq!(vec, [10, 20, 30, 20]);\n```","links":{},"attrs":["#[stable(feature = \"dedup_by\", since = \"1.16.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"generic","inner":"K"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:698:536":{"id":"0:698:536","crate_id":0,"name":"deref","span":{"filename":"library/alloc/src/borrow.rs","begin":[338,4],"end":[343,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"B"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4213:3475":{"id":"0:4213:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2759,4],"end":[2759,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"0:3254:4091":{"id":"0:3254:4091","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1695,4],"end":[1697,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:3794:3805":{"id":"b:1:2510-0:3794:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4724:670":{"id":"0:4724:670","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/rc.rs","begin":[2112,4],"end":[2114,5]},"visibility":"default","docs":"Takes each element in the `Iterator` and collects it into an `Rc<[T]>`.\n\n# Performance characteristics\n\n## The general case\n\nIn the general case, collecting into `Rc<[T]>` is done by first\ncollecting into a `Vec<T>`. That is, when writing the following:\n\n```rust\n# use std::rc::Rc;\nlet evens: Rc<[u8]> = (0..10).filter(|&x| x % 2 == 0).collect();\n# assert_eq!(&*evens, &[0, 2, 4, 6, 8]);\n```\n\nthis behaves as if we wrote:\n\n```rust\n# use std::rc::Rc;\nlet evens: Rc<[u8]> = (0..10).filter(|&x| x % 2 == 0)\n    .collect::<Vec<_>>() // The first set of allocations happens here.\n    .into(); // A second allocation for `Rc<[T]>` happens here.\n# assert_eq!(&*evens, &[0, 2, 4, 6, 8]);\n```\n\nThis will allocate as many times as needed for constructing the `Vec<T>`\nand then it will allocate once for turning the `Vec<T>` into the `Rc<[T]>`.\n\n## Iterators of known length\n\nWhen your `Iterator` implements `TrustedLen` and is of an exact size,\na single allocation will be made for the `Rc<[T]>`. For example:\n\n```rust\n# use std::rc::Rc;\nlet evens: Rc<[u8]> = (0..10).collect(); // Just a single allocation happens here.\n# assert_eq!(&*evens, &*(0..10).collect::<Vec<_>>());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"iter::IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:555:411":{"id":"0:555:411","crate_id":0,"name":"clone_from","span":{"filename":"library/alloc/src/boxed.rs","begin":[2028,4],"end":[2034,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4090:2097":{"id":"0:4090:2097","crate_id":0,"name":"try_reserve","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[881,4],"end":[893,5]},"visibility":"public","docs":"Tries to reserve capacity for at least `additional` more elements to be inserted\nin the given deque. The collection may reserve more space to speculatively avoid\nfrequent reallocations. After calling `try_reserve`, capacity will be\ngreater than or equal to `self.len() + additional` if it returns\n`Ok(())`. Does nothing if capacity is already sufficient. This method\npreserves the contents even if an error occurs.\n\n# Errors\n\nIf the capacity overflows `usize`, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse std::collections::TryReserveError;\nuse std::collections::VecDeque;\n\nfn process_data(data: &[u32]) -> Result<VecDeque<u32>, TryReserveError> {\n    let mut output = VecDeque::new();\n\n    // Pre-reserve the memory, exiting if we can't\n    output.try_reserve(data.len())?;\n\n    // Now we know this can't OOM in the middle of our complex work\n    output.extend(data.iter().map(|&val| {\n        val * 2 + 5 // very complicated\n    }));\n\n    Ok(output)\n}\n# process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n```","links":{},"attrs":["#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6679:2784":{"id":"0:6679:2784","crate_id":0,"name":"as_mut","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3087,4],"end":[3089,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5388":{"id":"0:5388","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2671,0],"end":[2679,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"from_ref_string\", since = \"1.35.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5389:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:891:921":{"id":"0:891:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1386,4],"end":[1388,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5215:2762":{"id":"0:5215:2762","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/string.rs","begin":[1656,4],"end":[1658,5]},"visibility":"public","docs":"Returns `true` if this `String` has a length of zero, and `false` otherwise.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut v = String::new();\nassert!(v.is_empty());\n\nv.push('a');\nassert!(!v.is_empty());\n```","links":{},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3669":{"id":"0:3669","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2006,0],"end":[2006,46]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cursor","id":"0:3462:5277","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5331:180":{"id":"0:5331:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/string.rs","begin":[2385,4],"end":[2385,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"str"}}},"a:1:2708:2329-0:6779:3475":{"id":"a:1:2708:2329-0:6779:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6779:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:7273:895":{"id":"0:7273:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[35,0],"end":[35,109]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"U"}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7244:595":{"id":"0:7244:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[27,0],"end":[27,126]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7024:757":{"id":"1:7024:757","crate_id":1,"name":"into_iter","span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[272,4],"end":[272,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"I"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1733:2750":{"id":"0:1733:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1929,4],"end":[1929,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}},"b:1:2505-0:6407:237":{"id":"b:1:2505-0:6407:237","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11373:14020":{"id":"1:11373:14020","crate_id":1,"name":"rsplit_terminator","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1533,4],"end":[1535,54]},"visibility":"public","docs":"An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```","links":{"prim@char":"1:58430:10458","str::split":"1:11361:3524","str::split_terminator":"1:11370:14024","self::pattern":"1:11013:1760"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplitTerminator","id":"1:50033:7946","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11033:7919","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:1415:3837":{"id":"a:1:2644:214-0:1415:3837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:1415:3837","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2216-0:3004:4940":{"id":"b:1:2216-0:3004:4940","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:3004:4940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2510-0:4737:7157":{"id":"b:1:2510-0:4737:7157","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2505-0:1359:3475":{"id":"b:1:2505-0:1359:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1359:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:326:2513":{"id":"0:326:2513","crate_id":0,"name":"from_raw","span":{"filename":"library/alloc/src/boxed.rs","begin":[957,4],"end":[959,5]},"visibility":"public","docs":"Constructs a box from a raw pointer.\n\nAfter calling this function, the raw pointer is owned by the\nresulting `Box`. Specifically, the `Box` destructor will call\nthe destructor of `T` and free the allocated memory. For this\nto be safe, the memory must have been allocated in accordance\nwith the [memory layout] used by `Box` .\n\n# Safety\n\nThis function is unsafe because improper use may lead to\nmemory problems. For example, a double-free may occur if the\nfunction is called twice on the same raw pointer.\n\nThe safety conditions are described in the [memory layout] section.\n\n# Examples\n\nRecreate a `Box` which was previously converted to a raw pointer\nusing [`Box::into_raw`]:\n```\nlet x = Box::new(5);\nlet ptr = Box::into_raw(x);\nlet x = unsafe { Box::from_raw(ptr) };\n```\nManually create a `Box` from scratch by using the global allocator:\n```\nuse std::alloc::{alloc, Layout};\n\nunsafe {\n    let ptr = alloc(Layout::new::<i32>()) as *mut i32;\n    // In general .write is required to avoid attempting to destruct\n    // the (uninitialized) previous contents of `ptr`, though for this\n    // simple example `*ptr = 5` would have worked as well.\n    ptr.write(5);\n    let x = Box::from_raw(ptr);\n}\n```\n\n[memory layout]: self#memory-layout\n[`Layout`]: crate::Layout","links":{"`Box::into_raw`":"0:331:2546","self#memory-layout":"0:141:1791"},"attrs":["#[stable(feature = \"box_raw\", since = \"1.4.0\")]","#[inline]","#[must_use =\n\"call `drop(Box::from_raw(ptr))` if you intend to drop the `Box`\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["raw",{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:5048":{"id":"0:5048","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[43,20],"end":[43,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::Lines","name":"Lines","id":"1:50219:7940","glob":false}},"0:6989":{"id":"0:6989","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[405,47],"end":[405,52]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6990:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:580:206":{"id":"0:580:206","crate_id":0,"name":"Return","span":{"filename":"library/alloc/src/boxed.rs","begin":[2096,4],"end":[2096,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Return","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"G"},"trait":{"name":"Generator","id":"1:2951:2334","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}}},"0:485:538":{"id":"0:485:538","crate_id":0,"name":"deref_mut","span":{"filename":"library/alloc/src/boxed.rs","begin":[1910,4],"end":[1912,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4428:650":{"id":"0:4428:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/fmt.rs","begin":[1,0],"end":[617,1]},"visibility":"public","docs":"Utilities for formatting and printing `String`s.\n\nThis module contains the runtime support for the [`format!`] syntax extension.\nThis macro is implemented in the compiler to emit calls to this module in\norder to format arguments at runtime into strings.\n\n# Usage\n\nThe [`format!`] macro is intended to be familiar to those coming from C's\n`printf`/`fprintf` functions or Python's `str.format` function.\n\nSome examples of the [`format!`] extension are:\n\n```\nformat!(\"Hello\");                 // => \"Hello\"\nformat!(\"Hello, {}!\", \"world\");   // => \"Hello, world!\"\nformat!(\"The number is {}\", 1);   // => \"The number is 1\"\nformat!(\"{:?}\", (3, 4));          // => \"(3, 4)\"\nformat!(\"{value}\", value=4);      // => \"4\"\nlet people = \"Rustaceans\";\nformat!(\"Hello {people}!\");       // => \"Hello Rustaceans!\"\nformat!(\"{} {}\", 1, 2);           // => \"1 2\"\nformat!(\"{:04}\", 42);             // => \"0042\" with leading zeros\nformat!(\"{:#?}\", (100, 200));     // => \"(\n                                  //       100,\n                                  //       200,\n                                  //     )\"\n```\n\nFrom these, you can see that the first argument is a format string. It is\nrequired by the compiler for this to be a string literal; it cannot be a\nvariable passed in (in order to perform validity checking). The compiler\nwill then parse the format string and determine if the list of arguments\nprovided is suitable to pass to this format string.\n\nTo convert a single value to a string, use the [`to_string`] method. This\nwill use the [`Display`] formatting trait.\n\n## Positional parameters\n\nEach formatting argument is allowed to specify which value argument it's\nreferencing, and if omitted it is assumed to be \"the next argument\". For\nexample, the format string `{} {} {}` would take three parameters, and they\nwould be formatted in the same order as they're given. The format string\n`{2} {1} {0}`, however, would format arguments in reverse order.\n\nThings can get a little tricky once you start intermingling the two types of\npositional specifiers. The \"next argument\" specifier can be thought of as an\niterator over the argument. Each time a \"next argument\" specifier is seen,\nthe iterator advances. This leads to behavior like this:\n\n```\nformat!(\"{1} {} {0} {}\", 1, 2); // => \"2 1 1 2\"\n```\n\nThe internal iterator over the argument has not been advanced by the time\nthe first `{}` is seen, so it prints the first argument. Then upon reaching\nthe second `{}`, the iterator has advanced forward to the second argument.\nEssentially, parameters that explicitly name their argument do not affect\nparameters that do not name an argument in terms of positional specifiers.\n\nA format string is required to use all of its arguments, otherwise it is a\ncompile-time error. You may refer to the same argument more than once in the\nformat string.\n\n## Named parameters\n\nRust itself does not have a Python-like equivalent of named parameters to a\nfunction, but the [`format!`] macro is a syntax extension that allows it to\nleverage named parameters. Named parameters are listed at the end of the\nargument list and have the syntax:\n\n```text\nidentifier '=' expression\n```\n\nFor example, the following [`format!`] expressions all use named arguments:\n\n```\nformat!(\"{argument}\", argument = \"test\");   // => \"test\"\nformat!(\"{name} {}\", 1, name = 2);          // => \"2 1\"\nformat!(\"{a} {c} {b}\", a=\"a\", b='b', c=3);  // => \"a 3 b\"\n```\n\nIf a named parameter does not appear in the argument list, `format!` will\nreference a variable with that name in the current scope.\n\n```\nlet argument = 2 + 2;\nformat!(\"{argument}\");   // => \"4\"\n\nfn make_string(a: u32, b: &str) -> String {\n    format!(\"{b} {a}\")\n}\nmake_string(927, \"label\"); // => \"label 927\"\n```\n\nIt is not valid to put positional parameters (those without names) after\narguments that have names. Like with positional parameters, it is not\nvalid to provide named parameters that are unused by the format string.\n\n# Formatting Parameters\n\nEach argument being formatted can be transformed by a number of formatting\nparameters (corresponding to `format_spec` in [the syntax](#syntax)). These\nparameters affect the string representation of what's being formatted.\n\n## Width\n\n```\n// All of these print \"Hello x    !\"\nprintln!(\"Hello {:5}!\", \"x\");\nprintln!(\"Hello {:1$}!\", \"x\", 5);\nprintln!(\"Hello {1:0$}!\", 5, \"x\");\nprintln!(\"Hello {:width$}!\", \"x\", width = 5);\nlet width = 5;\nprintln!(\"Hello {:width$}!\", \"x\");\n```\n\nThis is a parameter for the \"minimum width\" that the format should take up.\nIf the value's string does not fill up this many characters, then the\npadding specified by fill/alignment will be used to take up the required\nspace (see below).\n\nThe value for the width can also be provided as a [`usize`] in the list of\nparameters by adding a postfix `$`, indicating that the second argument is\na [`usize`] specifying the width.\n\nReferring to an argument with the dollar syntax does not affect the \"next\nargument\" counter, so it's usually a good idea to refer to arguments by\nposition, or use named arguments.\n\n## Fill/Alignment\n\n```\nassert_eq!(format!(\"Hello {:<5}!\", \"x\"),  \"Hello x    !\");\nassert_eq!(format!(\"Hello {:-<5}!\", \"x\"), \"Hello x----!\");\nassert_eq!(format!(\"Hello {:^5}!\", \"x\"),  \"Hello   x  !\");\nassert_eq!(format!(\"Hello {:>5}!\", \"x\"),  \"Hello     x!\");\n```\n\nThe optional fill character and alignment is provided normally in conjunction with the\n[`width`](#width) parameter. It must be defined before `width`, right after the `:`.\nThis indicates that if the value being formatted is smaller than\n`width` some extra characters will be printed around it.\nFilling comes in the following variants for different alignments:\n\n* `[fill]<` - the argument is left-aligned in `width` columns\n* `[fill]^` - the argument is center-aligned in `width` columns\n* `[fill]>` - the argument is right-aligned in `width` columns\n\nThe default [fill/alignment](#fillalignment) for non-numerics is a space and\nleft-aligned. The\ndefault for numeric formatters is also a space character but with right-alignment. If\nthe `0` flag (see below) is specified for numerics, then the implicit fill character is\n`0`.\n\nNote that alignment might not be implemented by some types. In particular, it\nis not generally implemented for the `Debug` trait.  A good way to ensure\npadding is applied is to format your input, then pad this resulting string\nto obtain your output:\n\n```\nprintln!(\"Hello {:^15}!\", format!(\"{:?}\", Some(\"hi\"))); // => \"Hello   Some(\"hi\")   !\"\n```\n\n## Sign/`#`/`0`\n\n```\nassert_eq!(format!(\"Hello {:+}!\", 5), \"Hello +5!\");\nassert_eq!(format!(\"{:#x}!\", 27), \"0x1b!\");\nassert_eq!(format!(\"Hello {:05}!\", 5),  \"Hello 00005!\");\nassert_eq!(format!(\"Hello {:05}!\", -5), \"Hello -0005!\");\nassert_eq!(format!(\"{:#010x}!\", 27), \"0x0000001b!\");\n```\n\nThese are all flags altering the behavior of the formatter.\n\n* `+` - This is intended for numeric types and indicates that the sign\n        should always be printed. Positive signs are never printed by\n        default, and the negative sign is only printed by default for signed values.\n        This flag indicates that the correct sign (`+` or `-`) should always be printed.\n* `-` - Currently not used\n* `#` - This flag indicates that the \"alternate\" form of printing should\n        be used. The alternate forms are:\n    * `#?` - pretty-print the [`Debug`] formatting (adds linebreaks and indentation)\n    * `#x` - precedes the argument with a `0x`\n    * `#X` - precedes the argument with a `0x`\n    * `#b` - precedes the argument with a `0b`\n    * `#o` - precedes the argument with a `0o`\n* `0` - This is used to indicate for integer formats that the padding to `width` should\n        both be done with a `0` character as well as be sign-aware. A format\n        like `{:08}` would yield `00000001` for the integer `1`, while the\n        same format would yield `-0000001` for the integer `-1`. Notice that\n        the negative version has one fewer zero than the positive version.\n        Note that padding zeros are always placed after the sign (if any)\n        and before the digits. When used together with the `#` flag, a similar\n        rule applies: padding zeros are inserted after the prefix but before\n        the digits. The prefix is included in the total width.\n\n## Precision\n\nFor non-numeric types, this can be considered a \"maximum width\". If the resulting string is\nlonger than this width, then it is truncated down to this many characters and that truncated\nvalue is emitted with proper `fill`, `alignment` and `width` if those parameters are set.\n\nFor integral types, this is ignored.\n\nFor floating-point types, this indicates how many digits after the decimal point should be\nprinted.\n\nThere are three possible ways to specify the desired `precision`:\n\n1. An integer `.N`:\n\n   the integer `N` itself is the precision.\n\n2. An integer or name followed by dollar sign `.N$`:\n\n   use format *argument* `N` (which must be a `usize`) as the precision.\n\n3. An asterisk `.*`:\n\n   `.*` means that this `{...}` is associated with *two* format inputs rather than one:\n   - If a format string in the fashion of `{:<spec>.*}` is used, then the first input holds\n     the `usize` precision, and the second holds the value to print.\n   - If a format string in the fashion of `{<arg>:<spec>.*}` is used, then the `<arg>` part\n     refers to the value to print, and the `precision` is taken like it was specified with an\n     omitted positional parameter (`{}` instead of `{<arg>:}`).\n\nFor example, the following calls all print the same thing `Hello x is 0.01000`:\n\n```\n// Hello {arg 0 (\"x\")} is {arg 1 (0.01) with precision specified inline (5)}\nprintln!(\"Hello {0} is {1:.5}\", \"x\", 0.01);\n\n// Hello {arg 1 (\"x\")} is {arg 2 (0.01) with precision specified in arg 0 (5)}\nprintln!(\"Hello {1} is {2:.0$}\", 5, \"x\", 0.01);\n\n// Hello {arg 0 (\"x\")} is {arg 2 (0.01) with precision specified in arg 1 (5)}\nprintln!(\"Hello {0} is {2:.1$}\", \"x\", 5, 0.01);\n\n// Hello {next arg -> arg 0 (\"x\")} is {second of next two args -> arg 2 (0.01) with precision\n//                          specified in first of next two args -> arg 1 (5)}\nprintln!(\"Hello {} is {:.*}\",    \"x\", 5, 0.01);\n\n// Hello {arg 1 (\"x\")} is {arg 2 (0.01) with precision\n//                          specified in next arg -> arg 0 (5)}\nprintln!(\"Hello {1} is {2:.*}\",  5, \"x\", 0.01);\n\n// Hello {next arg -> arg 0 (\"x\")} is {arg 2 (0.01) with precision\n//                          specified in next arg -> arg 1 (5)}\nprintln!(\"Hello {} is {2:.*}\",   \"x\", 5, 0.01);\n\n// Hello {next arg -> arg 0 (\"x\")} is {arg \"number\" (0.01) with precision specified\n//                          in arg \"prec\" (5)}\nprintln!(\"Hello {} is {number:.prec$}\", \"x\", prec = 5, number = 0.01);\n```\n\nWhile these:\n\n```\nprintln!(\"{}, `{name:.*}` has 3 fractional digits\", \"Hello\", 3, name=1234.56);\nprintln!(\"{}, `{name:.*}` has 3 characters\", \"Hello\", 3, name=\"1234.56\");\nprintln!(\"{}, `{name:>8.*}` has 3 right-aligned characters\", \"Hello\", 3, name=\"1234.56\");\n```\n\nprint three significantly different things:\n\n```text\nHello, `1234.560` has 3 fractional digits\nHello, `123` has 3 characters\nHello, `     123` has 3 right-aligned characters\n```\n\n## Localization\n\nIn some programming languages, the behavior of string formatting functions\ndepends on the operating system's locale setting. The format functions\nprovided by Rust's standard library do not have any concept of locale and\nwill produce the same results on all systems regardless of user\nconfiguration.\n\nFor example, the following code will always print `1.5` even if the system\nlocale uses a decimal separator other than a dot.\n\n```\nprintln!(\"The value is {}\", 1.5);\n```\n\n# Escaping\n\nThe literal characters `{` and `}` may be included in a string by preceding\nthem with the same character. For example, the `{` character is escaped with\n`{{` and the `}` character is escaped with `}}`.\n\n```\nassert_eq!(format!(\"Hello {{}}\"), \"Hello {}\");\nassert_eq!(format!(\"{{ Hello\"), \"{ Hello\");\n```\n\n# Syntax\n\nTo summarize, here you can find the full grammar of format strings.\nThe syntax for the formatting language used is drawn from other languages,\nso it should not be too alien. Arguments are formatted with Python-like\nsyntax, meaning that arguments are surrounded by `{}` instead of the C-like\n`%`. The actual grammar for the formatting syntax is:\n\n```text\nformat_string := text [ maybe_format text ] *\nmaybe_format := '{' '{' | '}' '}' | format\nformat := '{' [ argument ] [ ':' format_spec ] [ ws ] * '}'\nargument := integer | identifier\n\nformat_spec := [[fill]align][sign]['#']['0'][width]['.' precision]type\nfill := character\nalign := '<' | '^' | '>'\nsign := '+' | '-'\nwidth := count\nprecision := count | '*'\ntype := '' | '?' | 'x?' | 'X?' | identifier\ncount := parameter | integer\nparameter := argument '$'\n```\nIn the above grammar,\n- `text` must not contain any `'{'` or `'}'` characters,\n- `ws` is any character for which [`char::is_whitespace`] returns `true`, has no semantic\n  meaning and is completely optional,\n- `integer` is a decimal integer that may contain leading zeroes and must fit into an `usize` and\n- `identifier` is an `IDENTIFIER_OR_KEYWORD` (not an `IDENTIFIER`) as defined by the [Rust language reference](https://doc.rust-lang.org/reference/identifiers.html).\n\n# Formatting traits\n\nWhen requesting that an argument be formatted with a particular type, you\nare actually requesting that an argument ascribes to a particular trait.\nThis allows multiple actual types to be formatted via `{:x}` (like [`i8`] as\nwell as [`isize`]). The current mapping of types to traits is:\n\n* *nothing* ⇒ [`Display`]\n* `?` ⇒ [`Debug`]\n* `x?` ⇒ [`Debug`] with lower-case hexadecimal integers\n* `X?` ⇒ [`Debug`] with upper-case hexadecimal integers\n* `o` ⇒ [`Octal`]\n* `x` ⇒ [`LowerHex`]\n* `X` ⇒ [`UpperHex`]\n* `p` ⇒ [`Pointer`]\n* `b` ⇒ [`Binary`]\n* `e` ⇒ [`LowerExp`]\n* `E` ⇒ [`UpperExp`]\n\nWhat this means is that any type of argument which implements the\n[`fmt::Binary`][`Binary`] trait can then be formatted with `{:b}`. Implementations\nare provided for these traits for a number of primitive types by the\nstandard library as well. If no format is specified (as in `{}` or `{:6}`),\nthen the format trait used is the [`Display`] trait.\n\nWhen implementing a format trait for your own type, you will have to\nimplement a method of the signature:\n\n```\n# #![allow(dead_code)]\n# use std::fmt;\n# struct Foo; // our custom type\n# impl fmt::Display for Foo {\nfn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n# write!(f, \"testing, testing\")\n# } }\n```\n\nYour type will be passed as `self` by-reference, and then the function\nshould emit output into the Formatter `f` which implements `fmt::Write`. It is up to each\nformat trait implementation to correctly adhere to the requested formatting parameters.\nThe values of these parameters can be accessed with methods of the\n[`Formatter`] struct. In order to help with this, the [`Formatter`] struct also\nprovides some helper methods.\n\nAdditionally, the return value of this function is [`fmt::Result`] which is a\ntype alias of <code>[Result]<(), [std::fmt::Error]></code>. Formatting implementations\nshould ensure that they propagate errors from the [`Formatter`] (e.g., when\ncalling [`write!`]). However, they should never return errors spuriously. That\nis, a formatting implementation must and may only return an error if the\npassed-in [`Formatter`] returns an error. This is because, contrary to what\nthe function signature might suggest, string formatting is an infallible\noperation. This function only returns a result because writing to the\nunderlying stream might fail and it must provide a way to propagate the fact\nthat an error has occurred back up the stack.\n\nAn example of implementing the formatting traits would look\nlike:\n\n```\nuse std::fmt;\n\n#[derive(Debug)]\nstruct Vector2D {\n    x: isize,\n    y: isize,\n}\n\nimpl fmt::Display for Vector2D {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        // The `f` value implements the `Write` trait, which is what the\n        // write! macro is expecting. Note that this formatting ignores the\n        // various flags provided to format strings.\n        write!(f, \"({}, {})\", self.x, self.y)\n    }\n}\n\n// Different traits allow different forms of output of a type. The meaning\n// of this format is to print the magnitude of a vector.\nimpl fmt::Binary for Vector2D {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        let magnitude = (self.x * self.x + self.y * self.y) as f64;\n        let magnitude = magnitude.sqrt();\n\n        // Respect the formatting flags by using the helper method\n        // `pad_integral` on the Formatter object. See the method\n        // documentation for details, and the function `pad` can be used\n        // to pad strings.\n        let decimals = f.precision().unwrap_or(3);\n        let string = format!(\"{magnitude:.decimals$}\");\n        f.pad_integral(true, \"\", &string)\n    }\n}\n\nfn main() {\n    let myvector = Vector2D { x: 3, y: 4 };\n\n    println!(\"{myvector}\");       // => \"(3, 4)\"\n    println!(\"{myvector:?}\");     // => \"Vector2D {x: 3, y:4}\"\n    println!(\"{myvector:10.3b}\"); // => \"     5.000\"\n}\n```\n\n### `fmt::Display` vs `fmt::Debug`\n\nThese two formatting traits have distinct purposes:\n\n- [`fmt::Display`][`Display`] implementations assert that the type can be faithfully\n  represented as a UTF-8 string at all times. It is **not** expected that\n  all types implement the [`Display`] trait.\n- [`fmt::Debug`][`Debug`] implementations should be implemented for **all** public types.\n  Output will typically represent the internal state as faithfully as possible.\n  The purpose of the [`Debug`] trait is to facilitate debugging Rust code. In\n  most cases, using `#[derive(Debug)]` is sufficient and recommended.\n\nSome examples of the output from both traits:\n\n```\nassert_eq!(format!(\"{} {:?}\", 3, 4), \"3 4\");\nassert_eq!(format!(\"{} {:?}\", 'a', 'b'), \"a 'b'\");\nassert_eq!(format!(\"{} {:?}\", \"foo\\n\", \"bar\\n\"), \"foo\\n \\\"bar\\\\n\\\"\");\n```\n\n# Related macros\n\nThere are a number of related macros in the [`format!`] family. The ones that\nare currently implemented are:\n\n```ignore (only-for-syntax-highlight)\nformat!      // described above\nwrite!       // first argument is either a &mut io::Write or a &mut fmt::Write, the destination\nwriteln!     // same as write but appends a newline\nprint!       // the format string is printed to the standard output\nprintln!     // same as print but appends a newline\neprint!      // the format string is printed to the standard error\neprintln!    // same as eprint but appends a newline\nformat_args! // described below.\n```\n\n### `write!`\n\n[`write!`] and [`writeln!`] are two macros which are used to emit the format string\nto a specified stream. This is used to prevent intermediate allocations of\nformat strings and instead directly write the output. Under the hood, this\nfunction is actually invoking the [`write_fmt`] function defined on the\n[`std::io::Write`] and the [`std::fmt::Write`] trait. Example usage is:\n\n```\n# #![allow(unused_must_use)]\nuse std::io::Write;\nlet mut w = Vec::new();\nwrite!(&mut w, \"Hello {}!\", \"world\");\n```\n\n### `print!`\n\nThis and [`println!`] emit their output to stdout. Similarly to the [`write!`]\nmacro, the goal of these macros is to avoid intermediate allocations when\nprinting output. Example usage is:\n\n```\nprint!(\"Hello {}!\", \"world\");\nprintln!(\"I have a newline {}\", \"character at the end\");\n```\n### `eprint!`\n\nThe [`eprint!`] and [`eprintln!`] macros are identical to\n[`print!`] and [`println!`], respectively, except they emit their\noutput to stderr.\n\n### `format_args!`\n\n[`format_args!`] is a curious macro used to safely pass around\nan opaque object describing the format string. This object\ndoes not require any heap allocations to create, and it only\nreferences information on the stack. Under the hood, all of\nthe related macros are implemented in terms of this. First\noff, some example usage is:\n\n```\n# #![allow(unused_must_use)]\nuse std::fmt;\nuse std::io::{self, Write};\n\nlet mut some_writer = io::stdout();\nwrite!(&mut some_writer, \"{}\", format_args!(\"print with a {}\", \"macro\"));\n\nfn my_fmt_fn(args: fmt::Arguments) {\n    write!(&mut io::stdout(), \"{args}\");\n}\nmy_fmt_fn(format_args!(\", or a {} too\", \"function\"));\n```\n\nThe result of the [`format_args!`] macro is a value of type [`fmt::Arguments`].\nThis structure can then be passed to the [`write`] and [`format`] functions\ninside this module in order to process the format string.\nThe goal of this macro is to even further prevent intermediate allocations\nwhen dealing with formatting strings.\n\nFor example, a logging library could use the standard formatting syntax, but\nit would internally pass around this structure until it has been determined\nwhere output should go to.\n\n[`fmt::Result`]: Result \"fmt::Result\"\n[Result]: core::result::Result \"std::result::Result\"\n[std::fmt::Error]: Error \"fmt::Error\"\n[`write`]: write() \"fmt::write\"\n[`to_string`]: crate::string::ToString::to_string \"ToString::to_string\"\n[`write_fmt`]: ../../std/io/trait.Write.html#method.write_fmt\n[`std::io::Write`]: ../../std/io/trait.Write.html\n[`std::fmt::Write`]: ../../std/fmt/trait.Write.html\n[`print!`]: ../../std/macro.print.html \"print!\"\n[`println!`]: ../../std/macro.println.html \"println!\"\n[`eprint!`]: ../../std/macro.eprint.html \"eprint!\"\n[`eprintln!`]: ../../std/macro.eprintln.html \"eprintln!\"\n[`format_args!`]: ../../std/macro.format_args.html \"format_args!\"\n[`fmt::Arguments`]: Arguments \"fmt::Arguments\"\n[`format`]: format() \"fmt::format\"","links":{"`Formatter`":"1:8528:130","write()":"1:8589:2221","`format!`":"0:6:659","Result":"1:8517:204","`Binary`":"1:8577:6921","`Debug`":"1:8568:110","`Pointer`":"1:8583:188","`usize`":"1:58453:10478","`i8`":"1:58442:10467","`LowerHex`":"1:8579:6931","crate::string::ToString::to_string":"0:5361:1398","`UpperExp`":"1:8587:6930","core::result::Result":"1:48141:204","`writeln!`":"1:15:10485","format()":"0:4460:659","`Octal`":"1:8575:6922","`LowerExp`":"1:8585:6929","Arguments":"1:49113:73","Error":"1:49039:126","`char::is_whitespace`":"1:4458:13085","`Display`":"1:8573:118","`isize`":"1:58452:10477","`UpperHex`":"1:8581:6932","`write!`":"1:14:2221"},"attrs":["#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4429","0:4430","0:4431","0:4433","0:4434","0:4435","0:4437","0:4438","0:4440","0:4440","0:4440","0:4440","0:4441","0:4443","0:4444","0:4445","0:4446","0:4447","0:4449","0:4450","0:4451","0:4453","0:4454","0:4456","0:4457","0:4458","0:4460:659"],"is_stripped":false}},"0:1286:3902":{"id":"0:1286:3902","crate_id":0,"name":"remove_entry","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[424,4],"end":[426,5]},"visibility":"public","docs":"Take ownership of the key and value from the map.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nif let Entry::Occupied(o) = map.entry(\"poneyland\") {\n    // We delete the entry from the map.\n    o.remove_entry();\n}\n\n// If now try to get the value, it will panic:\n// println!(\"{}\", map[\"poneyland\"]);\n```","links":{},"attrs":["#[stable(feature = \"map_entry_recover_keys2\", since = \"1.12.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1896:650":{"id":"0:1896:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2196,4],"end":[2198,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:3352:3805":{"id":"a:1:7710:3767-0:3352:3805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3352:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4585:7279":{"id":"0:4585:7279","crate_id":0,"name":"decrement_strong_count","span":{"filename":"library/alloc/src/rc.rs","begin":[1044,4],"end":[1046,5]},"visibility":"public","docs":"Decrements the strong reference count on the `Rc<T>` associated with the\nprovided pointer by one.\n\n# Safety\n\nThe pointer must have been obtained through `Rc::into_raw`, and the\nassociated `Rc` instance must be valid (i.e. the strong count must be at\nleast 1) when invoking this method. This method can be used to release\nthe final `Rc` and backing storage, but **should not** be called after\nthe final `Rc` has been released.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nunsafe {\n    let ptr = Rc::into_raw(five);\n    Rc::increment_strong_count(ptr);\n\n    let five = Rc::from_raw(ptr);\n    assert_eq!(2, Rc::strong_count(&five));\n    Rc::decrement_strong_count(ptr);\n    assert_eq!(1, Rc::strong_count(&five));\n}\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rc_mutate_strong_count\", since = \"1.53.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["ptr",{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:111:282":{"id":"0:111:282","crate_id":0,"name":"alloc_zeroed","span":{"filename":"library/alloc/src/alloc.rs","begin":[165,0],"end":[167,1]},"visibility":"public","docs":"Allocate zero-initialized memory with the global allocator.\n\nThis function forwards calls to the [`GlobalAlloc::alloc_zeroed`] method\nof the allocator registered with the `#[global_allocator]` attribute\nif there is one, or the `std` crate’s default.\n\nThis function is expected to be deprecated in favor of the `alloc_zeroed` method\nof the [`Global`] type when it and the [`Allocator`] trait become stable.\n\n# Safety\n\nSee [`GlobalAlloc::alloc_zeroed`].\n\n# Examples\n\n```\nuse std::alloc::{alloc_zeroed, dealloc, Layout};\n\nunsafe {\n    let layout = Layout::new::<u16>();\n    let ptr = alloc_zeroed(layout);\n\n    assert_eq!(*(ptr as *mut u16), 0);\n\n    dealloc(ptr, layout);\n}\n```","links":{"`Global`":"0:6725:1970","`GlobalAlloc::alloc_zeroed`":"1:11894:282","`Allocator`":"1:11946:1969"},"attrs":["#[stable(feature = \"global_alloc\", since = \"1.28.0\")]","#[must_use = \"losing the pointer will leak memory\"]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50943:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:0:671-0:6407:237":{"id":"b:0:671-0:6407:237","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2510-0:768:96":{"id":"b:1:2510-0:768:96","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5878":{"id":"0:5878","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain_filter.rs","begin":[48,0],"end":[113,1]},"visibility":{"restricted":{"parent":"0:5868:3974","path":"::vec::drain_filter"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:7057:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:5882:283","0:5883:10185"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3186":{"id":"0:3186","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1526,0],"end":[1530,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3188:782"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5673":{"id":"0:5673","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[1855,0],"end":[1993,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5675:306","0:5676:2546","0:5677:2513"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:515:2760":{"id":"0:515:2760","crate_id":0,"name":"nth_back","span":{"filename":"library/alloc/src/boxed.rs","begin":[1966,4],"end":[1968,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"1:7130:154","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:547":{"id":"0:547","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2014,0],"end":[2018,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"boxed_slice_from_iter\", since = \"1.32.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7012:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"I"}}}],"bindings":[]}}}},"items":["0:549:670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3253:2751":{"id":"0:3253:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1687,4],"end":[1693,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4463:1795":{"id":"0:4463:1795","crate_id":0,"name":"rc","span":{"filename":"library/alloc/src/rc.rs","begin":[1,0],"end":[2732,1]},"visibility":"public","docs":"Single-threaded reference-counting pointers. 'Rc' stands for 'Reference\nCounted'.\n\nThe type [`Rc<T>`][`Rc`] provides shared ownership of a value of type `T`,\nallocated in the heap. Invoking [`clone`][clone] on [`Rc`] produces a new\npointer to the same allocation in the heap. When the last [`Rc`] pointer to a\ngiven allocation is destroyed, the value stored in that allocation (often\nreferred to as \"inner value\") is also dropped.\n\nShared references in Rust disallow mutation by default, and [`Rc`]\nis no exception: you cannot generally obtain a mutable reference to\nsomething inside an [`Rc`]. If you need mutability, put a [`Cell`]\nor [`RefCell`] inside the [`Rc`]; see [an example of mutability\ninside an `Rc`][mutability].\n\n[`Rc`] uses non-atomic reference counting. This means that overhead is very\nlow, but an [`Rc`] cannot be sent between threads, and consequently [`Rc`]\ndoes not implement [`Send`][send]. As a result, the Rust compiler\nwill check *at compile time* that you are not sending [`Rc`]s between\nthreads. If you need multi-threaded, atomic reference counting, use\n[`sync::Arc`][arc].\n\nThe [`downgrade`][downgrade] method can be used to create a non-owning\n[`Weak`] pointer. A [`Weak`] pointer can be [`upgrade`][upgrade]d\nto an [`Rc`], but this will return [`None`] if the value stored in the allocation has\nalready been dropped. In other words, `Weak` pointers do not keep the value\ninside the allocation alive; however, they *do* keep the allocation\n(the backing store for the inner value) alive.\n\nA cycle between [`Rc`] pointers will never be deallocated. For this reason,\n[`Weak`] is used to break cycles. For example, a tree could have strong\n[`Rc`] pointers from parent nodes to children, and [`Weak`] pointers from\nchildren back to their parents.\n\n`Rc<T>` automatically dereferences to `T` (via the [`Deref`] trait),\nso you can call `T`'s methods on a value of type [`Rc<T>`][`Rc`]. To avoid name\nclashes with `T`'s methods, the methods of [`Rc<T>`][`Rc`] itself are associated\nfunctions, called using [fully qualified syntax]:\n\n```\nuse std::rc::Rc;\n\nlet my_rc = Rc::new(());\nlet my_weak = Rc::downgrade(&my_rc);\n```\n\n`Rc<T>`'s implementations of traits like `Clone` may also be called using\nfully qualified syntax. Some people prefer to use fully qualified syntax,\nwhile others prefer using method-call syntax.\n\n```\nuse std::rc::Rc;\n\nlet rc = Rc::new(());\n// Method-call syntax\nlet rc2 = rc.clone();\n// Fully qualified syntax\nlet rc3 = Rc::clone(&rc);\n```\n\n[`Weak<T>`][`Weak`] does not auto-dereference to `T`, because the inner value may have\nalready been dropped.\n\n# Cloning references\n\nCreating a new reference to the same allocation as an existing reference counted pointer\nis done using the `Clone` trait implemented for [`Rc<T>`][`Rc`] and [`Weak<T>`][`Weak`].\n\n```\nuse std::rc::Rc;\n\nlet foo = Rc::new(vec![1.0, 2.0, 3.0]);\n// The two syntaxes below are equivalent.\nlet a = foo.clone();\nlet b = Rc::clone(&foo);\n// a and b both point to the same memory location as foo.\n```\n\nThe `Rc::clone(&from)` syntax is the most idiomatic because it conveys more explicitly\nthe meaning of the code. In the example above, this syntax makes it easier to see that\nthis code is creating a new reference rather than copying the whole content of foo.\n\n# Examples\n\nConsider a scenario where a set of `Gadget`s are owned by a given `Owner`.\nWe want to have our `Gadget`s point to their `Owner`. We can't do this with\nunique ownership, because more than one gadget may belong to the same\n`Owner`. [`Rc`] allows us to share an `Owner` between multiple `Gadget`s,\nand have the `Owner` remain allocated as long as any `Gadget` points at it.\n\n```\nuse std::rc::Rc;\n\nstruct Owner {\n    name: String,\n    // ...other fields\n}\n\nstruct Gadget {\n    id: i32,\n    owner: Rc<Owner>,\n    // ...other fields\n}\n\nfn main() {\n    // Create a reference-counted `Owner`.\n    let gadget_owner: Rc<Owner> = Rc::new(\n        Owner {\n            name: \"Gadget Man\".to_string(),\n        }\n    );\n\n    // Create `Gadget`s belonging to `gadget_owner`. Cloning the `Rc<Owner>`\n    // gives us a new pointer to the same `Owner` allocation, incrementing\n    // the reference count in the process.\n    let gadget1 = Gadget {\n        id: 1,\n        owner: Rc::clone(&gadget_owner),\n    };\n    let gadget2 = Gadget {\n        id: 2,\n        owner: Rc::clone(&gadget_owner),\n    };\n\n    // Dispose of our local variable `gadget_owner`.\n    drop(gadget_owner);\n\n    // Despite dropping `gadget_owner`, we're still able to print out the name\n    // of the `Owner` of the `Gadget`s. This is because we've only dropped a\n    // single `Rc<Owner>`, not the `Owner` it points to. As long as there are\n    // other `Rc<Owner>` pointing at the same `Owner` allocation, it will remain\n    // live. The field projection `gadget1.owner.name` works because\n    // `Rc<Owner>` automatically dereferences to `Owner`.\n    println!(\"Gadget {} owned by {}\", gadget1.id, gadget1.owner.name);\n    println!(\"Gadget {} owned by {}\", gadget2.id, gadget2.owner.name);\n\n    // At the end of the function, `gadget1` and `gadget2` are destroyed, and\n    // with them the last counted references to our `Owner`. Gadget Man now\n    // gets destroyed as well.\n}\n```\n\nIf our requirements change, and we also need to be able to traverse from\n`Owner` to `Gadget`, we will run into problems. An [`Rc`] pointer from `Owner`\nto `Gadget` introduces a cycle. This means that their\nreference counts can never reach 0, and the allocation will never be destroyed:\na memory leak. In order to get around this, we can use [`Weak`]\npointers.\n\nRust actually makes it somewhat difficult to produce this loop in the first\nplace. In order to end up with two values that point at each other, one of\nthem needs to be mutable. This is difficult because [`Rc`] enforces\nmemory safety by only giving out shared references to the value it wraps,\nand these don't allow direct mutation. We need to wrap the part of the\nvalue we wish to mutate in a [`RefCell`], which provides *interior\nmutability*: a method to achieve mutability through a shared reference.\n[`RefCell`] enforces Rust's borrowing rules at runtime.\n\n```\nuse std::rc::Rc;\nuse std::rc::Weak;\nuse std::cell::RefCell;\n\nstruct Owner {\n    name: String,\n    gadgets: RefCell<Vec<Weak<Gadget>>>,\n    // ...other fields\n}\n\nstruct Gadget {\n    id: i32,\n    owner: Rc<Owner>,\n    // ...other fields\n}\n\nfn main() {\n    // Create a reference-counted `Owner`. Note that we've put the `Owner`'s\n    // vector of `Gadget`s inside a `RefCell` so that we can mutate it through\n    // a shared reference.\n    let gadget_owner: Rc<Owner> = Rc::new(\n        Owner {\n            name: \"Gadget Man\".to_string(),\n            gadgets: RefCell::new(vec![]),\n        }\n    );\n\n    // Create `Gadget`s belonging to `gadget_owner`, as before.\n    let gadget1 = Rc::new(\n        Gadget {\n            id: 1,\n            owner: Rc::clone(&gadget_owner),\n        }\n    );\n    let gadget2 = Rc::new(\n        Gadget {\n            id: 2,\n            owner: Rc::clone(&gadget_owner),\n        }\n    );\n\n    // Add the `Gadget`s to their `Owner`.\n    {\n        let mut gadgets = gadget_owner.gadgets.borrow_mut();\n        gadgets.push(Rc::downgrade(&gadget1));\n        gadgets.push(Rc::downgrade(&gadget2));\n\n        // `RefCell` dynamic borrow ends here.\n    }\n\n    // Iterate over our `Gadget`s, printing their details out.\n    for gadget_weak in gadget_owner.gadgets.borrow().iter() {\n\n        // `gadget_weak` is a `Weak<Gadget>`. Since `Weak` pointers can't\n        // guarantee the allocation still exists, we need to call\n        // `upgrade`, which returns an `Option<Rc<Gadget>>`.\n        //\n        // In this case we know the allocation still exists, so we simply\n        // `unwrap` the `Option`. In a more complicated program, you might\n        // need graceful error handling for a `None` result.\n\n        let gadget = gadget_weak.upgrade().unwrap();\n        println!(\"Gadget {} owned by {}\", gadget.id, gadget.owner.name);\n    }\n\n    // At the end of the function, `gadget_owner`, `gadget1`, and `gadget2`\n    // are destroyed. There are now no strong (`Rc`) pointers to the\n    // gadgets, so they are destroyed. This zeroes the reference count on\n    // Gadget Man, so he gets destroyed as well.\n}\n```\n\n[clone]: Clone::clone\n[`Cell`]: core::cell::Cell\n[`RefCell`]: core::cell::RefCell\n[send]: core::marker::Send\n[arc]: crate::sync::Arc\n[`Deref`]: core::ops::Deref\n[downgrade]: Rc::downgrade\n[upgrade]: Weak::upgrade\n[mutability]: core::cell#introducing-mutability-inside-of-something-immutable\n[fully qualified syntax]: https://doc.rust-lang.org/book/ch19-03-advanced-traits.html#fully-qualified-syntax-for-disambiguation-calling-methods-with-the-same-name","links":{"core::cell::Cell":"1:4108:7101","`None`":"1:47999:173","Weak::upgrade":"0:4764:7614","core::marker::Send":"1:2644:214","Clone::clone":"1:2234:409","`Weak`":"0:4737:7157","core::ops::Deref":"1:2886:115","`Rc`":"0:4521:198","core::cell#introducing-mutability-inside-of-something-immutable":"1:4018:7100","Rc::downgrade":"0:4581:7249","crate::sync::Arc":"0:5513:69","core::cell::RefCell":"1:4173:201"},"attrs":["#[cfg(not(no_rc))]","#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4521:198","0:4737:7157"],"is_stripped":false}},"0:592:180":{"id":"0:592:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/boxed.rs","begin":[2121,4],"end":[2121,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"Future","id":"1:11595:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:1:7709:3766-0:6787:192":{"id":"a:1:7709:3766-0:6787:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:6787:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2499-0:6779:3475":{"id":"b:1:2499-0:6779:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6779:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4416:742":{"id":"0:4416:742","crate_id":0,"name":"index","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1043,4],"end":[1045,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["_index",{"kind":"resolved_path","inner":{"name":"ops::RangeFull","id":"1:46305:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2502-0:5513:69":{"id":"b:1:2502-0:5513:69","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[751,0],"end":[751,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"never"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2504:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1757":{"id":"0:1757","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1980,0],"end":[1980,51]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:1394:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5380":{"id":"0:5380","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2630,0],"end":[2635,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"string_as_mut\", since = \"1.43.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2466:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5381:2784"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:477":{"id":"0:477","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1899,0],"end":[1905,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2886:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:480:224","0:481:536"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:314:2458":{"id":"0:314:2458","crate_id":0,"name":"new_zeroed_slice_in","span":{"filename":"library/alloc/src/boxed.rs","begin":[793,4],"end":[795,5]},"visibility":"public","docs":"Constructs a new boxed slice with uninitialized contents in the provided allocator,\nwith the memory being filled with `0` bytes.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\nof this method.\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nuse std::alloc::System;\n\nlet values = Box::<[u32], _>::new_zeroed_slice_in(3, System);\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [0, 0, 0])\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1519:2186"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["len",{"kind":"primitive","inner":"usize"}],["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5357":{"id":"0:5357","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2482,0],"end":[2488,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromStr","id":"1:10974:7939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5358:125","0:5359:8326"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:579:240":{"id":"0:579:240","crate_id":0,"name":"Yield","span":{"filename":"library/alloc/src/boxed.rs","begin":[2095,4],"end":[2095,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Yield","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"G"},"trait":{"name":"Generator","id":"1:2951:2334","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}}}}}},"a:1:2644:214-0:3004:4940":{"id":"a:1:2644:214-0:3004:4940","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:3004:4940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:803":{"id":"0:803","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[359,0],"end":[822,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:805:908","0:806:2019","0:807:3255","0:808:3231","0:810:3275","0:811:3286","0:819:3320","0:820:3336","0:821:3348"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3811:6108":{"id":"0:3811:6108","crate_id":0,"name":"advance_by","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[50,4],"end":[57,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6581:409":{"id":"0:6581:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2677,4],"end":[2680,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:1301:94":{"id":"a:1:7710:3767-0:1301:94","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5246":{"id":"0:5246","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2022,0],"end":[2028,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7012:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5248:670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5354":{"id":"0:5354","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2465,0],"end":[2470,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:2899:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5355:538"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3512":{"id":"0:3512","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1416,0],"end":[1701,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"CursorMut","id":"0:3474:5281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3515:5429","0:3516:5434","0:3517:5370","0:3518:5445","0:3519:5449","0:3520:5455","0:3521:5461","0:3522:5466","0:3523:5331","0:3524:5344","0:3525:5339","0:3526:5349","0:3527:4073","0:3528:5319","0:3529:4312","0:3530:5327"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2658:222-0:7002:8296":{"id":"a:1:2658:222-0:7002:8296","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf16Error","id":"0:7002:8296","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4392:59":{"id":"0:4392:59","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[913,4],"end":[916,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:3352:3805":{"id":"b:1:2216-0:3352:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3352:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3213":{"id":"0:3213","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1571,0],"end":[1589,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:6787:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3216:2750","0:3217:921","0:3219:2753","0:3220:4091","0:3221:2120"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:7068":{"id":"0:7068","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain_filter.rs","begin":[22,9],"end":[22,14]},"visibility":{"restricted":{"parent":"0:5868:3974","path":"::vec::drain_filter"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"drain_filter\", reason = \"recently added\", issue =\n\"43244\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:7057:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:7073:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6416:2866":{"id":"0:6416:2866","crate_id":0,"name":"from_raw_parts","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[588,4],"end":[590,5]},"visibility":"public","docs":"Creates a `Vec<T>` directly from a pointer, a capacity, and a length.\n\n# Safety\n\nThis is highly unsafe, due to the number of invariants that aren't\nchecked:\n\n* `T` needs to have the same alignment as what `ptr` was allocated with.\n  (`T` having a less strict alignment is not sufficient, the alignment really\n  needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n  allocated and deallocated with the same layout.)\n* The size of `T` times the `capacity` (ie. the allocated size in bytes) needs\n  to be the same size as the pointer was allocated with. (Because similar to\n  alignment, [`dealloc`] must be called with the same layout `size`.)\n* `length` needs to be less than or equal to `capacity`.\n* The first `length` values must be properly initialized values of type `T`.\n* `capacity` needs to be the capacity that the pointer was allocated with.\n* The allocated size in bytes must be no larger than `isize::MAX`.\n  See the safety documentation of [`pointer::offset`].\n\nThese requirements are always upheld by any `ptr` that has been allocated\nvia `Vec<T>`. Other allocation sources are allowed if the invariants are\nupheld.\n\nViolating these may cause problems like corrupting the allocator's\ninternal data structures. For example it is normally **not** safe\nto build a `Vec<u8>` from a pointer to a C `char` array with length\n`size_t`, doing so is only safe if the array was initially allocated by\na `Vec` or `String`.\nIt's also not safe to build one from a `Vec<u16>` and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for `u16`), but after\nturning it into a `Vec<u8>` it'll be deallocated with alignment 1. To avoid\nthese issues, it is often preferable to do casting/transmuting using\n[`slice::from_raw_parts`] instead.\n\nThe ownership of `ptr` is effectively transferred to the\n`Vec<T>` which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.\n\n[`String`]: crate::string::String\n[`dealloc`]: crate::alloc::GlobalAlloc::dealloc\n\n# Examples\n\n```\nuse std::ptr;\nuse std::mem;\n\nlet v = vec![1, 2, 3];\n\n// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\nlet mut v = mem::ManuallyDrop::new(v);\n\n// Pull out the various important pieces of information about `v`\nlet p = v.as_mut_ptr();\nlet len = v.len();\nlet cap = v.capacity();\n\nunsafe {\n    // Overwrite memory with 4, 5, 6\n    for i in 0..len {\n        ptr::write(p.add(i), 4 + i);\n    }\n\n    // Put everything back together into a Vec\n    let rebuilt = Vec::from_raw_parts(p, len, cap);\n    assert_eq!(rebuilt, [4, 5, 6]);\n}\n```\n\nUsing memory that was allocated elsewhere:\n\n```rust\n#![feature(allocator_api)]\n\nuse std::alloc::{AllocError, Allocator, Global, Layout};\n\nfn main() {\n    let layout = Layout::array::<u32>(16).expect(\"overflow cannot happen\");\n\n    let vec = unsafe {\n        let mem = match Global.allocate(layout) {\n            Ok(mem) => mem.cast::<u32>().as_ptr(),\n            Err(AllocError) => return,\n        };\n\n        mem.write(1_000_000);\n\n        Vec::from_raw_parts_in(mem, 1, 16, Global)\n    };\n\n    assert_eq!(vec, &[1_000_000]);\n    assert_eq!(vec.capacity(), 16);\n}\n```","links":{"crate::alloc::GlobalAlloc::dealloc":"1:11893:512","`pointer::offset`":"1:1984:955","`slice::from_raw_parts`":"1:10141:2866"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["ptr",{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"generic","inner":"T"}}}],["length",{"kind":"primitive","inner":"usize"}],["capacity",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:6422:2065":{"id":"0:6422:2065","crate_id":0,"name":"from_raw_parts_in","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[781,4],"end":[783,5]},"visibility":"public","docs":"Creates a `Vec<T, A>` directly from a pointer, a capacity, a length,\nand an allocator.\n\n# Safety\n\nThis is highly unsafe, due to the number of invariants that aren't\nchecked:\n\n* `T` needs to have the same alignment as what `ptr` was allocated with.\n  (`T` having a less strict alignment is not sufficient, the alignment really\n  needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n  allocated and deallocated with the same layout.)\n* The size of `T` times the `capacity` (ie. the allocated size in bytes) needs\n  to be the same size as the pointer was allocated with. (Because similar to\n  alignment, [`dealloc`] must be called with the same layout `size`.)\n* `length` needs to be less than or equal to `capacity`.\n* The first `length` values must be properly initialized values of type `T`.\n* `capacity` needs to [*fit*] the layout size that the pointer was allocated with.\n* The allocated size in bytes must be no larger than `isize::MAX`.\n  See the safety documentation of [`pointer::offset`].\n\nThese requirements are always upheld by any `ptr` that has been allocated\nvia `Vec<T, A>`. Other allocation sources are allowed if the invariants are\nupheld.\n\nViolating these may cause problems like corrupting the allocator's\ninternal data structures. For example it is **not** safe\nto build a `Vec<u8>` from a pointer to a C `char` array with length `size_t`.\nIt's also not safe to build one from a `Vec<u16>` and its length, because\nthe allocator cares about the alignment, and these two types have different\nalignments. The buffer was allocated with alignment 2 (for `u16`), but after\nturning it into a `Vec<u8>` it'll be deallocated with alignment 1.\n\nThe ownership of `ptr` is effectively transferred to the\n`Vec<T>` which may then deallocate, reallocate or change the\ncontents of memory pointed to by the pointer at will. Ensure\nthat nothing else uses the pointer after calling this\nfunction.\n\n[`String`]: crate::string::String\n[`dealloc`]: crate::alloc::GlobalAlloc::dealloc\n[*fit*]: crate::alloc::Allocator#memory-fitting\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nuse std::ptr;\nuse std::mem;\n\nlet mut v = Vec::with_capacity_in(3, System);\nv.push(1);\nv.push(2);\nv.push(3);\n\n// Prevent running `v`'s destructor so we are in complete control\n// of the allocation.\nlet mut v = mem::ManuallyDrop::new(v);\n\n// Pull out the various important pieces of information about `v`\nlet p = v.as_mut_ptr();\nlet len = v.len();\nlet cap = v.capacity();\nlet alloc = v.allocator();\n\nunsafe {\n    // Overwrite memory with 4, 5, 6\n    for i in 0..len {\n        ptr::write(p.add(i), 4 + i);\n    }\n\n    // Put everything back together into a Vec\n    let rebuilt = Vec::from_raw_parts_in(p, len, cap, alloc.clone());\n    assert_eq!(rebuilt, [4, 5, 6]);\n}\n```\n\nUsing memory that was allocated elsewhere:\n\n```rust\nuse std::alloc::{alloc, Layout};\n\nfn main() {\n    let layout = Layout::array::<u32>(16).expect(\"overflow cannot happen\");\n    let vec = unsafe {\n        let mem = alloc(layout).cast::<u32>();\n        if mem.is_null() {\n            return;\n        }\n\n        mem.write(1_000_000);\n\n        Vec::from_raw_parts(mem, 1, 16)\n    };\n\n    assert_eq!(vec, &[1_000_000]);\n    assert_eq!(vec.capacity(), 16);\n}\n```","links":{"crate::alloc::Allocator#memory-fitting":"1:11946:1969","crate::alloc::GlobalAlloc::dealloc":"1:11893:512","`pointer::offset`":"1:1984:955"},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["ptr",{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"generic","inner":"T"}}}],["length",{"kind":"primitive","inner":"usize"}],["capacity",{"kind":"primitive","inner":"usize"}],["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:3766":{"id":"0:3766","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[193,0],"end":[212,1]},"visibility":{"restricted":{"parent":"0:3709:3448","path":"::collections::vec_deque::drain"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:3723:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3769:2750","0:3770:921","0:3771:2751"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3303-0:1426:192":{"id":"b:1:3303-0:1426:192","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:1426:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:869":{"id":"0:869","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1324,0],"end":[1341,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:872:2750","0:873:921","0:874:2751","0:875:2753"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5051":{"id":"0:5051","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[45,20],"end":[45,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::MatchIndices","name":"MatchIndices","id":"1:50115:7942","glob":false}},"0:418":{"id":"0:418","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1547,0],"end":[1578,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_from_cow\", since = \"1.45.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:419:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2218:1793":{"id":"1:2218:1793","crate_id":1,"name":"borrow","span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[213,4],"end":[213,26]},"visibility":"default","docs":null,"links":{},"attrs":["#[rustc_diagnostic_item = \"noop_method_borrow\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:614":{"id":"0:614","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2221,0],"end":[2256,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"E","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"E"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"items":["0:617:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3566:650":{"id":"0:3566:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1777,4],"end":[1779,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6821:409":{"id":"0:6821:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[134,9],"end":[134,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3267:2751":{"id":"0:3267:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1746,4],"end":[1753,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1371":{"id":"0:1371","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[418,0],"end":[422,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1359:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1375:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2216-0:1680:4069":{"id":"b:1:2216-0:1680:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:1680:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:7020-0:2944:4916":{"id":"b:1:7020-0:2944:4916","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:2944:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:5092:2911":{"id":"0:5092:2911","crate_id":0,"name":"clone_into","span":{"filename":"library/alloc/src/str.rs","begin":[212,4],"end":[216,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3197:2751":{"id":"0:3197:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1543,4],"end":[1545,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:3339:3356":{"id":"b:1:2495-0:3339:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7709:3766-0:6749:3449":{"id":"a:1:7709:3766-0:6749:3449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:6749:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4129:5820":{"id":"0:4129:5820","crate_id":0,"name":"swap_remove_front","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1679,4],"end":[1687,5]},"visibility":"public","docs":"Removes an element from anywhere in the deque and returns it,\nreplacing it with the first element.\n\nThis does not preserve ordering, but is *O*(1).\n\nReturns `None` if `index` is out of bounds.\n\nElement at index 0 is the front of the queue.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nassert_eq!(buf.swap_remove_front(0), None);\nbuf.push_back(1);\nbuf.push_back(2);\nbuf.push_back(3);\nassert_eq!(buf, [1, 2, 3]);\n\nassert_eq!(buf.swap_remove_front(2), Some(3));\nassert_eq!(buf, [2, 1]);\n```","links":{},"attrs":["#[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:820:3336":{"id":"0:820:3336","crate_id":0,"name":"drain_sorted","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[781,4],"end":[783,5]},"visibility":"public","docs":"Clears the binary heap, returning an iterator over the removed elements\nin heap order. If the iterator is dropped before being fully consumed,\nit drops the remaining elements in heap order.\n\nThe returned iterator keeps a mutable borrow on the heap to optimize\nits implementation.\n\nNote:\n* `.drain_sorted()` is *O*(*n* \\* log(*n*)); much slower than `.drain()`.\n  You should use the latter for most cases.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(binary_heap_drain_sorted)]\nuse std::collections::BinaryHeap;\n\nlet mut heap = BinaryHeap::from([1, 2, 3, 4, 5]);\nassert_eq!(heap.len(), 5);\n\ndrop(heap.drain_sorted()); // removes all elements in heap order\nassert_eq!(heap.len(), 0);\n```","links":{},"attrs":["#[inline]","#[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"DrainSorted","id":"0:6757:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:6083:3475":{"id":"a:1:2708:2329-0:6083:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2499-0:1359:3475":{"id":"b:1:2499-0:1359:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1359:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6131:2759":{"id":"0:6131:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[299,4],"end":[313,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:955":{"id":"0:955","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1565,0],"end":[1565,56]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainSorted","id":"0:6757:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5101:8019":{"id":"0:5101:8019","crate_id":0,"name":"to_lowercase","span":{"filename":"library/alloc/src/str.rs","begin":[368,4],"end":[419,5]},"visibility":"public","docs":"Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```","links":{"`String`":"0:6980:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[must_use =\n\"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]","#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1669":{"id":"0:1669","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1796,0],"end":[1800,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:1385:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1672:782"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1435:3845":{"id":"0:1435:3845","crate_id":0,"name":"RangeMut","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[550,0],"end":[555,1]},"visibility":"public","docs":"A mutable iterator over a sub-range of entries in a `BTreeMap`.\n\nThis `struct` is created by the [`range_mut`] method on [`BTreeMap`]. See its\ndocumentation for more.\n\n[`range_mut`]: BTreeMap::range_mut","links":{"BTreeMap::range_mut":"0:1490:4017","`BTreeMap`":"0:1301:94"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:1435:3845","a:1:2644:214-0:1435:3845","a:1:2708:2329-0:1435:3845","a:1:7709:3766-0:1435:3845","a:1:7710:3767-0:1435:3845","b:1:7020-0:1435:3845","b:1:2510-0:1435:3845","b:1:2505-0:1435:3845","b:1:2216-0:1435:3845","b:1:3303-0:1435:3845","b:1:2219-0:1435:3845","b:1:2499-0:1435:3845","b:1:2495-0:1435:3845","0:1441","0:1822","0:1831","0:1836"]}},"0:821:3348":{"id":"0:821:3348","crate_id":0,"name":"retain","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[805,4],"end":[821,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` for which `f(&e)` returns\n`false`. The elements are visited in unsorted (and unspecified) order.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(binary_heap_retain)]\nuse std::collections::BinaryHeap;\n\nlet mut heap = BinaryHeap::from([-10, -5, 1, 2, 4, 13]);\n\nheap.retain(|x| x % 2 == 0); // only keep even numbers\n\nassert_eq!(heap.into_sorted_vec(), [-10, 2, 4])\n```","links":{},"attrs":["#[unstable(feature = \"binary_heap_retain\", issue = \"71503\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:874:2751":{"id":"0:874:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1333,4],"end":[1335,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6834:595":{"id":"0:6834:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2683,0],"end":[2683,51]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5178:8485":{"id":"0:5178:8485","crate_id":0,"name":"extend_from_within","span":{"filename":"library/alloc/src/string.rs","begin":[953,4],"end":[963,5]},"visibility":"public","docs":"Copies elements from `src` range to the end of the string.\n\n## Panics\n\nPanics if the starting point or end point do not lie on a [`char`]\nboundary, or if they're out of bounds.\n\n## Examples\n\n```\n#![feature(string_extend_from_within)]\nlet mut string = String::from(\"abcde\");\n\nstring.extend_from_within(2..);\nassert_eq!(string, \"abcdecde\");\n\nstring.extend_from_within(..2);\nassert_eq!(string, \"abcdecdeab\");\n\nstring.extend_from_within(4..8);\nassert_eq!(string, \"abcdecdeabecde\");\n```","links":{"`char`":"1:58430:10458"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"string_extend_from_within\", issue = \"103806\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["src",{"kind":"generic","inner":"R"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3066:3663","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5564:1758":{"id":"0:5564:1758","crate_id":0,"name":"new_uninit","span":{"filename":"library/alloc/src/sync.rs","begin":[502,4],"end":[510,5]},"visibility":"public","docs":"Constructs a new `Arc` with uninitialized contents.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(get_mut_unchecked)]\n\nuse std::sync::Arc;\n\nlet mut five = Arc::<u32>::new_uninit();\n\n// Deferred initialization:\nArc::get_mut(&mut five).unwrap().write(5);\n\nlet five = unsafe { five.assume_init() };\n\nassert_eq!(*five, 5)\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:888":{"id":"0:888","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1382,0],"end":[1394,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:890:2750","0:891:921","0:892:2751"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4192:180":{"id":"0:4192:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2721,4],"end":[2721,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"b:1:2495-0:6749:3449":{"id":"b:1:2495-0:6749:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:6749:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2644:214-0:6740:3364":{"id":"a:1:2644:214-0:6740:3364","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1381":{"id":"0:1381","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[437,0],"end":[441,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:1376:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1384:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4236:3508":{"id":"0:4236:3508","crate_id":0,"name":"extend_reserve","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2805,4],"end":[2807,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4693":{"id":"0:4693","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1893,0],"end":[1910,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"from_for_ptrs\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4695:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7710:3767-0:6944:6202":{"id":"a:1:7710:3767-0:6944:6202","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6052:670":{"id":"0:6052:670","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/vec/cow.rs","begin":[50,4],"end":[52,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["it",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6909":{"id":"0:6909","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[109,41],"end":[109,45]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:8791:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6910:702"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6564":{"id":"0:6564","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2637,0],"end":[2642,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:2899:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6567:538"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:717":{"id":"0:717","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[397,0],"end":[407,1]},"visibility":{"restricted":{"parent":"0:648:1793","path":"::borrow"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"constraint":[{"trait_bound":{"trait":{"name":"fmt::Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}]}}]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["0:719:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7710:3767-0:859:3356":{"id":"a:1:7710:3767-0:859:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:0:5362-0:6980:218":{"id":"b:0:5362-0:6980:218","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2526,0],"end":[2540,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5360:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5364:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2708:2329-0:6914:6204":{"id":"a:1:2708:2329-0:6914:6204","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3919:921":{"id":"0:3919:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[43,4],"end":[56,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:631":{"id":"0:631","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2326,0],"end":[2346,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"items":["0:633:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3395:2762":{"id":"0:3395:2762","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[588,4],"end":[590,5]},"visibility":"public","docs":"Returns `true` if the `LinkedList` is empty.\n\nThis operation should compute in *O*(1) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\nassert!(dl.is_empty());\n\ndl.push_front(\"foo\");\nassert!(!dl.is_empty());\n```","links":{},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6700":{"id":"0:6700","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3171,0],"end":[3192,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"vec_from_cow_slice\", since = \"1.14.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}},"bounds":[{"trait_bound":{"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:6703:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1647":{"id":"0:1647","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1762,0],"end":[1762,46]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:1376:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:7020-0:6740:3364":{"id":"b:1:7020-0:6740:3364","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:382:702":{"id":"0:382:702","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/boxed.rs","begin":[1381,4],"end":[1383,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:8805:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:6957:6203":{"id":"b:1:3303-0:6957:6203","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:7290:595":{"id":"0:7290:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[37,0],"end":[37,118]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"U"},"len":"N"}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5523":{"id":"0:5523","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[258,0],"end":[258,74]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Unsize","id":"1:2652:2330","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"CoerceUnsized","id":"1:3181:2331","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3233":{"id":"0:3233","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1619,0],"end":[1663,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:2944:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3237:2750","0:3238:921","0:3240:2751","0:3241:4091"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5448:2751":{"id":"0:5448:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/string.rs","begin":[2962,4],"end":[2964,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4214:757":{"id":"0:4214:757","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2761,4],"end":[2763,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11411:40323":{"id":"1:11411:40323","crate_id":1,"name":"trim_start_matches","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[2107,4],"end":[2107,78]},"visibility":"public","docs":"Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```","links":{"self::pattern":"1:11013:1760","prim@char":"1:58430:10458"},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:887:650":{"id":"0:887:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1376,4],"end":[1378,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6884:2125":{"id":"0:6884:2125","crate_id":0,"name":"AllocError","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[92,4],"end":[106,5]},"visibility":"default","docs":"The memory allocator returned an error","links":{},"attrs":[],"deprecation":null,"kind":"variant","inner":{"variant_kind":"struct","variant_inner":{"fields":["0:6885:2052"],"fields_stripped":true}}},"0:4273:668":{"id":"0:4273:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[125,4],"end":[127,5]},"visibility":"default","docs":"Always evaluates to [`TryReserveErrorKind::CapacityOverflow`].","links":{"`TryReserveErrorKind::CapacityOverflow`":"0:6882:2116"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["_",{"kind":"resolved_path","inner":{"name":"LayoutError","id":"1:50960:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:7020-0:6787:192":{"id":"b:1:7020-0:6787:192","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:6787:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:4737:7157":{"id":"0:4737:7157","crate_id":0,"name":"Weak","span":{"filename":"library/alloc/src/rc.rs","begin":[2178,0],"end":[2186,1]},"visibility":"public","docs":"`Weak` is a version of [`Rc`] that holds a non-owning reference to the\nmanaged allocation. The allocation is accessed by calling [`upgrade`] on the `Weak`\npointer, which returns an <code>[Option]<[Rc]\\<T>></code>.\n\nSince a `Weak` reference does not count towards ownership, it will not\nprevent the value stored in the allocation from being dropped, and `Weak` itself makes no\nguarantees about the value still being present. Thus it may return [`None`]\nwhen [`upgrade`]d. Note however that a `Weak` reference *does* prevent the allocation\nitself (the backing store) from being deallocated.\n\nA `Weak` pointer is useful for keeping a temporary reference to the allocation\nmanaged by [`Rc`] without preventing its inner value from being dropped. It is also used to\nprevent circular references between [`Rc`] pointers, since mutual owning references\nwould never allow either [`Rc`] to be dropped. For example, a tree could\nhave strong [`Rc`] pointers from parent nodes to children, and `Weak`\npointers from children back to their parents.\n\nThe typical way to obtain a `Weak` pointer is to call [`Rc::downgrade`].\n\n[`upgrade`]: Weak::upgrade","links":{"`Rc`":"0:4521:198","Option":"1:47997:175","Weak::upgrade":"0:4764:7614","`None`":"1:47999:173","`Rc::downgrade`":"0:4581:7249","Rc":"0:4521:198"},"attrs":["#[stable(feature = \"rc_weak\", since = \"1.4.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:4750","0:4759","a:1:2708:2329-0:4737:7157","a:1:7709:3766-0:4737:7157","a:1:7710:3767-0:4737:7157","b:0:671-0:4737:7157","b:1:2510-0:4737:7157","b:1:2505-0:4737:7157","b:1:2216-0:4737:7157","b:1:3303-0:4737:7157","b:1:2219-0:4737:7157","b:1:2499-0:4737:7157","b:1:2495-0:4737:7157","0:4740","0:4742","0:4744","0:4747","0:4770","0:4773","0:4776","0:4779"]}},"0:4556:2386":{"id":"0:4556:2386","crate_id":0,"name":"try_new_uninit","span":{"filename":"library/alloc/src/rc.rs","begin":[594,4],"end":[602,5]},"visibility":"public","docs":"Constructs a new `Rc` with uninitialized contents, returning an error if the allocation fails\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n#![feature(get_mut_unchecked)]\n\nuse std::rc::Rc;\n\nlet mut five = Rc::<u32>::try_new_uninit()?;\n\n// Deferred initialization:\nRc::get_mut(&mut five).unwrap().write(5);\n\nlet five = unsafe { five.assume_init() };\n\nassert_eq!(*five, 5);\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50972:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:2978:4931":{"id":"b:1:2505-0:2978:4931","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:2978:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1676":{"id":"0:1676","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1806,0],"end":[1810,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:1385:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1679:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3948:2762":{"id":"0:3948:2762","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[162,4],"end":[164,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:6779:3475":{"id":"b:1:2495-0:6779:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6779:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2567-0:276:1792":{"id":"b:1:2567-0:276:1792","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/error.rs","begin":[198,0],"end":[198,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"1:3352:10680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2569:9224"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"b:1:2499-0:1201:3672":{"id":"b:1:2499-0:1201:3672","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:1201:3672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6880:650":{"id":"0:6880:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[59,31],"end":[59,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2658:222-0:2908:95":{"id":"a:1:2658:222-0:2908:95","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3212:409":{"id":"0:3212:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1565,4],"end":[1567,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4450":{"id":"0:4450","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[569,31],"end":[569,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::Result","name":"Result","id":"1:8517:204","glob":false}},"b:1:3303-0:7002:8296":{"id":"b:1:3303-0:7002:8296","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf16Error","id":"0:7002:8296","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2708:2329-0:7057:4069":{"id":"a:1:2708:2329-0:7057:4069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:7057:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:3305:1432":{"id":"1:3305:1432","crate_id":1,"name":"type_id","span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[201,4],"end":[201,31]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TypeId","id":"1:46470:10678","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6851:595":{"id":"0:6851:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2686,0],"end":[2686,62]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"U"},"len":"N"}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:3474:5281":{"id":"b:1:2510-0:3474:5281","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CursorMut","id":"0:3474:5281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4845":{"id":"0:4845","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[52,22],"end":[52,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"chunks_exact\", since = \"1.31.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::ChunksExact","name":"ChunksExact","id":"1:49773:7684","glob":false}},"a:1:2708:2329-0:1435:3845":{"id":"a:1:2708:2329-0:1435:3845","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangeMut","id":"0:1435:3845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3492:5415":{"id":"0:3492:5415","crate_id":0,"name":"peek_next","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1260,4],"end":[1268,5]},"visibility":"public","docs":"Returns a reference to the next element.\n\nIf the cursor is pointing to the \"ghost\" non-element then this returns\nthe first element of the `LinkedList`. If it is pointing to the last\nelement of the `LinkedList` then this returns `None`.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:0:671-0:1385:3820":{"id":"b:0:671-0:1385:3820","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:1385:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2505-0:1415:3837":{"id":"b:1:2505-0:1415:3837","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:1415:3837","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:743:268":{"id":"0:743:268","crate_id":0,"name":"add_assign","span":{"filename":"library/alloc/src/borrow.rs","begin":[482,4],"end":[493,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["rhs",{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:118:2130":{"id":"0:118:2130","crate_id":0,"name":"deallocate","span":{"filename":"library/alloc/src/alloc.rs","begin":[246,4],"end":[252,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:1815:1966","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50943:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"1:11407:40321":{"id":"1:11407:40321","crate_id":1,"name":"trim_right","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[2025,4],"end":[2025,36]},"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_end`\", suggestion =\n\"trim_end\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_end`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5216:4039":{"id":"0:5216:4039","crate_id":0,"name":"split_off","span":{"filename":"library/alloc/src/string.rs","begin":[1687,4],"end":[1691,5]},"visibility":"public","docs":"Splits the string into two at the given byte index.\n\nReturns a newly allocated `String`. `self` contains bytes `[0, at)`, and\nthe returned `String` contains bytes `[at, len)`. `at` must be on the\nboundary of a UTF-8 code point.\n\nNote that the capacity of `self` does not change.\n\n# Panics\n\nPanics if `at` is not on a `UTF-8` code point boundary, or if it is beyond the last\ncode point of the string.\n\n# Examples\n\n```\n# fn main() {\nlet mut hello = String::from(\"Hello, World!\");\nlet world = hello.split_off(7);\nassert_eq!(hello, \"Hello, \");\nassert_eq!(world, \"World!\");\n# }\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"string_split_off\", since = \"1.16.0\")]","#[must_use = \"use `.truncate()` if you don't need the other half\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["at",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:6869:1971":{"id":"a:1:2644:214-0:6869:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:481:536":{"id":"0:481:536","crate_id":0,"name":"deref","span":{"filename":"library/alloc/src/boxed.rs","begin":[1902,4],"end":[1904,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6023":{"id":"0:6023","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[245,0],"end":[249,1]},"visibility":{"restricted":{"parent":"0:5946:3448","path":"::vec::drain"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6026:2762"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2510-0:1385:3820":{"id":"b:1:2510-0:1385:3820","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:1385:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1355":{"id":"0:1355","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[382,0],"end":[387,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:1348:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1358:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4393":{"id":"0:4393","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[919,0],"end":[956,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4394:6499","0:4395:1928"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:330:2048":{"id":"0:330:2048","crate_id":0,"name":"from_raw_in","span":{"filename":"library/alloc/src/boxed.rs","begin":[1013,4],"end":[1015,5]},"visibility":"public","docs":"Constructs a box from a raw pointer in the given allocator.\n\nAfter calling this function, the raw pointer is owned by the\nresulting `Box`. Specifically, the `Box` destructor will call\nthe destructor of `T` and free the allocated memory. For this\nto be safe, the memory must have been allocated in accordance\nwith the [memory layout] used by `Box` .\n\n# Safety\n\nThis function is unsafe because improper use may lead to\nmemory problems. For example, a double-free may occur if the\nfunction is called twice on the same raw pointer.\n\n\n# Examples\n\nRecreate a `Box` which was previously converted to a raw pointer\nusing [`Box::into_raw_with_allocator`]:\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nlet x = Box::new_in(5, System);\nlet (ptr, alloc) = Box::into_raw_with_allocator(x);\nlet x = unsafe { Box::from_raw_in(ptr, alloc) };\n```\nManually create a `Box` from scratch by using the system allocator:\n```\n#![feature(allocator_api, slice_ptr_get)]\n\nuse std::alloc::{Allocator, Layout, System};\n\nunsafe {\n    let ptr = System.allocate(Layout::new::<i32>())?.as_mut_ptr() as *mut i32;\n    // In general .write is required to avoid attempting to destruct\n    // the (uninitialized) previous contents of `ptr`, though for this\n    // simple example `*ptr = 5` would have worked as well.\n    ptr.write(5);\n    let x = Box::from_raw_in(ptr, System);\n}\n# Ok::<(), std::alloc::AllocError>(())\n```\n\n[memory layout]: self#memory-layout\n[`Layout`]: crate::Layout","links":{"self#memory-layout":"0:141:1791","`Box::into_raw_with_allocator`":"0:332:2420"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["raw",{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"generic","inner":"T"}}}],["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:1532:782":{"id":"0:1532:782","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1528,4],"end":[1530,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11614:180":{"id":"1:11614:180","crate_id":1,"name":"Output","span":{"filename":"/rust-lang-rust/library/core/src/future/into_future.rs","begin":[133,4],"end":[133,15]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"Future","id":"1:11595:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:1745:2751":{"id":"0:1745:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1956,4],"end":[1958,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6497:2762":{"id":"0:6497:2762","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2072,4],"end":[2074,5]},"visibility":"public","docs":"Returns `true` if the vector contains no elements.\n\n# Examples\n\n```\nlet mut v = Vec::new();\nassert!(v.is_empty());\n\nv.push(1);\nassert!(!v.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:273":{"id":"0:273","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[277,0],"end":[281,1]},"visibility":{"restricted":{"parent":"0:194:2340","path":"::boxed::thin"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["type_id","provide","cause","source","description"],"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:275:2625"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2216-0:7074:9310":{"id":"b:1:2216-0:7074:9310","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Splice","id":"0:7074:9310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2924":{"id":"0:2924","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[106,0],"end":[110,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2305:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["le","ge","lt","gt"],"trait":{"name":"PartialOrd","id":"1:2305:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:2927:995"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2219-0:6757:3337":{"id":"b:1:2219-0:6757:3337","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainSorted","id":"0:6757:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5311":{"id":"0:5311","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2280,0],"end":[2285,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5312:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5604:7324":{"id":"0:5604:7324","crate_id":0,"name":"ptr_eq","span":{"filename":"library/alloc/src/sync.rs","begin":[1149,4],"end":[1151,5]},"visibility":"public","docs":"Returns `true` if the two `Arc`s point to the same allocation in a vein similar to\n[`ptr::eq`]. See [that function][`ptr::eq`] for caveats when comparing `dyn Trait` pointers.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\nlet same_five = Arc::clone(&five);\nlet other_five = Arc::new(5);\n\nassert!(Arc::ptr_eq(&five, &same_five));\nassert!(!Arc::ptr_eq(&five, &other_five));\n```\n\n[`ptr::eq`]: core::ptr::eq \"ptr::eq\"","links":{"core::ptr::eq":"1:2198:595"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"ptr_eq\", since = \"1.17.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1583:571":{"id":"0:1583:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1637,4],"end":[1657,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5385:668":{"id":"0:5385:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[2652,4],"end":[2654,5]},"visibility":"default","docs":"Converts a `&str` into a [`String`].\n\nThe result is allocated on the heap.","links":{"`String`":"0:6980:218"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:3096:4069":{"id":"b:1:2219-0:3096:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3096:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2510-0:6914:6204":{"id":"b:1:2510-0:6914:6204","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1524":{"id":"0:1524","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1515,0],"end":[1524,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1528:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6614:3475":{"id":"0:6614:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2800,4],"end":[2800,39]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Iter","id":"1:9257:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"0:4705:668":{"id":"0:4705:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/rc.rs","begin":[1983,4],"end":[1985,5]},"visibility":"default","docs":"Move a boxed object to a new, reference counted, allocation.\n\n# Example\n\n```\n# use std::rc::Rc;\nlet original: Box<i32> = Box::new(1);\nlet shared: Rc<i32> = Rc::from(original);\nassert_eq!(1, *shared);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7251:895":{"id":"0:7251:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[28,0],"end":[28,118]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"U"}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:924:2750":{"id":"0:924:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1485,4],"end":[1485,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:3238:921":{"id":"0:3238:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1622,4],"end":[1647,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4400":{"id":"0:4400","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[979,0],"end":[1000,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4401:6508","0:4402:6389"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3189":{"id":"0:3189","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1533,0],"end":[1533,40]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3050:3521":{"id":"0:3050:3521","crate_id":0,"name":"remove","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[955,4],"end":[961,5]},"visibility":"public","docs":"If the set contains an element equal to the value, removes it from the\nset and drops it. Returns whether such an element was present.\n\nThe value may be any borrowed form of the set's element type,\nbut the ordering on the borrowed form *must* match the\nordering on the element type.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::new();\n\nset.insert(2);\nassert_eq!(set.remove(&2), true);\nassert_eq!(set.remove(&2), false);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:1216:3670":{"id":"a:1:2708:2329-0:1216:3670","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:1216:3670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2219-0:6980:218":{"id":"b:1:2219-0:6980:218","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4186:702":{"id":"0:4186:702","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2707,4],"end":[2716,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:8805:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4872":{"id":"0:4872","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[66,38],"end":[66,55]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::SplitInclusiveMut","name":"SplitInclusiveMut","id":"1:9426:7707","glob":false}},"0:472:650":{"id":"0:472:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/boxed.rs","begin":[1882,4],"end":[1884,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3546":{"id":"0:3546","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1746,0],"end":[1770,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"drain_filter\", reason = \"recently added\", issue =\n\"43244\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3531:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:3549:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2219-0:2937:3356":{"id":"b:1:2219-0:2937:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6961:409":{"id":"0:6961:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[225,9],"end":[225,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7000":{"id":"0:7000","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[406,27],"end":[406,29]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4016:238":{"id":"0:4016:238","crate_id":0,"name":"VecDeque","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[94,0],"end":[106,1]},"visibility":"public","docs":"A double-ended queue implemented with a growable ring buffer.\n\nThe \"default\" usage of this type as a queue is to use [`push_back`] to add to\nthe queue, and [`pop_front`] to remove from the queue. [`extend`] and [`append`]\npush onto the back in this manner, and iterating over `VecDeque` goes front\nto back.\n\nA `VecDeque` with a known list of items can be initialized from an array:\n\n```\nuse std::collections::VecDeque;\n\nlet deq = VecDeque::from([-1, 0, 1]);\n```\n\nSince `VecDeque` is a ring buffer, its elements are not necessarily contiguous\nin memory. If you want to access the elements as a single slice, such as for\nefficient sorting, you can use [`make_contiguous`]. It rotates the `VecDeque`\nso that its elements do not wrap, and returns a mutable slice to the\nnow-contiguous element sequence.\n\n[`push_back`]: VecDeque::push_back\n[`pop_front`]: VecDeque::pop_front\n[`extend`]: VecDeque::extend\n[`append`]: VecDeque::append\n[`make_contiguous`]: VecDeque::make_contiguous","links":{"VecDeque::make_contiguous":"0:4142:5929","VecDeque::push_back":"0:4127:5344","VecDeque::append":"0:4134:3320","VecDeque::extend":"0:4225:2885","VecDeque::pop_front":"0:4124:5339"},"attrs":["#[rustc_diagnostic_item = \"VecDeque\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_insignificant_dtor]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:4073","0:4077","0:4163","a:1:2658:222-0:4016:238","a:1:2644:214-0:4016:238","a:1:2708:2329-0:4016:238","a:1:7709:3766-0:4016:238","a:1:7710:3767-0:4016:238","b:0:671-0:4016:238","b:1:2510-0:4016:238","b:1:2505-0:4016:238","b:1:2216-0:4016:238","b:1:3303-0:4016:238","b:1:2219-0:4016:238","b:1:2499-0:4016:238","b:1:2495-0:4016:238","0:4022","0:4027","0:4040","0:4168","0:4172","0:6830","0:6835","0:6840","0:6845","0:6853","0:6861","0:4175","0:4179","0:4183","0:4189","0:4194","0:4198","0:4202","0:4208","0:4215","0:4222","0:4229","0:4237","0:4241","0:4245","0:4249"]}},"a:1:7709:3766-0:6991:8288":{"id":"a:1:7709:3766-0:6991:8288","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:289:2386":{"id":"0:289:2386","crate_id":0,"name":"try_new_uninit","span":{"filename":"library/alloc/src/boxed.rs","begin":[333,4],"end":[335,5]},"visibility":"public","docs":"Constructs a new box with uninitialized contents on the heap,\nreturning an error if the allocation fails\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nlet mut five = Box::<u32>::try_new_uninit()?;\n\nlet five = unsafe {\n    // Deferred initialization:\n    five.as_mut_ptr().write(5);\n\n    five.assume_init()\n};\n\nassert_eq!(*five, 5);\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50972:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7227:895":{"id":"0:7227:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[24,0],"end":[24,99]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"U"}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4112:3801":{"id":"0:4112:3801","crate_id":0,"name":"range","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1280,4],"end":[1292,5]},"visibility":"public","docs":"Creates an iterator that covers the specified range in the deque.\n\n# Panics\n\nPanics if the starting point is greater than the end point or if\nthe end point is greater than the length of the deque.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<_> = [1, 2, 3].into();\nlet range = deque.range(2..).copied().collect::<VecDeque<_>>();\nassert_eq!(range, [3]);\n\n// A full range covers all contents\nlet all = deque.range(..);\nassert_eq!(all.len(), 3);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"deque_range\", since = \"1.51.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["range",{"kind":"generic","inner":"R"}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3066:3663","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3618":{"id":"0:3618","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1889,0],"end":[1897,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3620:595","0:3621:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4643":{"id":"0:4643","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1608,0],"end":[1630,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4645:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:7020-0:276:1792":{"id":"b:1:7020-0:276:1792","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:1015:3508":{"id":"0:1015:3508","crate_id":0,"name":"extend_reserve","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1718,4],"end":[1720,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3086:2750":{"id":"0:3086:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1255,4],"end":[1255,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:975:670":{"id":"0:975:670","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1614,4],"end":[1616,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6729:409":{"id":"0:6729:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/alloc.rs","begin":[53,15],"end":[53,20]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4127:5344":{"id":"0:4127:5344","crate_id":0,"name":"push_back","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1639,4],"end":[1646,5]},"visibility":"public","docs":"Appends an element to the back of the deque.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(1);\nbuf.push_back(3);\nassert_eq!(3, *buf.back().unwrap());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:6822:3475":{"id":"b:1:2499-0:6822:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4371:409":{"id":"0:4371:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[823,4],"end":[825,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3621:895":{"id":"0:3621:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1894,4],"end":[1896,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5580":{"id":"0:5580","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[690,0],"end":[755,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"items":["0:5582:2436","0:5583:2441"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:7020-0:1435:3845":{"id":"b:1:7020-0:1435:3845","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangeMut","id":"0:1435:3845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"b:1:2505-0:1404:3833":{"id":"b:1:2505-0:1404:3833","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:1404:3833","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4163":{"id":"0:4163","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2597,0],"end":[2628,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:4166:6045"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7710:3767-0:1394:3826":{"id":"a:1:7710:3767-0:1394:3826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:1394:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1921:782":{"id":"0:1921:782","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2397,4],"end":[2399,5]},"visibility":"public","docs":"Returns the number of elements in the map.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\nassert_eq!(a.len(), 0);\na.insert(1, \"a\");\nassert_eq!(a.len(), 1);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_unstable(feature = \"const_btree_len\", issue = \"71835\",\nimplied_by = \"const_btree_new\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:2970:4926":{"id":"b:1:2216-0:2970:4926","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:2970:4926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5368":{"id":"0:5368","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2553,0],"end":[2569,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"u8_to_string_specialization\", since = \"1.54.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5360:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"u8"},"items":["0:5369:1398"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5199:3348":{"id":"0:5199:3348","crate_id":0,"name":"retain","span":{"filename":"library/alloc/src/string.rs","begin":[1452,4],"end":[1503,5]},"visibility":"public","docs":"Retains only the characters specified by the predicate.\n\nIn other words, remove all characters `c` such that `f(c)` returns `false`.\nThis method operates in place, visiting each character exactly once in the\noriginal order, and preserves the order of the retained characters.\n\n# Examples\n\n```\nlet mut s = String::from(\"f_o_ob_ar\");\n\ns.retain(|c| c != '_');\n\nassert_eq!(s, \"foobar\");\n```\n\nBecause the elements are visited exactly once in the original order,\nexternal state may be used to decide which elements to keep.\n\n```\nlet mut s = String::from(\"abcde\");\nlet keep = [false, true, true, false, true];\nlet mut iter = keep.iter();\ns.retain(|_| *iter.next().unwrap());\nassert_eq!(s, \"bce\");\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"string_retain\", since = \"1.26.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"primitive","inner":"char"}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:294:2010":{"id":"0:294:2010","crate_id":0,"name":"new_in","span":{"filename":"library/alloc/src/boxed.rs","begin":[383,4],"end":[392,5]},"visibility":"public","docs":"Allocates memory in the given allocator then places `x` into it.\n\nThis doesn't actually allocate if `T` is zero-sized.\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nlet five = Box::new_in(5, System);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["x",{"kind":"generic","inner":"T"}],["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe_const"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5254:670":{"id":"0:5254:670","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/string.rs","begin":[2052,4],"end":[2056,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:1230:3671":{"id":"b:1:2219-0:1230:3671","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedError","id":"0:1230:3671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:489":{"id":"0:489","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1919,0],"end":[1933,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:492:2750","0:493:921","0:494:2751","0:495:2752","0:496:2753"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4275:650":{"id":"0:4275:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[132,4],"end":[146,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["fmt",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"core::fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"core::result::Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"core::fmt::Error","id":"1:49039:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:667:225":{"id":"0:667:225","crate_id":0,"name":"ToOwned","span":{"filename":"library/alloc/src/borrow.rs","begin":[38,0],"end":[79,1]},"visibility":"public","docs":"A generalization of `Clone` to borrowed data.\n\nSome types make it possible to go from borrowed to owned, usually by\nimplementing the `Clone` trait. But `Clone` works only for going from `&T`\nto `T`. The `ToOwned` trait generalizes `Clone` to construct owned data\nfrom any borrow of a given type.","links":{},"attrs":["#[rustc_diagnostic_item = \"ToOwned\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:668:2677","0:669:2903","0:670:2911"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:671","0:4408","0:4968","0:5089"]}},"b:1:2495-0:6083:3475":{"id":"b:1:2495-0:6083:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4742":{"id":"0:4742","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2191,0],"end":[2191,44]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rc_weak\", since = \"1.4.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":false,"blanket_impl":null}},"0:4368":{"id":"0:4368","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[798,0],"end":[817,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_from_vec_of_nonzerou8\", since = \"1.43.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonZeroU8","id":"1:21616:172","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4369:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2658:222-0:6897:102":{"id":"a:1:2658:222-0:6897:102","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3439:2759":{"id":"0:3439:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1057,4],"end":[1069,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4396":{"id":"0:4396","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[959,0],"end":[963,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4397:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:646:383":{"id":"0:646:383","crate_id":0,"name":"cause","span":{"filename":"library/alloc/src/boxed.rs","begin":[2421,4],"end":[2423,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"core::error::Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5375:1398":{"id":"0:5375:1398","crate_id":0,"name":"to_string","span":{"filename":"library/alloc/src/string.rs","begin":[2607,4],"end":[2609,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:659":{"id":"0:659","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[12,31],"end":[12,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::borrow::BorrowMut","name":"BorrowMut","id":"1:2213:98","glob":false}},"0:1295":{"id":"0:1295","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[24,16],"end":[24,21]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"entry::Entry","name":"Entry","id":"0:1185:3669","glob":false}},"0:4702:668":{"id":"0:4702:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/rc.rs","begin":[1964,4],"end":[1966,5]},"visibility":"default","docs":"Allocate a reference-counted string slice and copy `v` into it.\n\n# Example\n\n```\n# use std::rc::Rc;\nlet original: String = \"statue\".to_owned();\nlet shared: Rc<str> = Rc::from(original);\nassert_eq!(\"statue\", &shared[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:0:671-0:2944:4916":{"id":"b:0:671-0:2944:4916","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:2944:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:359":{"id":"0:359","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1336,0],"end":[1345,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:362:595","0:363:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4945:180":{"id":"0:4945:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/slice.rs","begin":[703,4],"end":[703,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:3268:4091":{"id":"0:3268:4091","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1755,4],"end":[1757,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:7020-0:6734:3475":{"id":"b:1:7020-0:6734:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:3000":{"id":"0:3000","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[300,0],"end":[304,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:2978:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3003:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5658":{"id":"0:5658","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[1679,0],"end":[1748,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5660:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3279:921":{"id":"0:3279:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1773,4],"end":[1776,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:242:538":{"id":"0:242:538","crate_id":0,"name":"deref_mut","span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[122,4],"end":[127,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:338":{"id":"0:338","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1235,0],"end":[1239,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:341:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2219-0:1348:3805":{"id":"b:1:2219-0:1348:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:1348:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4402:6389":{"id":"0:4402:6389","crate_id":0,"name":"utf8_error","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[991,4],"end":[993,5]},"visibility":"public","docs":"Access the underlying UTF-8 error that was the cause of this error.","links":{},"attrs":["#[must_use]","#[stable(feature = \"cstring_into\", since = \"1.7.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Utf8Error","id":"1:49909:6209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6583":{"id":"0:6583","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2710,0],"end":[2715,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":"The hash of a vector is the same as that of the corresponding slice,\nas required by the `core::borrow::Borrow` implementation.\n\n```\n#![feature(build_hasher_simple_hash_one)]\nuse std::hash::BuildHasher;\n\nlet b = std::collections::hash_map::RandomState::new();\nlet v: Vec<u8> = vec![0xa8, 0x3c, 0x09];\nlet s: &[u8] = &[0xa8, 0x3c, 0x09];\nassert_eq!(b.hash_one(v), b.hash_one(s));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:8791:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:8791:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6586:702"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4937:431":{"id":"0:4937:431","crate_id":0,"name":"concat","span":{"filename":"library/alloc/src/slice.rs","begin":[685,4],"end":[685,44]},"visibility":"default","docs":"Implementation of [`[T]::concat`](slice::concat)","links":{"slice::concat":"0:4925:431"},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:4934:7816","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":false}},"0:3529:4312":{"id":"0:3529:4312","crate_id":0,"name":"back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1671,4],"end":[1673,5]},"visibility":"public","docs":"Provides a reference to the back element of the cursor's parent list,\nor None if the list is empty.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6995:650":{"id":"0:6995:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/string.rs","begin":[406,9],"end":[406,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6586:702":{"id":"0:6586:702","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2712,4],"end":[2714,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:8805:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6822:3475":{"id":"0:6822:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[17,0],"end":[22,1]},"visibility":"public","docs":"An owning iterator over the elements of a `VecDeque`.\n\nThis `struct` is created by the [`into_iter`] method on [`VecDeque`]\n(provided by the [`IntoIterator`] trait). See its documentation for more.\n\n[`into_iter`]: VecDeque::into_iter\n[`IntoIterator`]: core::iter::IntoIterator","links":{"VecDeque::into_iter":"0:4207:757","`VecDeque`":"0:4016:238","core::iter::IntoIterator":"1:7016:147"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:6822:3475","a:1:2644:214-0:6822:3475","a:1:2708:2329-0:6822:3475","a:1:7709:3766-0:6822:3475","a:1:7710:3767-0:6822:3475","b:0:671-0:6822:3475","b:1:7020-0:6822:3475","b:1:2510-0:6822:3475","b:1:2505-0:6822:3475","b:1:2216-0:6822:3475","b:1:3303-0:6822:3475","b:1:2219-0:6822:3475","b:1:2499-0:6822:3475","b:1:2495-0:6822:3475","0:6826","0:3864","0:3868","0:3874","0:3878","0:3882","0:3885"]}},"b:1:2510-0:6897:102":{"id":"b:1:2510-0:6897:102","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2495-0:1426:192":{"id":"b:1:2495-0:1426:192","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:1426:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3838:782":{"id":"0:3838:782","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[150,4],"end":[152,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5384":{"id":"0:5384","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2647,0],"end":[2655,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5385:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11406:40320":{"id":"1:11406:40320","crate_id":1,"name":"trim_left","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1985,4],"end":[1985,35]},"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[deprecated(since = \"1.33.0\", note = \"superseded by `trim_start`\", suggestion\n= \"trim_start\")]"],"deprecation":{"since":"1.33.0","note":"superseded by `trim_start`"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3655":{"id":"0:3655","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1985,0],"end":[1985,46]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:681:1545":{"id":"0:681:1545","crate_id":0,"name":"0","span":{"filename":"library/alloc/src/borrow.rs","begin":[185,59],"end":[185,64]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct_field","inner":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"B"}}}},"a:1:7710:3767-0:1230:3671":{"id":"a:1:7710:3767-0:1230:3671","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedError","id":"0:1230:3671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:275:2625":{"id":"0:275:2625","crate_id":0,"name":"source","span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[278,4],"end":[280,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:3096:4069":{"id":"a:1:2708:2329-0:3096:4069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3096:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3185:2759":{"id":"0:3185:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1521,4],"end":[1523,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:6991:8288":{"id":"b:1:2216-0:6991:8288","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2505-0:3352:3805":{"id":"b:1:2505-0:3352:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3352:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5307":{"id":"0:5307","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2263,0],"end":[2269,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5308:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3597:2750":{"id":"0:3597:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1844,4],"end":[1844,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}}}},"0:6694":{"id":"0:6694","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3148,0],"end":[3168,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"vec_from_array\", since = \"1.44.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:6698:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6048:668":{"id":"0:6048:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/cow.rs","begin":[40,4],"end":[42,5]},"visibility":"default","docs":"Creates a [`Borrowed`] variant of [`Cow`]\nfrom a reference to [`Vec`].\n\nThis conversion does not allocate or clone the data.\n\n[`Borrowed`]: crate::borrow::Cow::Borrowed","links":{"`Vec`":"0:6407:237","`Cow`":"0:676:109","crate::borrow::Cow::Borrowed":"0:679:2676"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5653":{"id":"0:5653","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[1541,0],"end":[1676,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5655:3929","0:5656:7294"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:402:1536":{"id":"0:402:1536","crate_id":0,"name":"write_str","span":{"filename":"library/alloc/src/boxed.rs","begin":[1433,4],"end":[1435,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:1201:3672":{"id":"b:1:2505-0:1201:3672","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:1201:3672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2936:411":{"id":"0:2936:411","crate_id":0,"name":"clone_from","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[125,4],"end":[127,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:2944:4916":{"id":"b:1:2510-0:2944:4916","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:2944:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:236":{"id":"0:236","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[109,0],"end":[118,1]},"visibility":{"restricted":{"parent":"0:194:2340","path":"::boxed::thin"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2886:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:238:224","0:239:536"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7710:3767-0:7074:9310":{"id":"a:1:7710:3767-0:7074:9310","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Splice","id":"0:7074:9310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2216-0:771:3221":{"id":"b:1:2216-0:771:3221","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PeekMut","id":"0:771:3221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4271:668":{"id":"0:4271:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[116,4],"end":[118,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["kind",{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3016":{"id":"0:3016","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[353,0],"end":[1204,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3019:2010","0:3020:3801","0:3023:4966","0:3025:4976","0:3027:4981","0:3029:62","0:3031:3451","0:3032:4997","0:3034:3294","0:3036:5011","0:3037:5020","0:3039:5031","0:3040:4969","0:3042:2753","0:3044:3901","0:3046:3920","0:3048:3797","0:3049:3530","0:3050:3521","0:3052:3529","0:3054:3348","0:3057:3320","0:3058:4039","0:3060:3974","0:3063:768","0:3064:782","0:3065:2762"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1358:650":{"id":"0:1358:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[383,4],"end":[386,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:1426:192":{"id":"a:1:2644:214-0:1426:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:1426:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1641:2759":{"id":"0:1641:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1749,4],"end":[1751,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:882:2762":{"id":"0:882:2762","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1353,4],"end":[1355,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3207":{"id":"0:3207","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1561,0],"end":[1561,65]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6779:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2917":{"id":"0:2917","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[96,0],"end":[100,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:2920:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4253:668":{"id":"0:4253:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2894,4],"end":[2906,5]},"visibility":"default","docs":"Converts a `[T; N]` into a `VecDeque<T>`.\n\n```\nuse std::collections::VecDeque;\n\nlet deq1 = VecDeque::from([1, 2, 3, 4]);\nlet deq2: VecDeque<_> = [1, 2, 3, 4].into();\nassert_eq!(deq1, deq2);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["arr",{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:410":{"id":"0:410","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1483,0],"end":[1505,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_from_slice\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:2656:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"items":["0:412:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7709:3766-0:1404:3833":{"id":"a:1:7709:3766-0:1404:3833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:1404:3833","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:0:5362-0:6869:1971":{"id":"b:0:5362-0:6869:1971","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2526,0],"end":[2540,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5360:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5364:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5675:306":{"id":"0:5675:306","crate_id":0,"name":"as_ptr","span":{"filename":"library/alloc/src/sync.rs","begin":[1883,4],"end":[1896,5]},"visibility":"public","docs":"Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.\n\nThe pointer is valid only if there are some strong references. The pointer may be dangling,\nunaligned or even [`null`] otherwise.\n\n# Examples\n\n```\nuse std::sync::Arc;\nuse std::ptr;\n\nlet strong = Arc::new(\"hello\".to_owned());\nlet weak = Arc::downgrade(&strong);\n// Both point to the same object\nassert!(ptr::eq(&*strong, weak.as_ptr()));\n// The strong here keeps it alive, so we can still access the object.\nassert_eq!(\"hello\", unsafe { &*weak.as_ptr() });\n\ndrop(strong);\n// But not any more. We can do weak.as_ptr(), but accessing the pointer would lead to\n// undefined behaviour.\n// assert_eq!(\"hello\", unsafe { &*weak.as_ptr() });\n```\n\n[`null`]: core::ptr::null \"ptr::null\"","links":{"core::ptr::null":"1:2134:10551"},"attrs":["#[must_use]","#[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:836:3433":{"id":"0:836:3433","crate_id":0,"name":"as_slice","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1105,4],"end":[1107,5]},"visibility":"public","docs":"Returns a slice of all values in the underlying vector, in arbitrary\norder.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(binary_heap_as_slice)]\nuse std::collections::BinaryHeap;\nuse std::io::{self, Write};\n\nlet heap = BinaryHeap::from([1, 2, 3, 4, 5, 6, 7]);\n\nio::sink().write(heap.as_slice()).unwrap();\n```","links":{},"attrs":["#[must_use]","#[unstable(feature = \"binary_heap_as_slice\", issue = \"83659\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5392":{"id":"0:5392","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2706,0],"end":[2723,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_from_str\", since = \"1.20.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:5393:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4227:1746":{"id":"0:4227:1746","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2783,4],"end":[2785,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["elem",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4946:431":{"id":"0:4946:431","crate_id":0,"name":"concat","span":{"filename":"library/alloc/src/slice.rs","begin":[705,4],"end":[712,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:1338:3356":{"id":"a:1:2644:214-0:1338:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5583:2441":{"id":"0:5583:2441","crate_id":0,"name":"new_zeroed_slice","span":{"filename":"library/alloc/src/sync.rs","begin":[743,4],"end":[754,5]},"visibility":"public","docs":"Constructs a new atomically reference-counted slice with uninitialized contents, with the memory being\nfilled with `0` bytes.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and\nincorrect usage of this method.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nuse std::sync::Arc;\n\nlet values = Arc::<[u32]>::new_zeroed_slice(3);\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [0, 0, 0])\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1519:2186"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:1230:3671":{"id":"a:1:2644:214-0:1230:3671","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedError","id":"0:1230:3671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"1:11317:40309":{"id":"1:11317:40309","crate_id":1,"name":"ceil_char_boundary","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[297,4],"end":[297,59]},"visibility":"public","docs":"Finds the closest `x` not below `index` where `is_char_boundary(x)` is `true`.\n\nThis method is the natural complement to [`floor_char_boundary`]. See that method\nfor more details.\n\n[`floor_char_boundary`]: str::floor_char_boundary\n\n# Panics\n\nPanics if `index > self.len()`.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.ceil_char_boundary(13);\nassert_eq!(closest, 14);\nassert_eq!(&s[..closest], \"❤️🧡💛\");\n```","links":{"str::floor_char_boundary":"1:11315:40308"},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5676:2546":{"id":"0:5676:2546","crate_id":0,"name":"into_raw","span":{"filename":"library/alloc/src/sync.rs","begin":[1927,4],"end":[1931,5]},"visibility":"public","docs":"Consumes the `Weak<T>` and turns it into a raw pointer.\n\nThis converts the weak pointer into a raw pointer, while still preserving the ownership of\none weak reference (the weak count is not modified by this operation). It can be turned\nback into the `Weak<T>` with [`from_raw`].\n\nThe same restrictions of accessing the target of the pointer as with\n[`as_ptr`] apply.\n\n# Examples\n\n```\nuse std::sync::{Arc, Weak};\n\nlet strong = Arc::new(\"hello\".to_owned());\nlet weak = Arc::downgrade(&strong);\nlet raw = weak.into_raw();\n\nassert_eq!(1, Arc::weak_count(&strong));\nassert_eq!(\"hello\", unsafe { &*raw });\n\ndrop(unsafe { Weak::from_raw(raw) });\nassert_eq!(0, Arc::weak_count(&strong));\n```\n\n[`from_raw`]: Weak::from_raw\n[`as_ptr`]: Weak::as_ptr","links":{"Weak::as_ptr":"0:5675:306","Weak::from_raw":"0:5677:2513"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:859:3356":{"id":"0:859:3356","crate_id":0,"name":"Iter","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1304,0],"end":[1306,1]},"visibility":"public","docs":"An iterator over the elements of a `BinaryHeap`.\n\nThis `struct` is created by [`BinaryHeap::iter()`]. See its\ndocumentation for more.\n\n[`iter`]: BinaryHeap::iter","links":{"`BinaryHeap::iter()`":"0:826:768"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:859:3356","a:1:2644:214-0:859:3356","a:1:2708:2329-0:859:3356","a:1:7709:3766-0:859:3356","a:1:7710:3767-0:859:3356","b:0:671-0:859:3356","b:1:7020-0:859:3356","b:1:2510-0:859:3356","b:1:2505-0:859:3356","b:1:2216-0:859:3356","b:1:3303-0:859:3356","b:1:2219-0:859:3356","b:1:2499-0:859:3356","b:1:2495-0:859:3356","0:863","0:866","0:869","0:876","0:880","0:883"]}},"1:11340:7925":{"id":"1:11340:7925","crate_id":1,"name":"split_ascii_whitespace","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[965,4],"end":[965,68]},"visibility":"public","docs":"Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nIf the string is empty or all ASCII whitespace, the iterator yields no string slices:\n```\nassert_eq!(\"\".split_ascii_whitespace().next(), None);\nassert_eq!(\"   \".split_ascii_whitespace().next(), None);\n```","links":{"str::split_whitespace":"1:11339:13876"},"attrs":["#[must_use =\n\"this returns the split string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"SplitAsciiWhitespace","id":"1:50248:7926","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1230:3671":{"id":"0:1230:3671","crate_id":0,"name":"OccupiedError","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[103,0],"end":[108,1]},"visibility":"public","docs":"The error returned by [`try_insert`](BTreeMap::try_insert) when the key already exists.\n\nContains the occupied entry, and the value that was not inserted.","links":{"BTreeMap::try_insert":"0:1476:3957"},"attrs":["#[unstable(feature = \"map_try_insert\", issue = \"82766\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":["0:1235:3668","0:1236:2481"],"fields_stripped":false}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:1230:3671","a:1:2644:214-0:1230:3671","a:1:2708:2329-0:1230:3671","a:1:7709:3766-0:1230:3671","a:1:7710:3767-0:1230:3671","b:0:5362-0:1230:3671","b:1:2567-0:1230:3671","b:1:2510-0:1230:3671","b:1:2505-0:1230:3671","b:1:2216-0:1230:3671","b:1:3303-0:1230:3671","b:1:2219-0:1230:3671","b:1:2499-0:1230:3671","b:1:2495-0:1230:3671","0:1237","0:1242","0:1248"]}},"0:5359:8326":{"id":"0:5359:8326","crate_id":0,"name":"from_str","span":{"filename":"library/alloc/src/string.rs","begin":[2485,4],"end":[2487,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:10974:7939","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5043":{"id":"0:5043","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[38,48],"end":[38,61]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"str_escape\", since = \"1.34.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::EscapeUnicode","name":"EscapeUnicode","id":"1:50282:7938","glob":false}},"0:1476:3957":{"id":"0:1476:3957","crate_id":0,"name":"try_insert","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[992,4],"end":[1000,5]},"visibility":"public","docs":"Tries to insert a key-value pair into the map, and returns\na mutable reference to the value in the entry.\n\nIf the map already had this key present, nothing is updated, and\nan error containing the occupied entry and the value is returned.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(map_try_insert)]\n\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nassert_eq!(map.try_insert(37, \"a\").unwrap(), &\"a\");\n\nlet err = map.try_insert(37, \"b\").unwrap_err();\nassert_eq!(err.entry.key(), &37);\nassert_eq!(err.entry.get(), &\"a\");\nassert_eq!(err.value, \"b\");\n```","links":{},"attrs":["#[unstable(feature = \"map_try_insert\", issue = \"82766\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"generic","inner":"K"}],["value",{"kind":"generic","inner":"V"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}},{"type":{"kind":"resolved_path","inner":{"name":"OccupiedError","id":"0:1230:3671","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1394:3826":{"id":"0:1394:3826","crate_id":0,"name":"ValuesMut","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[470,0],"end":[472,1]},"visibility":"public","docs":"A mutable iterator over the values of a `BTreeMap`.\n\nThis `struct` is created by the [`values_mut`] method on [`BTreeMap`]. See its\ndocumentation for more.\n\n[`values_mut`]: BTreeMap::values_mut","links":{"`BTreeMap`":"0:1301:94","BTreeMap::values_mut":"0:1920:4165"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"map_values_mut\", since = \"1.10.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:1394:3826","a:1:2644:214-0:1394:3826","a:1:2708:2329-0:1394:3826","a:1:7709:3766-0:1394:3826","a:1:7710:3767-0:1394:3826","b:1:7020-0:1394:3826","b:1:2510-0:1394:3826","b:1:2505-0:1394:3826","b:1:2216-0:1394:3826","b:1:3303-0:1394:3826","b:1:2219-0:1394:3826","b:1:2499-0:1394:3826","b:1:2495-0:1394:3826","0:1399","0:1738","0:1747","0:1753","0:1757"]}},"0:6123:488":{"id":"0:6123:488","crate_id":0,"name":"count","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[237,4],"end":[239,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1285:3528":{"id":"0:1285:3528","crate_id":0,"name":"key","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[400,4],"end":[402,5]},"visibility":"public","docs":"Gets a reference to the key in the entry.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\nassert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"map_entry_keys\", since = \"1.10.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:3352:3805":{"id":"a:1:7709:3766-0:3352:3805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3352:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:1469:3920":{"id":"0:1469:3920","crate_id":0,"name":"pop_last","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[862,4],"end":[867,5]},"visibility":"public","docs":"Removes and returns the last element in the map.\nThe key of this element is the maximum key that was in the map.\n\n# Examples\n\nDraining elements in descending order, while keeping a usable map each iteration.\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nmap.insert(2, \"b\");\nwhile let Some((key, _val)) = map.pop_last() {\n    assert!(map.iter().all(|(k, _v)| *k < key));\n}\nassert!(map.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"map_first_last\", since = \"1.66.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3776":{"id":"0:3776","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[228,0],"end":[228,62]},"visibility":{"restricted":{"parent":"0:3709:3448","path":"::collections::vec_deque::drain"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:3723:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1445":{"id":"0:1445","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[565,0],"end":[588,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1448:908"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2216-0:7002:8296":{"id":"b:1:2216-0:7002:8296","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf16Error","id":"0:7002:8296","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4341:6424":{"id":"0:4341:6424","crate_id":0,"name":"into_boxed_c_str","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[598,4],"end":[600,5]},"visibility":"public","docs":"Converts this `CString` into a boxed [`CStr`].\n\n# Examples\n\n```\nuse std::ffi::{CString, CStr};\n\nlet c_string = CString::new(b\"foo\".to_vec()).expect(\"CString::new failed\");\nlet boxed = c_string.into_boxed_c_str();\nassert_eq!(&*boxed,\n           CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\"));\n```","links":{"`CStr`":"1:46902:101"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"into_boxed_c_str\", since = \"1.20.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6650":{"id":"0:6650","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3028,0],"end":[3033,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":"Implements comparison of vectors, [lexicographically](core::cmp::Ord#lexicographical-comparison).","links":{"core::cmp::Ord#lexicographical-comparison":"1:2299:176"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2305:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["le","ge","lt","gt"],"trait":{"name":"PartialOrd","id":"1:2305:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6653:995"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2499-0:1216:3670":{"id":"b:1:2499-0:1216:3670","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:1216:3670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4453":{"id":"0:4453","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[571,20],"end":[571,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::LowerExp","name":"LowerExp","id":"1:8585:6929","glob":false}},"0:6893":{"id":"0:6893","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[80,27],"end":[80,29]},"visibility":{"restricted":{"parent":"0:744:1794","path":"::collections"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"try_reserve_kind\", reason =\n\"Uncertain how much info should be exposed\", issue = \"48043\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:0:671-0:6725:1970":{"id":"b:0:671-0:6725:1970","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6714":{"id":"0:6714","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3256,0],"end":[3301,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"array_try_from_vec\", since = \"1.48.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}},"items":["0:6719:126","0:6720:1418"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4951:180":{"id":"0:4951:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/slice.rs","begin":[718,4],"end":[718,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:5265:3508":{"id":"0:5265:3508","crate_id":0,"name":"extend_reserve","span":{"filename":"library/alloc/src/string.rs","begin":[2095,4],"end":[2097,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:792:3231":{"id":"0:792:3231","crate_id":0,"name":"pop","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[325,4],"end":[329,5]},"visibility":"public","docs":"Removes the peeked value from the heap and returns it.","links":{},"attrs":["#[stable(feature = \"binary_heap_peek_mut_pop\", since = \"1.18.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"resolved_path","inner":{"name":"PeekMut","id":"0:771:3221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6899":{"id":"0:6899","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[109,9],"end":[109,18]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]","#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2654:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2499-0:1435:3845":{"id":"b:1:2499-0:1435:3845","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangeMut","id":"0:1435:3845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2644:214-0:3531:4069":{"id":"a:1:2644:214-0:3531:4069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3531:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"b:1:2495-0:4521:198":{"id":"b:1:2495-0:4521:198","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:492:2750":{"id":"0:492:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/boxed.rs","begin":[1920,4],"end":[1920,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"0:5650:7357":{"id":"0:5650:7357","crate_id":0,"name":"make_mut","span":{"filename":"library/alloc/src/sync.rs","begin":[1452,4],"end":[1503,5]},"visibility":"public","docs":"Makes a mutable reference into the given `Arc`.\n\nIf there are other `Arc` pointers to the same allocation, then `make_mut` will\n[`clone`] the inner value to a new allocation to ensure unique ownership.  This is also\nreferred to as clone-on-write.\n\nHowever, if there are no other `Arc` pointers to this allocation, but some [`Weak`]\npointers, then the [`Weak`] pointers will be dissociated and the inner value will not\nbe cloned.\n\nSee also [`get_mut`], which will fail rather than cloning the inner value\nor dissociating [`Weak`] pointers.\n\n[`clone`]: Clone::clone\n[`get_mut`]: Arc::get_mut\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet mut data = Arc::new(5);\n\n*Arc::make_mut(&mut data) += 1;         // Won't clone anything\nlet mut other_data = Arc::clone(&data); // Won't clone inner data\n*Arc::make_mut(&mut data) += 1;         // Clones inner data\n*Arc::make_mut(&mut data) += 1;         // Won't clone anything\n*Arc::make_mut(&mut other_data) *= 2;   // Won't clone anything\n\n// Now `data` and `other_data` point to different allocations.\nassert_eq!(*data, 8);\nassert_eq!(*other_data, 12);\n```\n\n[`Weak`] pointers will be dissociated:\n\n```\nuse std::sync::Arc;\n\nlet mut data = Arc::new(75);\nlet weak = Arc::downgrade(&data);\n\nassert!(75 == *data);\nassert!(75 == *weak.upgrade().unwrap());\n\n*Arc::make_mut(&mut data) += 1;\n\nassert!(76 == *data);\nassert!(weak.upgrade().is_none());\n```","links":{"Clone::clone":"1:2234:409","`Weak`":"0:5533:7157","Arc::get_mut":"0:5655:3929"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"arc_unique\", since = \"1.4.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:6869:1971":{"id":"b:1:3303-0:6869:1971","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7709:3766-0:1415:3837":{"id":"a:1:7709:3766-0:1415:3837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:1415:3837","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5164:2019":{"id":"0:5164:2019","crate_id":0,"name":"with_capacity","span":{"filename":"library/alloc/src/string.rs","begin":[500,4],"end":[502,5]},"visibility":"public","docs":"Creates a new empty `String` with at least the specified capacity.\n\n`String`s have an internal buffer to hold their data. The capacity is\nthe length of that buffer, and can be queried with the [`capacity`]\nmethod. This method creates an empty `String`, but one with an initial\nbuffer that can hold at least `capacity` bytes. This is useful when you\nmay be appending a bunch of data to the `String`, reducing the number of\nreallocations it needs to do.\n\n[`capacity`]: String::capacity\n\nIf the given capacity is `0`, no allocation will occur, and this method\nis identical to the [`new`] method.\n\n[`new`]: String::new\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::with_capacity(10);\n\n// The String contains no chars, even though it has capacity for more\nassert_eq!(s.len(), 0);\n\n// These are all done without reallocating...\nlet cap = s.capacity();\nfor _ in 0..10 {\n    s.push('a');\n}\n\nassert_eq!(s.capacity(), cap);\n\n// ...but this may make the string reallocate\ns.push('a');\n```","links":{"String::new":"0:5163:908","String::capacity":"0:5180:2020"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["capacity",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6924":{"id":"0:6924","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[134,27],"end":[134,29]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4256":{"id":"0:4256","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[19,4],"end":[19,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"super::btree::map","name":"map","id":"0:1131:830","glob":true}},"a:1:7709:3766-0:1338:3356":{"id":"a:1:7709:3766-0:1338:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3217:921":{"id":"0:3217:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1574,4],"end":[1576,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6668":{"id":"0:6668","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3072,0],"end":[3076,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6671:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2658:222-0:1404:3833":{"id":"a:1:2658:222-0:1404:3833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:1404:3833","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3572":{"id":"0:3572","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1798,0],"end":[1803,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3574:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6137":{"id":"0:6137","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[345,0],"end":[345,57]},"visibility":{"restricted":{"parent":"0:6056:757","path":"::vec::into_iter"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4531":{"id":"0:4531","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[337,0],"end":[337,58]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rc_ref_unwind_safe\", since = \"1.58.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4147:5991":{"id":"0:4147:5991","crate_id":0,"name":"binary_search","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2427,4],"end":[2432,5]},"visibility":"public","docs":"Binary searches this `VecDeque` for a given element.\nThis behaves similarly to [`contains`] if this `VecDeque` is sorted.\n\nIf the value is found then [`Result::Ok`] is returned, containing the\nindex of the matching element. If there are multiple matches, then any\none of the matches could be returned. If the value is not found then\n[`Result::Err`] is returned, containing the index where a matching\nelement could be inserted while maintaining sorted order.\n\nSee also [`binary_search_by`], [`binary_search_by_key`], and [`partition_point`].\n\n[`contains`]: VecDeque::contains\n[`binary_search_by`]: VecDeque::binary_search_by\n[`binary_search_by_key`]: VecDeque::binary_search_by_key\n[`partition_point`]: VecDeque::partition_point\n\n# Examples\n\nLooks up a series of four elements. The first is found, with a\nuniquely determined position; the second and third are not\nfound; the fourth could match any position in `[1, 4]`.\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<_> = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\n\nassert_eq!(deque.binary_search(&13),  Ok(9));\nassert_eq!(deque.binary_search(&4),   Err(7));\nassert_eq!(deque.binary_search(&100), Err(13));\nlet r = deque.binary_search(&1);\nassert!(matches!(r, Ok(1..=4)));\n```\n\nIf you want to insert an item to a sorted deque, while maintaining\nsort order, consider using [`partition_point`]:\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque: VecDeque<_> = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\nlet num = 42;\nlet idx = deque.partition_point(|&x| x < num);\n// The above is equivalent to `let idx = deque.binary_search(&num).unwrap_or_else(|x| x);`\ndeque.insert(idx, num);\nassert_eq!(deque, &[0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);\n```","links":{"`Result::Ok`":"1:48144:174","VecDeque::partition_point":"0:4160:6037","`Result::Err`":"1:48147:125","VecDeque::contains":"0:4119:4997","VecDeque::binary_search_by":"0:4149:5992","VecDeque::binary_search_by_key":"0:4155:6020"},"attrs":["#[stable(feature = \"vecdeque_binary_search\", since = \"1.54.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["x",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}},{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3396:782":{"id":"0:3396:782","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[615,4],"end":[617,5]},"visibility":"public","docs":"Returns the length of the `LinkedList`.\n\nThis operation should compute in *O*(1) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\n\ndl.push_front(2);\nassert_eq!(dl.len(), 1);\n\ndl.push_front(1);\nassert_eq!(dl.len(), 2);\n\ndl.push_back(3);\nassert_eq!(dl.len(), 3);\n```","links":{},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:6779:3475":{"id":"b:1:2505-0:6779:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6779:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3156":{"id":"0:3156","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1433,0],"end":[1455,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BitAnd","id":"1:2794:4873","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"items":["0:3159:180","0:3160:354"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:926:2751":{"id":"0:926:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1493,4],"end":[1495,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:3794:3805":{"id":"a:1:7709:3766-0:3794:3805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:4409:2677":{"id":"0:4409:2677","crate_id":0,"name":"Owned","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1018,4],"end":[1018,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:3314:3009":{"id":"0:3314:3009","crate_id":0,"name":"linked_list","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1,0],"end":[2012,49]},"visibility":"public","docs":"A doubly-linked list with owned nodes.\n\nThe `LinkedList` allows pushing and popping elements at either end\nin constant time.\n\nNOTE: It is almost always better to use [`Vec`] or [`VecDeque`] because\narray-based containers are generally faster,\nmore memory efficient, and make better use of CPU cache.\n\n[`Vec`]: crate::vec::Vec\n[`VecDeque`]: super::vec_deque::VecDeque","links":{"crate::vec::Vec":"0:6407:237","super::vec_deque::VecDeque":"0:4016:238"},"attrs":["#[cfg(not(no_global_oom_handling))]","#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:3328:157","0:3339:3356","0:3352:3805","0:6816:3475","0:3462:5277","0:3474:5281","0:3531:4069"],"is_stripped":false}},"0:716:650":{"id":"0:716:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/borrow.rs","begin":[388,4],"end":[393,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:6734:3475":{"id":"b:1:2499-0:6734:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:7020-0:2970:4926":{"id":"b:1:7020-0:2970:4926","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:2970:4926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:1359:3475":{"id":"0:1359:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[398,0],"end":[407,1]},"visibility":"public","docs":"An owning iterator over the entries of a `BTreeMap`.\n\nThis `struct` is created by the [`into_iter`] method on [`BTreeMap`]\n(provided by the [`IntoIterator`] trait). See its documentation for more.\n\n[`into_iter`]: IntoIterator::into_iter\n[`IntoIterator`]: core::iter::IntoIterator","links":{"IntoIterator::into_iter":"1:7019:757","core::iter::IntoIterator":"1:7016:147","`BTreeMap`":"0:1301:94"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_insignificant_dtor]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:1359:3475","a:1:2644:214-0:1359:3475","a:1:2708:2329-0:1359:3475","a:1:7709:3766-0:1359:3475","a:1:7710:3767-0:1359:3475","b:1:7020-0:1359:3475","b:1:2510-0:1359:3475","b:1:2505-0:1359:3475","b:1:2216-0:1359:3475","b:1:3303-0:1359:3475","b:1:2219-0:1359:3475","b:1:2499-0:1359:3475","b:1:2495-0:1359:3475","0:1371","0:1579","0:1603","0:1611","0:1617","0:1622"]}},"b:1:2219-0:3723:3449":{"id":"b:1:2219-0:3723:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:3723:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2644:214-0:1185:3669":{"id":"a:1:2644:214-0:1185:3669","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:1185:3669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:693:2987":{"id":"0:693:2987","crate_id":0,"name":"to_mut","span":{"filename":"library/alloc/src/borrow.rs","begin":[274,4],"end":[285,5]},"visibility":"public","docs":"Acquires a mutable reference to the owned form of the data.\n\nClones the data if it is not already owned.\n\n# Examples\n\n```\nuse std::borrow::Cow;\n\nlet mut cow = Cow::Borrowed(\"foo\");\ncow.to_mut().make_ascii_uppercase();\n\nassert_eq!(\n  cow,\n  Cow::Owned(String::from(\"FOO\")) as Cow<str>\n);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:719:650":{"id":"0:719:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/borrow.rs","begin":[401,4],"end":[406,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4103:283":{"id":"0:4103:283","crate_id":0,"name":"allocator","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1073,4],"end":[1075,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3094:3475":{"id":"0:3094:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1278,4],"end":[1278,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"0:3452:2753":{"id":"0:3452:2753","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1103,4],"end":[1105,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5690:409":{"id":"0:5690:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/sync.rs","begin":[2169,4],"end":[2187,5]},"visibility":"default","docs":"Makes a clone of the `Weak` pointer that points to the same allocation.\n\n# Examples\n\n```\nuse std::sync::{Arc, Weak};\n\nlet weak_five = Arc::downgrade(&Arc::new(5));\n\nlet _ = Weak::clone(&weak_five);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4333:2546":{"id":"0:4333:2546","crate_id":0,"name":"into_raw","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[450,4],"end":[452,5]},"visibility":"public","docs":"Consumes the `CString` and transfers ownership of the string to a C caller.\n\nThe pointer which this function returns must be returned to Rust and reconstituted using\n[`CString::from_raw`] to be properly deallocated. Specifically, one\nshould *not* use the standard C `free()` function to deallocate\nthis string.\n\nFailure to call [`CString::from_raw`] will lead to a memory leak.\n\nThe C side must **not** modify the length of the string (by writing a\n`null` somewhere inside the string or removing the final one) before\nit makes it back into Rust using [`CString::from_raw`]. See the safety section\nin [`CString::from_raw`].\n\n# Examples\n\n```\nuse std::ffi::CString;\n\nlet c_string = CString::new(\"foo\").expect(\"CString::new failed\");\n\nlet ptr = c_string.into_raw();\n\nunsafe {\n    assert_eq!(b'f', *ptr as u8);\n    assert_eq!(b'o', *ptr.add(1) as u8);\n    assert_eq!(b'o', *ptr.add(2) as u8);\n    assert_eq!(b'\\0', *ptr.add(3) as u8);\n\n    // retake pointer to free memory\n    let _ = CString::from_raw(ptr);\n}\n```","links":{"`CString::from_raw`":"0:4330:2513"},"attrs":["#[inline]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"cstr_memory\", since = \"1.4.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"c_char","id":"1:46949:6206","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:695":{"id":"0:695","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[332,0],"end":[344,1]},"visibility":{"restricted":{"parent":"0:648:1793","path":"::borrow"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_unstable(feature = \"const_deref\", issue = \"88955\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"name":"","id":"0:667:225","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}},"generic_params":[],"modifier":"maybe_const"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2886:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["0:697:224","0:698:536"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4567:2441":{"id":"0:4567:2441","crate_id":0,"name":"new_zeroed_slice","span":{"filename":"library/alloc/src/rc.rs","begin":[739,4],"end":[750,5]},"visibility":"public","docs":"Constructs a new reference-counted slice with uninitialized contents, with the memory being\nfilled with `0` bytes.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and\nincorrect usage of this method.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nuse std::rc::Rc;\n\nlet values = Rc::<[u32]>::new_zeroed_slice(3);\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [0, 0, 0])\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1519:2186"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:872:2750":{"id":"0:872:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1325,4],"end":[1325,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"0:1782":{"id":"0:1782","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2022,0],"end":[2022,71]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:1404:3833","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2219-0:5533:7157":{"id":"b:1:2219-0:5533:7157","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3673":{"id":"0:3673","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2012,0],"end":[2012,49]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CursorMut","id":"0:3474:5281","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1615:2759":{"id":"0:1615:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1706,4],"end":[1709,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:6407:237":{"id":"a:1:7709:3766-0:6407:237","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2658:222-0:1230:3671":{"id":"a:1:2658:222-0:1230:3671","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedError","id":"0:1230:3671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3867:650":{"id":"0:3867:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[36,4],"end":[38,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:0:671-0:3339:3356":{"id":"b:0:671-0:3339:3356","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:899":{"id":"0:899","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1412,0],"end":[1412,40]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5189:2629":{"id":"0:5189:2629","crate_id":0,"name":"as_bytes","span":{"filename":"library/alloc/src/string.rs","begin":[1248,4],"end":[1250,5]},"visibility":"public","docs":"Returns a byte slice of this `String`'s contents.\n\nThe inverse of this method is [`from_utf8`].\n\n[`from_utf8`]: String::from_utf8\n\n# Examples\n\nBasic usage:\n\n```\nlet s = String::from(\"hello\");\n\nassert_eq!(&[104, 101, 108, 108, 111], s.as_bytes());\n```","links":{"String::from_utf8":"0:5165:6388"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5191:3231":{"id":"0:5191:3231","crate_id":0,"name":"pop","span":{"filename":"library/alloc/src/string.rs","begin":[1303,4],"end":[1310,5]},"visibility":"public","docs":"Removes the last character from the string buffer and returns it.\n\nReturns [`None`] if this `String` is empty.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"foo\");\n\nassert_eq!(s.pop(), Some('o'));\nassert_eq!(s.pop(), Some('o'));\nassert_eq!(s.pop(), Some('f'));\n\nassert_eq!(s.pop(), None);\n```","links":{"`None`":"1:47999:173"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:3794:3805":{"id":"b:1:3303-0:3794:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4552:2366":{"id":"0:4552:2366","crate_id":0,"name":"new_zeroed","span":{"filename":"library/alloc/src/rc.rs","begin":[537,4],"end":[545,5]},"visibility":"public","docs":"Constructs a new `Rc` with uninitialized contents, with the memory\nbeing filled with `0` bytes.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and\nincorrect usage of this method.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nuse std::rc::Rc;\n\nlet zero = Rc::<u32>::new_zeroed();\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0)\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1519:2186"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6128":{"id":"0:6128","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[297,0],"end":[335,1]},"visibility":{"restricted":{"parent":"0:6056:757","path":"::vec::into_iter"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6131:2759","0:6132:6115"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2510-0:1230:3671":{"id":"b:1:2510-0:1230:3671","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedError","id":"0:1230:3671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4460:659":{"id":"0:4460:659","crate_id":0,"name":"format","span":{"filename":"library/alloc/src/fmt.rs","begin":[608,0],"end":[617,1]},"visibility":"public","docs":"The `format` function takes an [`Arguments`] struct and returns the resulting\nformatted string.\n\nThe [`Arguments`] instance can be created with the [`format_args!`] macro.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::fmt;\n\nlet s = fmt::format(format_args!(\"Hello, {}!\", \"world\"));\nassert_eq!(s, \"Hello, world!\");\n```\n\nPlease note that using [`format!`] might be preferable.\nExample:\n\n```\nlet s = format!(\"Hello, {}!\", \"world\");\nassert_eq!(s, \"Hello, world!\");\n```\n\n[`format_args!`]: core::format_args\n[`format!`]: crate::format","links":{"`Arguments`":"1:49113:73","core::format_args":"1:21:660","crate::format":"0:6:659"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["args",{"kind":"resolved_path","inner":{"name":"Arguments","id":"1:49113:73","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"string::String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6885:2052":{"id":"0:6885:2052","crate_id":0,"name":"layout","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[94,8],"end":[94,22]},"visibility":"default","docs":"The layout of allocation request that failed","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50943:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"0:3416":{"id":"0:3416","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1004,0],"end":[1022,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3418:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:7264":{"id":"0:7264","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[33,0],"end":[33,105]},"visibility":{"restricted":{"parent":"0:6257:9314","path":"::vec::partial_eq"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"U"}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"items":["0:7267:595","0:7268:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2708:2329-0:5964:3449":{"id":"a:1:2708:2329-0:5964:3449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5072":{"id":"0:5072","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[71,0],"end":[77,1]},"visibility":{"restricted":{"parent":"0:5004:1344","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"slice_concat_ext\", issue = \"27747\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Join","id":"0:4938:7826","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"slice","inner":{"kind":"generic","inner":"S"}},"items":["0:5074:180","0:5075:7823"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2219-0:6957:6203":{"id":"b:1:2219-0:6957:6203","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2510-0:1680:4069":{"id":"b:1:2510-0:1680:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:1680:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3221:2120":{"id":"0:3221:2120","crate_id":0,"name":"max","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1586,4],"end":[1588,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3881:2762":{"id":"0:3881:2762","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[67,4],"end":[69,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4670":{"id":"0:4670","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1748,0],"end":[1839,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2305:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["le","ge","lt","gt"],"trait":{"name":"PartialOrd","id":"1:2305:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4672:995","0:4673:815","0:4674:781","0:4675:699","0:4676:682"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11432:40329":{"id":"1:11432:40329","crate_id":1,"name":"eq_ignore_ascii_case","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[2392,4],"end":[2392,59]},"visibility":"public","docs":"Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1012:2885":{"id":"0:1012:2885","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1708,4],"end":[1710,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5599:7194":{"id":"0:5599:7194","crate_id":0,"name":"strong_count","span":{"filename":"library/alloc/src/sync.rs","begin":[1033,4],"end":[1035,5]},"visibility":"public","docs":"Gets the number of strong (`Arc`) pointers to this allocation.\n\n# Safety\n\nThis method by itself is safe, but using it correctly requires extra care.\nAnother thread can change the strong count at any time,\nincluding potentially between calling this method and acting on the result.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\nlet _also_five = Arc::clone(&five);\n\n// This assertion is deterministic because we haven't shared\n// the `Arc` between threads.\nassert_eq!(2, Arc::strong_count(&five));\n```","links":{},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"arc_counts\", since = \"1.15.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1912":{"id":"0:1912","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2242,0],"end":[2425,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1916:768","0:1917:4093","0:1918:4154","0:1919:1502","0:1920:4165","0:1921:782","0:1922:2762"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6830":{"id":"0:6830","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2683,0],"end":[2683,51]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"vec_deque_partial_eq_slice\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6834:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6096":{"id":"0:6096","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[55,0],"end":[168,1]},"visibility":{"restricted":{"parent":"0:6056:757","path":"::vec::into_iter"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6099:3433","0:6100:4583","0:6101:283"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2505-0:1348:3805":{"id":"b:1:2505-0:1348:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:1348:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4719:126":{"id":"0:4719:126","crate_id":0,"name":"Error","span":{"filename":"library/alloc/src/rc.rs","begin":[2060,4],"end":[2060,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}}}},"b:1:7020-0:3531:4069":{"id":"b:1:7020-0:3531:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3531:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:4118:3451":{"id":"0:4118:3451","crate_id":0,"name":"clear","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1423,4],"end":[1427,5]},"visibility":"public","docs":"Clears the deque, removing all values.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque = VecDeque::new();\ndeque.push_back(1);\ndeque.clear();\nassert!(deque.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1897":{"id":"0:1897","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2202,0],"end":[2218,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:2969:3662","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1902:180","0:1903:742"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5431:650":{"id":"0:5431:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/string.rs","begin":[2896,4],"end":[2898,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:6725:1970":{"id":"b:1:2505-0:6725:1970","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:439:126":{"id":"0:439:126","crate_id":0,"name":"Error","span":{"filename":"library/alloc/src/boxed.rs","begin":[1642,4],"end":[1642,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"0:5561:908":{"id":"0:5561:908","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/sync.rs","begin":[361,4],"end":[370,5]},"visibility":"public","docs":"Constructs a new `Arc<T>`.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["data",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:588:2788":{"id":"0:588:2788","crate_id":0,"name":"resume","span":{"filename":"library/alloc/src/boxed.rs","begin":[2111,4],"end":[2113,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"1:48133:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["arg",{"kind":"generic","inner":"R"}]],"output":{"kind":"resolved_path","inner":{"name":"GeneratorState","id":"1:46243:2335","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Yield","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:2951:2334","args":null}}}},{"type":{"kind":"qualified_path","inner":{"name":"Return","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:2951:2334","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4414":{"id":"0:4414","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1039,0],"end":[1046,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_asref\", since = \"1.7.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:2969:3662","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeFull","id":"1:46305:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4415:180","0:4416:742"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4458":{"id":"0:4458","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[573,39],"end":[573,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::UpperHex","name":"UpperHex","id":"1:8581:6932","glob":false}},"0:5731":{"id":"0:5731","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2465,0],"end":[2469,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Pointer","id":"1:8583:188","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5733:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:7284":{"id":"0:7284","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[37,0],"end":[37,118]},"visibility":{"restricted":{"parent":"0:6257:9314","path":"::vec::partial_eq"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"U"},"len":"N"}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:7290:595","0:7292:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5891":{"id":"0:5891","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain_filter.rs","begin":[154,0],"end":[199,1]},"visibility":{"restricted":{"parent":"0:5868:3974","path":"::vec::drain_filter"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"drain_filter\", reason = \"recently added\", issue =\n\"43244\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:7057:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:5895:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:911":{"id":"0:911","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1447,0],"end":[1460,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:913:2750","0:914:921","0:915:2751"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:318:329":{"id":"0:318:329","crate_id":0,"name":"assume_init","span":{"filename":"library/alloc/src/boxed.rs","begin":[830,4],"end":[833,5]},"visibility":"public","docs":"Converts to `Box<T, A>`.\n\n# Safety\n\nAs with [`MaybeUninit::assume_init`],\nit is up to the caller to guarantee that the value\nreally is in an initialized state.\nCalling this when the content is not yet fully initialized\ncauses immediate undefined behavior.\n\n[`MaybeUninit::assume_init`]: mem::MaybeUninit::assume_init\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nlet mut five = Box::<u32>::new_uninit();\n\nlet five: Box<u32> = unsafe {\n    // Deferred initialization:\n    five.as_mut_ptr().write(5);\n\n    five.assume_init()\n};\n\nassert_eq!(*five, 5)\n```","links":{"mem::MaybeUninit::assume_init":"1:1523:329"},"attrs":["#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:4083:3294":{"id":"0:4083:3294","crate_id":0,"name":"get","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[642,4],"end":[649,5]},"visibility":"public","docs":"Provides a reference to the element at the given index.\n\nElement at index 0 is the front of the queue.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(3);\nbuf.push_back(4);\nbuf.push_back(5);\nassert_eq!(buf.get(1), Some(&4));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:544":{"id":"0:544","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2010,0],"end":[2010,84]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Unsize","id":"1:2652:2330","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DispatchFromDyn","id":"1:3218:2333","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:480:224":{"id":"0:480:224","crate_id":0,"name":"Target","span":{"filename":"library/alloc/src/boxed.rs","begin":[1900,4],"end":[1900,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:841:3451":{"id":"0:841:3451","crate_id":0,"name":"clear","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1220,4],"end":[1222,5]},"visibility":"public","docs":"Drops all items from the binary heap.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::from([1, 3]);\n\nassert!(!heap.is_empty());\n\nheap.clear();\n\nassert!(heap.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5225:2629":{"id":"0:5225:2629","crate_id":0,"name":"as_bytes","span":{"filename":"library/alloc/src/string.rs","begin":[1900,4],"end":[1902,5]},"visibility":"public","docs":"Returns a slice of [`u8`]s bytes that were attempted to convert to a `String`.\n\n# Examples\n\nBasic usage:\n\n```\n// some invalid bytes, in a vector\nlet bytes = vec![0, 159];\n\nlet value = String::from_utf8(bytes);\n\nassert_eq!(&[0, 159], value.unwrap_err().as_bytes());\n```","links":{"`u8`":"1:58447:10472"},"attrs":["#[must_use]","#[stable(feature = \"from_utf8_error_as_bytes\", since = \"1.26.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:6725:1970":{"id":"b:1:3303-0:6725:1970","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6794:650":{"id":"0:6794:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[172,9],"end":[172,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4073":{"id":"0:4073","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[528,0],"end":[562,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4075:908","0:4076:2019"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6748:650":{"id":"0:6748:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1441,16],"end":[1441,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:7020-0:7074:9310":{"id":"b:1:7020-0:7074:9310","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Splice","id":"0:7074:9310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:4763:2513":{"id":"0:4763:2513","crate_id":0,"name":"from_raw","span":{"filename":"library/alloc/src/rc.rs","begin":[2353,4],"end":[2370,5]},"visibility":"public","docs":"Converts a raw pointer previously created by [`into_raw`] back into `Weak<T>`.\n\nThis can be used to safely get a strong reference (by calling [`upgrade`]\nlater) or to deallocate the weak count by dropping the `Weak<T>`.\n\nIt takes ownership of one weak reference (with the exception of pointers created by [`new`],\nas these don't own anything; the method still works on them).\n\n# Safety\n\nThe pointer must have originated from the [`into_raw`] and must still own its potential\nweak reference.\n\nIt is allowed for the strong count to be 0 at the time of calling this. Nevertheless, this\ntakes ownership of one weak reference currently represented as a raw pointer (the weak\ncount is not modified by this operation) and therefore it must be paired with a previous\ncall to [`into_raw`].\n\n# Examples\n\n```\nuse std::rc::{Rc, Weak};\n\nlet strong = Rc::new(\"hello\".to_owned());\n\nlet raw_1 = Rc::downgrade(&strong).into_raw();\nlet raw_2 = Rc::downgrade(&strong).into_raw();\n\nassert_eq!(2, Rc::weak_count(&strong));\n\nassert_eq!(\"hello\", &*unsafe { Weak::from_raw(raw_1) }.upgrade().unwrap());\nassert_eq!(1, Rc::weak_count(&strong));\n\ndrop(strong);\n\n// Decrement the last weak count.\nassert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());\n```\n\n[`into_raw`]: Weak::into_raw\n[`upgrade`]: Weak::upgrade\n[`new`]: Weak::new","links":{"Weak::into_raw":"0:4762:2546","Weak::new":"0:4752:908","Weak::upgrade":"0:4764:7614"},"attrs":["#[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["ptr",{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:6601:670":{"id":"0:6601:670","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2747,4],"end":[2749,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:3462:5277":{"id":"b:1:2505-0:3462:5277","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cursor","id":"0:3462:5277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3109":{"id":"0:3109","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1313,0],"end":[1321,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3096:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3113:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3064:782":{"id":"0:3064:782","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1178,4],"end":[1180,5]},"visibility":"public","docs":"Returns the number of elements in the set.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut v = BTreeSet::new();\nassert_eq!(v.len(), 0);\nv.insert(1);\nassert_eq!(v.len(), 1);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_unstable(feature = \"const_btree_len\", issue = \"71835\",\nimplied_by = \"const_btree_new\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:7023:3475":{"id":"1:7023:3475","crate_id":1,"name":"IntoIter","span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[269,4],"end":[269,17]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"I"}}},"0:3229":{"id":"0:3229","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1602,0],"end":[1617,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:2944:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3232:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2644:214-0:3794:3805":{"id":"a:1:2644:214-0:3794:3805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:7006:650":{"id":"0:7006:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/string.rs","begin":[429,9],"end":[429,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:7057:4069":{"id":"a:1:7709:3766-0:7057:4069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:7057:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:4572:329":{"id":"0:4572:329","crate_id":0,"name":"assume_init","span":{"filename":"library/alloc/src/rc.rs","begin":[785,4],"end":[787,5]},"visibility":"public","docs":"Converts to `Rc<T>`.\n\n# Safety\n\nAs with [`MaybeUninit::assume_init`],\nit is up to the caller to guarantee that the inner value\nreally is in an initialized state.\nCalling this when the content is not yet fully initialized\ncauses immediate undefined behavior.\n\n[`MaybeUninit::assume_init`]: mem::MaybeUninit::assume_init\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(get_mut_unchecked)]\n\nuse std::rc::Rc;\n\nlet mut five = Rc::<u32>::new_uninit();\n\n// Deferred initialization:\nRc::get_mut(&mut five).unwrap().write(5);\n\nlet five = unsafe { five.assume_init() };\n\nassert_eq!(*five, 5)\n```","links":{"mem::MaybeUninit::assume_init":"1:1523:329"},"attrs":["#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:4456":{"id":"0:4456","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[573,20],"end":[573,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::LowerHex","name":"LowerHex","id":"1:8579:6931","glob":false}},"b:1:2505-0:3339:3356":{"id":"b:1:2505-0:3339:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4971:2903":{"id":"0:4971:2903","crate_id":0,"name":"to_owned","span":{"filename":"library/alloc/src/slice.rs","begin":[785,4],"end":[787,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:6725:1970":{"id":"a:1:7709:3766-0:6725:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4772:571":{"id":"0:4772:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/rc.rs","begin":[2527,4],"end":[2538,5]},"visibility":"default","docs":"Drops the `Weak` pointer.\n\n# Examples\n\n```\nuse std::rc::{Rc, Weak};\n\nstruct Foo;\n\nimpl Drop for Foo {\n    fn drop(&mut self) {\n        println!(\"dropped!\");\n    }\n}\n\nlet foo = Rc::new(Foo);\nlet weak_foo = Rc::downgrade(&foo);\nlet other_weak_foo = Weak::clone(&weak_foo);\n\ndrop(weak_foo);   // Doesn't print anything\ndrop(foo);        // Prints \"dropped!\"\n\nassert!(other_weak_foo.upgrade().is_none());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:3328:157":{"id":"a:1:7710:3767-0:3328:157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:7710:3767-0:1376:3816":{"id":"a:1:7710:3767-0:1376:3816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:1376:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3827:6115":{"id":"0:3827:6115","crate_id":0,"name":"advance_back_by","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[120,4],"end":[128,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3182":{"id":"0:3182","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1520,0],"end":[1524,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3185:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5441:307":{"id":"0:5441:307","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/string.rs","begin":[2941,4],"end":[2943,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7240":{"id":"0:7240","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[27,0],"end":[27,126]},"visibility":{"restricted":{"parent":"0:6257:9314","path":"::vec::partial_eq"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"partialeq_vec_for_ref_slice\", since = \"1.46.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},"items":["0:7244:595","0:7245:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:420":{"id":"0:420","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1581,0],"end":[1603,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"boxed_str_conv\", since = \"1.19.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:422:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4834":{"id":"0:4834","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[44,32],"end":[44,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"from_ref\", since = \"1.28.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::from_ref","name":"from_ref","id":"1:10147:7675","glob":false}},"0:745:3007":{"id":"0:745:3007","crate_id":0,"name":"binary_heap","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1,0],"end":[1721,1]},"visibility":"public","docs":"A priority queue implemented with a binary heap.\n\nInsertion and popping the largest element have *O*(log(*n*)) time complexity.\nChecking the largest element is *O*(1). Converting a vector to a binary heap\ncan be done in-place, and has *O*(*n*) complexity. A binary heap can also be\nconverted to a sorted vector in-place, allowing it to be used for an *O*(*n* * log(*n*))\nin-place heapsort.\n\n# Examples\n\nThis is a larger example that implements [Dijkstra's algorithm][dijkstra]\nto solve the [shortest path problem][sssp] on a [directed graph][dir_graph].\nIt shows how to use [`BinaryHeap`] with custom types.\n\n[dijkstra]: https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\n[sssp]: https://en.wikipedia.org/wiki/Shortest_path_problem\n[dir_graph]: https://en.wikipedia.org/wiki/Directed_graph\n\n```\nuse std::cmp::Ordering;\nuse std::collections::BinaryHeap;\n\n#[derive(Copy, Clone, Eq, PartialEq)]\nstruct State {\n    cost: usize,\n    position: usize,\n}\n\n// The priority queue depends on `Ord`.\n// Explicitly implement the trait so the queue becomes a min-heap\n// instead of a max-heap.\nimpl Ord for State {\n    fn cmp(&self, other: &Self) -> Ordering {\n        // Notice that the we flip the ordering on costs.\n        // In case of a tie we compare positions - this step is necessary\n        // to make implementations of `PartialEq` and `Ord` consistent.\n        other.cost.cmp(&self.cost)\n            .then_with(|| self.position.cmp(&other.position))\n    }\n}\n\n// `PartialOrd` needs to be implemented as well.\nimpl PartialOrd for State {\n    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n        Some(self.cmp(other))\n    }\n}\n\n// Each node is represented as a `usize`, for a shorter implementation.\nstruct Edge {\n    node: usize,\n    cost: usize,\n}\n\n// Dijkstra's shortest path algorithm.\n\n// Start at `start` and use `dist` to track the current shortest distance\n// to each node. This implementation isn't memory-efficient as it may leave duplicate\n// nodes in the queue. It also uses `usize::MAX` as a sentinel value,\n// for a simpler implementation.\nfn shortest_path(adj_list: &Vec<Vec<Edge>>, start: usize, goal: usize) -> Option<usize> {\n    // dist[node] = current shortest distance from `start` to `node`\n    let mut dist: Vec<_> = (0..adj_list.len()).map(|_| usize::MAX).collect();\n\n    let mut heap = BinaryHeap::new();\n\n    // We're at `start`, with a zero cost\n    dist[start] = 0;\n    heap.push(State { cost: 0, position: start });\n\n    // Examine the frontier with lower cost nodes first (min-heap)\n    while let Some(State { cost, position }) = heap.pop() {\n        // Alternatively we could have continued to find all shortest paths\n        if position == goal { return Some(cost); }\n\n        // Important as we may have already found a better way\n        if cost > dist[position] { continue; }\n\n        // For each node we can reach, see if we can find a way with\n        // a lower cost going through this node\n        for edge in &adj_list[position] {\n            let next = State { cost: cost + edge.cost, position: edge.node };\n\n            // If so, add it to the frontier and continue\n            if next.cost < dist[next.position] {\n                heap.push(next);\n                // Relaxation, we have now found a better way\n                dist[next.position] = next.cost;\n            }\n        }\n    }\n\n    // Goal not reachable\n    None\n}\n\nfn main() {\n    // This is the directed graph we're going to use.\n    // The node numbers correspond to the different states,\n    // and the edge weights symbolize the cost of moving\n    // from one node to another.\n    // Note that the edges are one-way.\n    //\n    //                  7\n    //          +-----------------+\n    //          |                 |\n    //          v   1        2    |  2\n    //          0 -----> 1 -----> 3 ---> 4\n    //          |        ^        ^      ^\n    //          |        | 1      |      |\n    //          |        |        | 3    | 1\n    //          +------> 2 -------+      |\n    //           10      |               |\n    //                   +---------------+\n    //\n    // The graph is represented as an adjacency list where each index,\n    // corresponding to a node value, has a list of outgoing edges.\n    // Chosen for its efficiency.\n    let graph = vec![\n        // Node 0\n        vec![Edge { node: 2, cost: 10 },\n             Edge { node: 1, cost: 1 }],\n        // Node 1\n        vec![Edge { node: 3, cost: 2 }],\n        // Node 2\n        vec![Edge { node: 1, cost: 1 },\n             Edge { node: 3, cost: 3 },\n             Edge { node: 4, cost: 1 }],\n        // Node 3\n        vec![Edge { node: 0, cost: 7 },\n             Edge { node: 4, cost: 2 }],\n        // Node 4\n        vec![]];\n\n    assert_eq!(shortest_path(&graph, 0, 1), Some(1));\n    assert_eq!(shortest_path(&graph, 0, 3), Some(3));\n    assert_eq!(shortest_path(&graph, 3, 0), Some(7));\n    assert_eq!(shortest_path(&graph, 0, 4), Some(5));\n    assert_eq!(shortest_path(&graph, 4, 0), None);\n}\n```","links":{"`BinaryHeap`":"0:768:96"},"attrs":["#[cfg(not(no_global_oom_handling))]","#![allow(missing_docs)]","#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:768:96","0:771:3221","0:859:3356","0:6734:3475","0:6740:3364","0:6749:3449","0:6757:3337"],"is_stripped":false}},"1:11322:306":{"id":"1:11322:306","crate_id":1,"name":"as_ptr","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[400,4],"end":[400,43]},"visibility":"public","docs":"Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```","links":{"`u8`":"1:58447:10472","str::as_mut_ptr":"1:11323:2192"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11324:3294":{"id":"1:11324:3294","crate_id":1,"name":"get","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[441,4],"end":[441,82]},"visibility":"public","docs":"Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```","links":{"`None`":"1:47999:173"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9110:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9110:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3525:5339":{"id":"0:3525:5339","crate_id":0,"name":"pop_front","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1608,4],"end":[1626,5]},"visibility":"public","docs":"Removes the first element from the cursor's parent list and returns it,\nor None if the list is empty. The element the cursor points to remains\nunchanged, unless it was pointing to the front element. In that case, it\npoints to the new front element.\n\nThis operation should compute in *O*(1) time.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2658:222-0:6787:192":{"id":"a:1:2658:222-0:6787:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:6787:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:355:409":{"id":"0:355:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/boxed.rs","begin":[1293,4],"end":[1300,5]},"visibility":"default","docs":"Returns a new box with a `clone()` of this box's contents.\n\n# Examples\n\n```\nlet x = Box::new(5);\nlet y = x.clone();\n\n// The value is the same\nassert_eq!(x, y);\n\n// But they are unique objects\nassert_ne!(&*x as *const i32, &*y as *const i32);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:392:2637":{"id":"0:392:2637","crate_id":0,"name":"write_u64","span":{"filename":"library/alloc/src/boxed.rs","begin":[1403,4],"end":[1405,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"u64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6985":{"id":"0:6985","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[364,21],"end":[364,23]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5747":{"id":"0:5747","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2539,0],"end":[2554,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:5748:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2216-0:1185:3669":{"id":"b:1:2216-0:1185:3669","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:1185:3669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2658:222-0:859:3356":{"id":"a:1:2658:222-0:859:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3180:4091":{"id":"0:3180:4091","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1511,4],"end":[1513,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:1415:3837":{"id":"b:1:3303-0:1415:3837","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:1415:3837","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3303-0:3723:3449":{"id":"b:1:3303-0:3723:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:3723:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4124:5339":{"id":"0:4124:5339","crate_id":0,"name":"pop_front","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1565,4],"end":[1574,5]},"visibility":"public","docs":"Removes the first element and returns it, or `None` if the deque is\nempty.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut d = VecDeque::new();\nd.push_back(1);\nd.push_back(2);\n\nassert_eq!(d.pop_front(), Some(1));\nassert_eq!(d.pop_front(), Some(2));\nassert_eq!(d.pop_front(), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3039:5031":{"id":"0:3039:5031","crate_id":0,"name":"is_superset","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[774,4],"end":[779,5]},"visibility":"public","docs":"Returns `true` if the set is a superset of another,\ni.e., `self` contains at least all the elements in `other`.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet sub = BTreeSet::from([1, 2]);\nlet mut set = BTreeSet::new();\n\nassert_eq!(set.is_superset(&sub), false);\n\nset.insert(0);\nset.insert(1);\nassert_eq!(set.is_superset(&sub), false);\n\nset.insert(2);\nassert_eq!(set.is_superset(&sub), true);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4868":{"id":"0:4868","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[64,43],"end":[64,49]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::SplitN","name":"SplitN","id":"1:9540:7703","glob":false}},"0:243":{"id":"0:243","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[131,0],"end":[139,1]},"visibility":{"restricted":{"parent":"0:194:2340","path":"::boxed::thin"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:245:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2216-0:4521:198":{"id":"b:1:2216-0:4521:198","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1528:2759":{"id":"0:1528:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1516,4],"end":[1523,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3278:2750":{"id":"0:3278:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1771,4],"end":[1771,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"0:5175:308":{"id":"0:5175:308","crate_id":0,"name":"as_str","span":{"filename":"library/alloc/src/string.rs","begin":[884,4],"end":[886,5]},"visibility":"public","docs":"Extracts a string slice containing the entire `String`.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = String::from(\"foo\");\n\nassert_eq!(\"foo\", s.as_str());\n```","links":{},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"string_as_str\", since = \"1.7.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:778:650":{"id":"0:778:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[287,4],"end":[289,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11328:3226":{"id":"1:11328:3226","crate_id":1,"name":"get_unchecked","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[507,4],"end":[507,91]},"visibility":"public","docs":"Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```","links":{},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9110:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9110:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:1376:3816":{"id":"b:1:2219-0:1376:3816","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:1376:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7710:3767-0:6725:1970":{"id":"a:1:7710:3767-0:6725:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2499-0:1230:3671":{"id":"b:1:2499-0:1230:3671","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedError","id":"0:1230:3671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2502-0:276:1792":{"id":"b:1:2502-0:276:1792","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[751,0],"end":[751,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"never"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2504:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11314:8486":{"id":"1:11314:8486","crate_id":1,"name":"is_char_boundary","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[211,4],"end":[211,62]},"visibility":"public","docs":"Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```","links":{},"attrs":["#[must_use]","#[rustc_const_unstable(feature = \"const_is_char_boundary\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:972:668":{"id":"0:972:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1607,4],"end":[1609,5]},"visibility":"default","docs":"Converts a `BinaryHeap<T>` into a `Vec<T>`.\n\nThis conversion requires no data movement or allocation, and has\nconstant time complexity.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["heap",{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2966":{"id":"0:2966","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[228,0],"end":[232,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:2944:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:2969:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:371:699":{"id":"0:371:699","crate_id":0,"name":"gt","span":{"filename":"library/alloc/src/boxed.rs","begin":[1365,4],"end":[1367,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:2908:95":{"id":"a:1:7709:3766-0:2908:95","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:789":{"id":"0:789","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[322,0],"end":[330,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"PeekMut","id":"0:771:3221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:792:3231"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:810:3275":{"id":"0:810:3275","crate_id":0,"name":"push","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[496,4],"end":[502,5]},"visibility":"public","docs":"Pushes an item onto the binary heap.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::new();\nheap.push(3);\nheap.push(5);\nheap.push(1);\n\nassert_eq!(heap.len(), 3);\nassert_eq!(heap.peek(), Some(&5));\n```\n\n# Time complexity\n\nThe expected cost of `push`, averaged over every possible ordering of\nthe elements being pushed, and over a sufficiently large number of\npushes, is *O*(1). This is the most meaningful cost metric when pushing\nelements that are *not* already in any sorted pattern.\n\nThe time complexity degrades if elements are pushed in predominantly\nascending order. In the worst case, elements are pushed in ascending\nsorted order and the amortized cost per push is *O*(log(*n*)) against a heap\ncontaining *n* elements.\n\nThe worst case cost of a *single* call to `push` is *O*(*n*). The worst case\noccurs when capacity is exhausted and needs a resize. The resize cost\nhas been amortized in the previous figures.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["item",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5229:650":{"id":"0:5229:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/string.rs","begin":[1960,4],"end":[1962,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5452":{"id":"0:5452","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2981,0],"end":[2981,35]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1426:192":{"id":"0:1426:192","crate_id":0,"name":"Range","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[531,0],"end":[533,1]},"visibility":"public","docs":"An iterator over a sub-range of entries in a `BTreeMap`.\n\nThis `struct` is created by the [`range`] method on [`BTreeMap`]. See its\ndocumentation for more.\n\n[`range`]: BTreeMap::range","links":{"BTreeMap::range":"0:1487:3801","`BTreeMap`":"0:1301:94"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:1426:192","a:1:2644:214-0:1426:192","a:1:2708:2329-0:1426:192","a:1:7709:3766-0:1426:192","a:1:7710:3767-0:1426:192","b:0:671-0:1426:192","b:1:7020-0:1426:192","b:1:2510-0:1426:192","b:1:2505-0:1426:192","b:1:2216-0:1426:192","b:1:3303-0:1426:192","b:1:2219-0:1426:192","b:1:2499-0:1426:192","b:1:2495-0:1426:192","0:1431","0:1729","0:1810","0:1815","0:1818"]}},"b:1:2505-0:1216:3670":{"id":"b:1:2505-0:1216:3670","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:1216:3670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4388:668":{"id":"0:4388:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[893,4],"end":[896,5]},"visibility":"default","docs":"Converts a [`CString`] into an <code>[Rc]<[CStr]></code> by moving the [`CString`]\ndata into a new [`Arc`] buffer.","links":{"`CString`":"0:6897:102","Rc":"0:4521:198","`Arc`":"0:5513:69","CStr":"1:46902:101"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1918:4154":{"id":"0:1918:4154","crate_id":0,"name":"keys","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2325,4],"end":[2327,5]},"visibility":"public","docs":"Gets an iterator over the keys of the map, in sorted order.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(2, \"b\");\na.insert(1, \"a\");\n\nlet keys: Vec<_> = a.keys().cloned().collect();\nassert_eq!(keys, [1, 2]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:1376:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1216:3670":{"id":"0:1216:3670","crate_id":0,"name":"OccupiedEntry","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[76,0],"end":[90,1]},"visibility":"public","docs":"A view into an occupied entry in a `BTreeMap`.\nIt is part of the [`Entry`] enum.","links":{"`Entry`":"0:1185:3669"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1280","a:1:2658:222-0:1216:3670","a:1:2644:214-0:1216:3670","a:1:2708:2329-0:1216:3670","a:1:7709:3766-0:1216:3670","a:1:7710:3767-0:1216:3670","b:1:2510-0:1216:3670","b:1:2505-0:1216:3670","b:1:2216-0:1216:3670","b:1:3303-0:1216:3670","b:1:2219-0:1216:3670","b:1:2499-0:1216:3670","b:1:2495-0:1216:3670","0:1225"]}},"0:4960":{"id":"0:4960","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[767,0],"end":[771,1]},"visibility":{"restricted":{"parent":"0:4810:1314","path":"::slice"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:4963:1793"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:648:1793":{"id":"0:648:1793","crate_id":0,"name":"borrow","span":{"filename":"library/alloc/src/borrow.rs","begin":[1,0],"end":[494,1]},"visibility":"public","docs":"A module for working with borrowed data.","links":{},"attrs":["#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:658","0:659","0:667:225","0:676:109"],"is_stripped":false}},"0:1646:782":{"id":"0:1646:782","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1756,4],"end":[1758,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:3531:4069":{"id":"a:1:7709:3766-0:3531:4069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3531:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:6891:595":{"id":"0:6891:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[80,16],"end":[80,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7268:895":{"id":"0:7268:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[33,0],"end":[33,105]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"U"}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:727":{"id":"0:727","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[432,0],"end":[436,1]},"visibility":{"restricted":{"parent":"0:648:1793","path":"::borrow"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2463:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:729:307"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4426:2822":{"id":"0:4426:2822","crate_id":0,"name":"description","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1139,4],"end":[1141,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3522:5466":{"id":"0:3522:5466","crate_id":0,"name":"split_before","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1563,4],"end":[1567,5]},"visibility":"public","docs":"Splits the list into two before the current element. This will return a\nnew list consisting of everything before the cursor, with the original\nlist retaining everything after.\n\nIf the cursor is pointing at the \"ghost\" non-element then the entire contents\nof the `LinkedList` are moved.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1536:409":{"id":"0:1536:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1535,4],"end":[1537,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:2978:4931":{"id":"a:1:2708:2329-0:2978:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:2978:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5447:921":{"id":"0:5447:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/string.rs","begin":[2958,4],"end":[2960,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4675:699":{"id":"0:4675:699","crate_id":0,"name":"gt","span":{"filename":"library/alloc/src/rc.rs","begin":[1818,4],"end":[1820,5]},"visibility":"default","docs":"Greater-than comparison for two `Rc`s.\n\nThe two are compared by calling `>` on their inner values.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nassert!(five > Rc::new(4));\n```","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2569:9224":{"id":"1:2569:9224","crate_id":1,"name":"provide","span":{"filename":"/rust-lang-rust/library/core/src/error.rs","begin":[202,4],"end":[202,53]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["demand",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Demand","id":"1:3364:9226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4747":{"id":"0:4747","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2197,0],"end":[2197,78]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Unsize","id":"1:2652:2330","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DispatchFromDyn","id":"1:3218:2333","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5240:670":{"id":"0:5240:670","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/string.rs","begin":[2003,4],"end":[2007,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"char"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:839:2762":{"id":"0:839:2762","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1170,4],"end":[1172,5]},"visibility":"public","docs":"Checks if the binary heap is empty.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::new();\n\nassert!(heap.is_empty());\n\nheap.push(3);\nheap.push(5);\nheap.push(1);\n\nassert!(!heap.is_empty());\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:875:2753":{"id":"0:875:2753","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1338,4],"end":[1340,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5093":{"id":"0:5093","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[221,0],"end":[600,1]},"visibility":{"restricted":{"parent":"0:5004:1344","path":"::str"}},"docs":"Methods for string slices.","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["0:5094:7975","0:5095:3530","0:5098:7999","0:5101:8019","0:5109:8047","0:5110:6387","0:5111:7809","0:5112:7841","0:5113:7848"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3441":{"id":"0:3441","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1073,0],"end":[1073,44]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:806:2019":{"id":"0:806:2019","crate_id":0,"name":"with_capacity","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[394,4],"end":[396,5]},"visibility":"public","docs":"Creates an empty `BinaryHeap` with at least the specified capacity.\n\nThe binary heap will be able to hold at least `capacity` elements without\nreallocating. This method is allowed to allocate for more elements than\n`capacity`. If `capacity` is 0, the binary heap will not allocate.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::with_capacity(10);\nheap.push(4);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["capacity",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4805":{"id":"0:4805","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2710,0],"end":[2710,34]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"pin\", since = \"1.33.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:7233:895":{"id":"0:7233:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[25,0],"end":[25,103]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"U"}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5111:7809":{"id":"0:5111:7809","crate_id":0,"name":"repeat","span":{"filename":"library/alloc/src/str.rs","begin":[531,4],"end":[533,5]},"visibility":"public","docs":"Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```","links":{"`String`":"0:6980:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[must_use]","#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3435:2753":{"id":"0:3435:2753","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1049,4],"end":[1051,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7257:895":{"id":"0:7257:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[29,0],"end":[29,118]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:345":{"id":"0:345","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1254,0],"end":[1259,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"items":["0:347:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2219-0:859:3356":{"id":"b:1:2219-0:859:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2495-0:3096:4069":{"id":"b:1:2495-0:3096:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3096:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3633:411":{"id":"0:3633:411","crate_id":0,"name":"clone_from","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1923,4],"end":[1934,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:7020-0:1359:3475":{"id":"b:1:7020-0:1359:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1359:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"b:1:2219-0:1385:3820":{"id":"b:1:2219-0:1385:3820","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:1385:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5540":{"id":"0:5540","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[310,0],"end":[310,76]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Unsize","id":"1:2652:2330","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"CoerceUnsized","id":"1:3181:2331","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2510-0:6779:3475":{"id":"b:1:2510-0:6779:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6779:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2216-0:1338:3356":{"id":"b:1:2216-0:1338:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:805:908":{"id":"0:805:908","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[373,4],"end":[375,5]},"visibility":"public","docs":"Creates an empty `BinaryHeap` as a max-heap.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::new();\nheap.push(4);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:459":{"id":"0:459","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1813,0],"end":[1871,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:461:2731","0:463:2733"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7710:3767-0:6757:3337":{"id":"a:1:7710:3767-0:6757:3337","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainSorted","id":"0:6757:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1553:4091":{"id":"0:1553:4091","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1571,4],"end":[1573,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2912":{"id":"0:2912","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[89,0],"end":[93,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hash","id":"1:8791:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:8791:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:2915:702"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4810:1314":{"id":"0:4810:1314","crate_id":0,"name":"slice","span":{"filename":"library/alloc/src/slice.rs","begin":[1,0],"end":[1132,1]},"visibility":"public","docs":"Utilities for the slice primitive type.\n\n*[See also the slice primitive type](slice).*\n\nMost of the structs in this module are iterator types which can only be created\nusing a certain function. For example, `slice.iter()` yields an [`Iter`].\n\nA few functions are provided to create a slice from a value reference\nor from a raw pointer.","links":{"`Iter`":"1:9257:3356","slice":"1:58435:10462"},"attrs":["#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4826","0:4827","0:4828","0:4829","0:4830","0:4831","0:4833","0:4834","0:4836","0:4837","0:4839","0:4840","0:4842","0:4843","0:4845","0:4846","0:4848","0:4849","0:4850","0:4852","0:4853","0:4855","0:4856","0:4858","0:4859","0:4860","0:4861","0:4863","0:4864","0:4866","0:4867","0:4868","0:4869","0:4871","0:4872","0:4934:7816","0:4938:7826"],"is_stripped":false}},"0:582":{"id":"0:582","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2104,0],"end":[2114,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"generator_trait\", issue = \"43122\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"G","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Generator","id":"1:2951:2334","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Generator","id":"1:2951:2334","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"R"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Pin","id":"1:48133:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"G"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:586:240","0:587:206","0:588:2788"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6672":{"id":"0:6672","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3079,0],"end":[3083,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2463:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6675:307"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:7046:895":{"id":"0:7046:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/string.rs","begin":[2257,0],"end":[2257,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4672:995":{"id":"0:4672:995","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/rc.rs","begin":[1764,4],"end":[1766,5]},"visibility":"default","docs":"Partial comparison for two `Rc`s.\n\nThe two are compared by calling `partial_cmp()` on their inner values.\n\n# Examples\n\n```\nuse std::rc::Rc;\nuse std::cmp::Ordering;\n\nlet five = Rc::new(5);\n\nassert_eq!(Some(Ordering::Less), five.partial_cmp(&Rc::new(6)));\n```","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3629:416":{"id":"0:3629:416","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1912,4],"end":[1914,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3020:3801":{"id":"0:3020:3801","crate_id":0,"name":"range","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[400,4],"end":[407,5]},"visibility":"public","docs":"Constructs a double-ended iterator over a sub-range of elements in the set.\nThe simplest way is to use the range syntax `min..max`, thus `range(min..max)` will\nyield elements from min (inclusive) to max (exclusive).\nThe range may also be entered as `(Bound<T>, Bound<T>)`, so for example\n`range((Excluded(4), Included(10)))` will yield a left-exclusive, right-inclusive\nrange from 4 to 10.\n\n# Panics\n\nPanics if range `start > end`.\nPanics if range `start == end` and both bounds are `Excluded`.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\nuse std::ops::Bound::Included;\n\nlet mut set = BTreeSet::new();\nset.insert(3);\nset.insert(5);\nset.insert(8);\nfor &elem in set.range((Included(&4), Included(&8))) {\n    println!(\"{elem}\");\n}\nassert_eq!(Some(&5), set.range(4..).next());\n```","links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["range",{"kind":"generic","inner":"R"}]],"output":{"kind":"resolved_path","inner":{"name":"Range","id":"0:6787:192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3066:3663","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:710":{"id":"0:710","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[373,0],"end":[381,1]},"visibility":{"restricted":{"parent":"0:648:1793","path":"::borrow"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2305:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["le","ge","lt","gt"],"trait":{"name":"PartialOrd","id":"1:2305:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["0:713:995"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2219-0:6725:1970":{"id":"b:1:2219-0:6725:1970","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1271:4229":{"id":"0:1271:4229","crate_id":0,"name":"or_default","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[289,4],"end":[294,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the default value if empty,\nand returns a mutable reference to the value in the entry.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, Option<usize>> = BTreeMap::new();\nmap.entry(\"poneyland\").or_default();\n\nassert_eq!(map[\"poneyland\"], None);\n```","links":{},"attrs":["#[stable(feature = \"entry_or_default\", since = \"1.28.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:6757:3337":{"id":"b:1:2505-0:6757:3337","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainSorted","id":"0:6757:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:419:668":{"id":"0:419:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1572,4],"end":[1577,5]},"visibility":"default","docs":"Converts a `Cow<'_, str>` into a `Box<str>`\n\nWhen `cow` is the `Cow::Borrowed` variant, this\nconversion allocates on the heap and copies the\nunderlying `str`. Otherwise, it will try to reuse the owned\n`String`'s allocation.\n\n# Examples\n\n```rust\nuse std::borrow::Cow;\n\nlet unboxed = Cow::Borrowed(\"hello\");\nlet boxed: Box<str> = Box::from(unboxed);\nprintln!(\"{boxed}\");\n```\n\n```rust\n# use std::borrow::Cow;\nlet unboxed = Cow::Owned(\"hello\".to_string());\nlet boxed: Box<str> = Box::from(unboxed);\nprintln!(\"{boxed}\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["cow",{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:2908:95":{"id":"b:1:2219-0:2908:95","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:7262:595":{"id":"0:7262:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[31,0],"end":[31,122]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2921":{"id":"0:2921","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[103,0],"end":[103,58]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5757":{"id":"0:5757","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2619,0],"end":[2643,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"shared_from_cow\", since = \"1.45.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"B"}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"name":"","id":"0:667:225","args":null}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["0:5760:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:7022:2750":{"id":"1:7022:2750","crate_id":1,"name":"Item","span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[268,4],"end":[268,13]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}},"a:1:7710:3767-0:6749:3449":{"id":"a:1:7710:3767-0:6749:3449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:6749:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1770:2120":{"id":"0:1770:2120","crate_id":0,"name":"max","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2002,4],"end":[2004,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5374":{"id":"0:5374","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2605,0],"end":[2610,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"cow_str_to_string_specialization\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5360:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:5375:1398"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5816":{"id":"0:5816","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/task.rs","begin":[107,0],"end":[114,1]},"visibility":{"restricted":{"parent":"0:5803:1797","path":"::task"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"wake_trait\", since = \"1.51.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Wake","id":"0:5810:9270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RawWaker","id":"1:50922:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5818:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:701":{"id":"0:701","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[350,0],"end":[358,1]},"visibility":{"restricted":{"parent":"0:648:1793","path":"::borrow"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["max","clamp","min"],"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["0:703:416"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5165:6388":{"id":"0:5165:6388","crate_id":0,"name":"from_utf8","span":{"filename":"library/alloc/src/string.rs","begin":[572,4],"end":[577,5]},"visibility":"public","docs":"Converts a vector of bytes to a `String`.\n\nA string ([`String`]) is made of bytes ([`u8`]), and a vector of bytes\n([`Vec<u8>`]) is made of bytes, so this function converts between the\ntwo. Not all byte slices are valid `String`s, however: `String`\nrequires that it is valid UTF-8. `from_utf8()` checks to ensure that\nthe bytes are valid UTF-8, and then does the conversion.\n\nIf you are sure that the byte slice is valid UTF-8, and you don't want\nto incur the overhead of the validity check, there is an unsafe version\nof this function, [`from_utf8_unchecked`], which has the same behavior\nbut skips the check.\n\nThis method will take care to not copy the vector, for efficiency's\nsake.\n\nIf you need a [`&str`] instead of a `String`, consider\n[`str::from_utf8`].\n\nThe inverse of this method is [`into_bytes`].\n\n# Errors\n\nReturns [`Err`] if the slice is not UTF-8 with a description as to why the\nprovided bytes are not UTF-8. The vector you moved in is also included.\n\n# Examples\n\nBasic usage:\n\n```\n// some bytes, in a vector\nlet sparkle_heart = vec![240, 159, 146, 150];\n\n// We know these bytes are valid, so we'll use `unwrap()`.\nlet sparkle_heart = String::from_utf8(sparkle_heart).unwrap();\n\nassert_eq!(\"💖\", sparkle_heart);\n```\n\nIncorrect bytes:\n\n```\n// some invalid bytes, in a vector\nlet sparkle_heart = vec![0, 159, 146, 150];\n\nassert!(String::from_utf8(sparkle_heart).is_err());\n```\n\nSee the docs for [`FromUtf8Error`] for more details on what you can do\nwith this error.\n\n[`from_utf8_unchecked`]: String::from_utf8_unchecked\n[`Vec<u8>`]: crate::vec::Vec \"Vec\"\n[`&str`]: prim@str \"&str\"\n[`into_bytes`]: String::into_bytes","links":{"String::from_utf8_unchecked":"0:5173:7932","`Err`":"1:48147:125","crate::vec::Vec":"0:6407:237","`u8`":"1:58447:10472","String::into_bytes":"0:5174:6299","prim@str":"1:58436:10463","`str::from_utf8`":"1:10581:6388","`FromUtf8Error`":"0:6991:8288","`String`":"0:6980:218"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["vec",{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3179:2753":{"id":"0:3179:2753","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1507,4],"end":[1509,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1347:650":{"id":"0:1347:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[360,4],"end":[362,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4634":{"id":"0:4634","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1549,0],"end":[1556,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2886:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4636:224","0:4637:536"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11433:7842":{"id":"1:11433:7842","crate_id":1,"name":"make_ascii_uppercase","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[2417,4],"end":[2417,42]},"visibility":"public","docs":"Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3113:650":{"id":"0:3113:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1318,4],"end":[1320,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5548:650":{"id":"0:5548:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/sync.rs","begin":[316,4],"end":[318,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:3462:5277":{"id":"b:1:2499-0:3462:5277","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cursor","id":"0:3462:5277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6875:595":{"id":"0:6875:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[59,16],"end":[59,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5763":{"id":"0:5763","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2665,0],"end":[2675,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"boxed_slice_try_from\", since = \"1.43.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}}],"bindings":[]}}}},"items":["0:5767:126","0:5768:1418"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1247:650":{"id":"0:1247:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[125,4],"end":[133,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5749":{"id":"0:5749","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2558,0],"end":[2573,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:5750:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5323:742":{"id":"0:5323:742","crate_id":0,"name":"index","span":{"filename":"library/alloc/src/string.rs","begin":[2361,4],"end":[2363,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"resolved_path","inner":{"name":"ops::Range","id":"1:46321:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:6897:102":{"id":"a:1:7709:3766-0:6897:102","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6507":{"id":"0:6507","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2335,0],"end":[2432,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6510:6045","0:6511:7876","0:6512:8485"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2216-0:3339:3356":{"id":"b:1:2216-0:3339:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1190:3944":{"id":"0:1190:3944","crate_id":0,"name":"Vacant","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[28,4],"end":[28,82]},"visibility":"default","docs":"A vacant entry.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:1192:1545"]}},"0:4205:2750":{"id":"0:4205:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2746,4],"end":[2746,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"b:1:2219-0:3474:5281":{"id":"b:1:2219-0:3474:5281","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CursorMut","id":"0:3474:5281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6740:3364":{"id":"0:6740:3364","crate_id":0,"name":"IntoIterSorted","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1442,0],"end":[1444,1]},"visibility":"public","docs":null,"links":{},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:6740:3364","a:1:2644:214-0:6740:3364","a:1:2708:2329-0:6740:3364","a:1:7709:3766-0:6740:3364","a:1:7710:3767-0:6740:3364","b:0:671-0:6740:3364","b:1:7020-0:6740:3364","b:1:2510-0:6740:3364","b:1:2505-0:6740:3364","b:1:2216-0:6740:3364","b:1:3303-0:6740:3364","b:1:2219-0:6740:3364","b:1:2499-0:6740:3364","b:1:2495-0:6740:3364","0:6743","0:6746","0:911","0:916","0:918","0:920"]}},"0:3923:2756":{"id":"0:3923:2756","crate_id":0,"name":"fold","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[73,4],"end":[79,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["accum",{"kind":"generic","inner":"Acc"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"Acc"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7130:154","args":null}}}],"output":{"kind":"generic","inner":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:4737:7157":{"id":"a:1:2708:2329-0:4737:7157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:357":{"id":"0:357","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1327,0],"end":[1333,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_slice_clone\", since = \"1.3.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:358:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5687:7324":{"id":"0:5687:7324","crate_id":0,"name":"ptr_eq","span":{"filename":"library/alloc/src/sync.rs","begin":[2150,4],"end":[2152,5]},"visibility":"public","docs":"Returns `true` if the two `Weak`s point to the same allocation similar to [`ptr::eq`], or if\nboth don't point to any allocation (because they were created with `Weak::new()`). See [that\nfunction][`ptr::eq`] for caveats when comparing `dyn Trait` pointers.\n\n# Notes\n\nSince this compares pointers it means that `Weak::new()` will equal each\nother, even though they don't point to any allocation.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet first_rc = Arc::new(5);\nlet first = Arc::downgrade(&first_rc);\nlet second = Arc::downgrade(&first_rc);\n\nassert!(first.ptr_eq(&second));\n\nlet third_rc = Arc::new(5);\nlet third = Arc::downgrade(&third_rc);\n\nassert!(!first.ptr_eq(&third));\n```\n\nComparing `Weak::new`.\n\n```\nuse std::sync::{Arc, Weak};\n\nlet first = Weak::new();\nlet second = Weak::new();\nassert!(first.ptr_eq(&second));\n\nlet third_rc = Arc::new(());\nlet third = Arc::downgrade(&third_rc);\nassert!(!first.ptr_eq(&third));\n```\n\n[`ptr::eq`]: core::ptr::eq \"ptr::eq\"","links":{"core::ptr::eq":"1:2198:595"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"weak_ptr_eq\", since = \"1.39.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6606:2750":{"id":"0:6606:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2754,4],"end":[2754,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:5910":{"id":"0:5910","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[85,0],"end":[85,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"vec_splice\", since = \"1.21.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"self::splice::Splice","name":"Splice","id":"0:7074:9310","glob":false}},"0:4679:416":{"id":"0:4679:416","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/rc.rs","begin":[1858,4],"end":[1860,5]},"visibility":"default","docs":"Comparison for two `Rc`s.\n\nThe two are compared by calling `cmp()` on their inner values.\n\n# Examples\n\n```\nuse std::rc::Rc;\nuse std::cmp::Ordering;\n\nlet five = Rc::new(5);\n\nassert_eq!(Ordering::Less, five.cmp(&Rc::new(6)));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:6757:3337":{"id":"b:1:3303-0:6757:3337","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainSorted","id":"0:6757:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5213:8616":{"id":"0:5213:8616","crate_id":0,"name":"as_mut_vec","span":{"filename":"library/alloc/src/string.rs","begin":[1613,4],"end":[1615,5]},"visibility":"public","docs":"Returns a mutable reference to the contents of this `String`.\n\n# Safety\n\nThis function is unsafe because the returned `&mut Vec` allows writing\nbytes which are not valid UTF-8. If this constraint is violated, using\nthe original `String` after dropping the `&mut Vec` may violate memory\nsafety, as the rest of the standard library assumes that `String`s are\nvalid UTF-8.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"hello\");\n\nunsafe {\n    let vec = s.as_mut_vec();\n    assert_eq!(&[104, 101, 108, 108, 111][..], &vec[..]);\n\n    vec.reverse();\n}\nassert_eq!(s, \"olleh\");\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:5304:595":{"id":"0:5304:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[2213,4],"end":[2215,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1810":{"id":"0:1810","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2059,0],"end":[2063,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:1426:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1814:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3303-0:3339:3356":{"id":"b:1:3303-0:3339:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1420":{"id":"0:1420","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[517,0],"end":[521,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:1415:3837","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1424:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6623":{"id":"0:6623","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2819,0],"end":[2834,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7025:3507","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6626:2885","0:6628:1746","0:6629:3508"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:297:2387":{"id":"0:297:2387","crate_id":0,"name":"try_new_uninit_in","span":{"filename":"library/alloc/src/boxed.rs","begin":[487,4],"end":[494,5]},"visibility":"public","docs":"Constructs a new box with uninitialized contents in the provided allocator,\nreturning an error if the allocation fails\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nuse std::alloc::System;\n\nlet mut five = Box::<u32, _>::try_new_uninit_in(System)?;\n\nlet five = unsafe {\n    // Deferred initialization:\n    five.as_mut_ptr().write(5);\n\n    five.assume_init()\n};\n\nassert_eq!(*five, 5);\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50972:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe_const"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:3531:4069":{"id":"b:1:2505-0:3531:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3531:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4776":{"id":"0:4776","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2564,0],"end":[2568,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rc_weak\", since = \"1.4.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4778:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2499-0:7002:8296":{"id":"b:1:2499-0:7002:8296","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf16Error","id":"0:7002:8296","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:0:671-0:768:96":{"id":"b:0:671-0:768:96","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4831":{"id":"0:4831","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[42,0],"end":[42,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"slice_get_slice\", since = \"1.28.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::SliceIndex","name":"SliceIndex","id":"1:9110:216","glob":false}},"0:4215":{"id":"0:4215","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2767,0],"end":[2774,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"items":["0:4219:2750","0:4220:3475","0:4221:757"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3115":{"id":"0:3115","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1324,0],"end":[1339,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3096:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3120:2750","0:3121:921","0:3124:2751"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:535":{"id":"0:535","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2000,0],"end":[2004,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Tuple","id":"1:2721:2328","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Fn","id":"1:2914:2771","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Fn","id":"1:2914:2771","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:539:378"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6739:409":{"id":"0:6739:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1369,9],"end":[1369,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4345:6450":{"id":"0:4345:6450","crate_id":0,"name":"from_vec_with_nul","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[675,4],"end":[692,5]},"visibility":"public","docs":"Attempts to converts a <code>[Vec]<[u8]></code> to a [`CString`].\n\nRuntime checks are present to ensure there is only one nul byte in the\n[`Vec`], its last element.\n\n# Errors\n\nIf a nul byte is present and not the last element or no nul bytes\nis present, an error will be returned.\n\n# Examples\n\nA successful conversion will produce the same result as [`CString::new`]\nwhen called without the ending nul byte.\n\n```\nuse std::ffi::CString;\nassert_eq!(\n    CString::from_vec_with_nul(b\"abc\\0\".to_vec())\n        .expect(\"CString::from_vec_with_nul failed\"),\n    CString::new(b\"abc\".to_vec()).expect(\"CString::new failed\")\n);\n```\n\nAn incorrectly formatted [`Vec`] will produce an error.\n\n```\nuse std::ffi::{CString, FromVecWithNulError};\n// Interior nul byte\nlet _: FromVecWithNulError = CString::from_vec_with_nul(b\"a\\0bc\".to_vec()).unwrap_err();\n// No nul byte\nlet _: FromVecWithNulError = CString::from_vec_with_nul(b\"abc\".to_vec()).unwrap_err();\n```","links":{"`CString::new`":"0:4314:908","Vec":"0:6407:237","`CString`":"0:6897:102","`Vec`":"0:6407:237","u8":"1:58447:10472"},"attrs":["#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:5513:69":{"id":"a:1:7710:3767-0:5513:69","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4355":{"id":"0:4355","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[737,0],"end":[743,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"cstr_default\", since = \"1.10.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4356:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3408:5331":{"id":"0:3408:5331","crate_id":0,"name":"push_front","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[793,4],"end":[795,5]},"visibility":"public","docs":"Adds an element first in the list.\n\nThis operation should compute in *O*(1) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\n\ndl.push_front(2);\nassert_eq!(dl.front().unwrap(), &2);\n\ndl.push_front(1);\nassert_eq!(dl.front().unwrap(), &1);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["elt",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5004:1344":{"id":"0:5004:1344","crate_id":0,"name":"str","span":{"filename":"library/alloc/src/str.rs","begin":[1,0],"end":[668,1]},"visibility":"public","docs":"Utilities for the `str` primitive type.\n\n*[See also the `str` primitive type](str).*","links":{"str":"1:58436:10463"},"attrs":["#![stable(feature = \"rust1\", since = \"1.0.0\")]","#![allow(unused_imports)]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:5025","0:5026","0:5027","0:5028","0:5029","0:5031","0:5032","0:5033","0:5034","0:5035","0:5037","0:5038","0:5039","0:5041","0:5042","0:5043","0:5045","0:5046","0:5048","0:5049","0:5051","0:5052","0:5054","0:5055","0:5057","0:5058","0:5060","0:5061","0:5063","0:5064","0:5066","0:5067","0:5114:2337"],"is_stripped":false}},"0:5300:8712":{"id":"0:5300:8712","crate_id":0,"name":"strip_prefix_of","span":{"filename":"library/alloc/src/string.rs","begin":[2195,4],"end":[2197,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4703":{"id":"0:4703","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1971,0],"end":[1986,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4705:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4330:2513":{"id":"0:4330:2513","crate_id":0,"name":"from_raw","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[397,4],"end":[412,5]},"visibility":"public","docs":"Retakes ownership of a `CString` that was transferred to C via\n[`CString::into_raw`].\n\nAdditionally, the length of the string will be recalculated from the pointer.\n\n# Safety\n\nThis should only ever be called with a pointer that was earlier\nobtained by calling [`CString::into_raw`]. Other usage (e.g., trying to take\nownership of a string that was allocated by foreign code) is likely to lead\nto undefined behavior or allocator corruption.\n\nIt should be noted that the length isn't just \"recomputed,\" but that\nthe recomputed length must match the original length from the\n[`CString::into_raw`] call. This means the [`CString::into_raw`]/`from_raw`\nmethods should not be used when passing the string to C functions that can\nmodify the string's length.\n\n> **Note:** If you need to borrow a string that was allocated by\n> foreign code, use [`CStr`]. If you need to take ownership of\n> a string that was allocated by foreign code, you will need to\n> make your own provisions for freeing it appropriately, likely\n> with the foreign code's API to do that.\n\n# Examples\n\nCreates a `CString`, pass ownership to an `extern` function (via raw pointer), then retake\nownership with `from_raw`:\n\n```ignore (extern-declaration)\nuse std::ffi::CString;\nuse std::os::raw::c_char;\n\nextern \"C\" {\n    fn some_extern_function(s: *mut c_char);\n}\n\nlet c_string = CString::new(\"Hello!\").expect(\"CString::new failed\");\nlet raw = c_string.into_raw();\nunsafe {\n    some_extern_function(raw);\n    let c_string = CString::from_raw(raw);\n}\n```","links":{"`CStr`":"1:46902:101","`CString::into_raw`":"0:4333:2546"},"attrs":["#[must_use = \"call `drop(from_raw(ptr))` if you intend to drop the `CString`\"]","#[stable(feature = \"cstr_memory\", since = \"1.4.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["ptr",{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"c_char","id":"1:46949:6206","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:1572":{"id":"0:1572","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1611,0],"end":[1633,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1576:2750","0:1577:3475","0:1578:757"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2658:222-0:768:96":{"id":"a:1:2658:222-0:768:96","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4132:3521":{"id":"0:4132:3521","crate_id":0,"name":"remove","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1798,4],"end":[1822,5]},"visibility":"public","docs":"Removes and returns the element at `index` from the deque.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.\n\nElement at index 0 is the front of the queue.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(1);\nbuf.push_back(2);\nbuf.push_back(3);\nassert_eq!(buf, [1, 2, 3]);\n\nassert_eq!(buf.remove(1), Some(2));\nassert_eq!(buf, [1, 3]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5087":{"id":"0:5087","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[196,0],"end":[201,1]},"visibility":{"restricted":{"parent":"0:5004:1344","path":"::str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"string_borrow_mut\", since = \"1.36.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5088:2781"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2499-0:4737:7157":{"id":"b:1:2499-0:4737:7157","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4454":{"id":"0:4454","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[571,30],"end":[571,38]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::UpperExp","name":"UpperExp","id":"1:8587:6930","glob":false}},"b:1:7020-0:7057:4069":{"id":"b:1:7020-0:7057:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:7057:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:5212:8605":{"id":"0:5212:8605","crate_id":0,"name":"insert_str","span":{"filename":"library/alloc/src/string.rs","begin":[1578,4],"end":[1584,5]},"visibility":"public","docs":"Inserts a string slice into this `String` at a byte position.\n\nThis is an *O*(*n*) operation as it requires copying every element in the\nbuffer.\n\n# Panics\n\nPanics if `idx` is larger than the `String`'s length, or if it does not\nlie on a [`char`] boundary.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"bar\");\n\ns.insert_str(0, \"foo\");\n\nassert_eq!(\"foobar\", s);\n```","links":{"`char`":"1:58430:10458"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"insert_str\", since = \"1.16.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["idx",{"kind":"primitive","inner":"usize"}],["string",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:7074:9310":{"id":"b:1:2219-0:7074:9310","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Splice","id":"0:7074:9310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:785:536":{"id":"0:785:536","crate_id":0,"name":"deref","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[305,4],"end":[309,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3497:4312":{"id":"0:3497:4312","crate_id":0,"name":"back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1299,4],"end":[1301,5]},"visibility":"public","docs":"Provides a reference to the back element of the cursor's parent list,\nor None if the list is empty.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:7002:8296":{"id":"b:1:2219-0:7002:8296","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf16Error","id":"0:7002:8296","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6006":{"id":"0:6006","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[176,0],"end":[242,1]},"visibility":{"restricted":{"parent":"0:5946:3448","path":"::vec::drain"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6009:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4839":{"id":"0:4839","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[48,22],"end":[48,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::from_raw_parts","name":"from_raw_parts","id":"1:10141:2866","glob":false}},"0:5651:7378":{"id":"0:5651:7378","crate_id":0,"name":"unwrap_or_clone","span":{"filename":"library/alloc/src/sync.rs","begin":[1536,4],"end":[1538,5]},"visibility":"public","docs":"If we have the only reference to `T` then unwrap it. Otherwise, clone `T` and return the\nclone.\n\nAssuming `arc_t` is of type `Arc<T>`, this function is functionally equivalent to\n`(*arc_t).clone()`, but will avoid cloning the inner value where possible.\n\n# Examples\n\n```\n#![feature(arc_unwrap_or_clone)]\n# use std::{ptr, sync::Arc};\nlet inner = String::from(\"test\");\nlet ptr = inner.as_ptr();\n\nlet arc = Arc::new(inner);\nlet inner = Arc::unwrap_or_clone(arc);\n// The inner value was not cloned\nassert!(ptr::eq(ptr, inner.as_ptr()));\n\nlet arc = Arc::new(inner);\nlet arc2 = arc.clone();\nlet inner = Arc::unwrap_or_clone(arc);\n// Because there were 2 references, we had to clone the inner value.\nassert!(!ptr::eq(ptr, inner.as_ptr()));\n// `arc2` is the last reference, so when we unwrap it we get back\n// the original `String`.\nlet inner = Arc::unwrap_or_clone(arc2);\nassert!(ptr::eq(ptr, inner.as_ptr()));\n```","links":{},"attrs":["#[inline]","#[unstable(feature = \"arc_unwrap_or_clone\", issue = \"93610\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"generic","inner":"Self"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5594:2546":{"id":"0:5594:2546","crate_id":0,"name":"into_raw","span":{"filename":"library/alloc/src/sync.rs","begin":[853,4],"end":[857,5]},"visibility":"public","docs":"Consumes the `Arc`, returning the wrapped pointer.\n\nTo avoid a memory leak the pointer must be converted back to an `Arc` using\n[`Arc::from_raw`].\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet x = Arc::new(\"hello\".to_owned());\nlet x_ptr = Arc::into_raw(x);\nassert_eq!(unsafe { &*x_ptr }, \"hello\");\n```","links":{"`Arc::from_raw`":"0:5596:2513"},"attrs":["#[must_use = \"losing the pointer will leak memory\"]","#[stable(feature = \"rc_raw\", since = \"1.17.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"generic","inner":"Self"}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6835":{"id":"0:6835","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2684,0],"end":[2684,46]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"vec_deque_partial_eq_slice\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"U"}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6839:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4349:224":{"id":"0:4349:224","crate_id":0,"name":"Target","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[710,4],"end":[710,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:1:2219-0:1359:3475":{"id":"b:1:2219-0:1359:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1359:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5596:2513":{"id":"0:5596:2513","crate_id":0,"name":"from_raw","span":{"filename":"library/alloc/src/sync.rs","begin":[924,4],"end":[933,5]},"visibility":"public","docs":"Constructs an `Arc<T>` from a raw pointer.\n\nThe raw pointer must have been previously returned by a call to\n[`Arc<U>::into_raw`][into_raw] where `U` must have the same size and\nalignment as `T`. This is trivially true if `U` is `T`.\nNote that if `U` is not `T` but has the same size and alignment, this is\nbasically like transmuting references of different types. See\n[`mem::transmute`][transmute] for more information on what\nrestrictions apply in this case.\n\nThe user of `from_raw` has to make sure a specific value of `T` is only\ndropped once.\n\nThis function is unsafe because improper use may lead to memory unsafety,\neven if the returned `Arc<T>` is never accessed.\n\n[into_raw]: Arc::into_raw\n[transmute]: core::mem::transmute\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet x = Arc::new(\"hello\".to_owned());\nlet x_ptr = Arc::into_raw(x);\n\nunsafe {\n    // Convert back to an `Arc` to prevent leak.\n    let x = Arc::from_raw(x_ptr);\n    assert_eq!(&*x, \"hello\");\n\n    // Further calls to `Arc::from_raw(x_ptr)` would be memory-unsafe.\n}\n\n// The memory was freed when `x` went out of scope above, so `x_ptr` is now dangling!\n```","links":{"Arc::into_raw":"0:5594:2546","core::mem::transmute":"1:1284:1407"},"attrs":["#[stable(feature = \"rc_raw\", since = \"1.17.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["ptr",{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:4954":{"id":"0:4954","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[740,0],"end":[760,1]},"visibility":{"restricted":{"parent":"0:4810:1314","path":"::slice"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"slice_concat_ext\", issue = \"27747\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Join","id":"0:4938:7826","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}}],"bindings":[]}}},"for":{"kind":"slice","inner":{"kind":"generic","inner":"V"}},"items":["0:4957:180","0:4958:7823"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4106:5704":{"id":"0:4106:5704","crate_id":0,"name":"as_slices","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1149,4],"end":[1154,5]},"visibility":"public","docs":"Returns a pair of slices which contain, in order, the contents of the\ndeque.\n\nIf [`make_contiguous`] was previously called, all elements of the\ndeque will be in the first slice and the second slice will be empty.\n\n[`make_contiguous`]: VecDeque::make_contiguous\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque = VecDeque::new();\n\ndeque.push_back(0);\ndeque.push_back(1);\ndeque.push_back(2);\n\nassert_eq!(deque.as_slices(), (&[0, 1, 2][..], &[][..]));\n\ndeque.push_front(10);\ndeque.push_front(9);\n\nassert_eq!(deque.as_slices(), (&[9, 10][..], &[0, 1, 2][..]));\n```","links":{"VecDeque::make_contiguous":"0:4142:5929"},"attrs":["#[inline]","#[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1836":{"id":"0:1836","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2104,0],"end":[2104,50]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangeMut","id":"0:1435:3845","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:811:3286":{"id":"0:811:3286","crate_id":0,"name":"into_sorted_vec","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[523,4],"end":[541,5]},"visibility":"public","docs":"Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\n\nlet mut heap = BinaryHeap::from([1, 2, 4, 5, 7]);\nheap.push(6);\nheap.push(3);\n\nlet vec = heap.into_sorted_vec();\nassert_eq!(vec, [1, 2, 3, 4, 5, 6, 7]);\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1393:650":{"id":"0:1393:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[457,4],"end":[459,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:1338:3356":{"id":"b:1:2510-0:1338:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:666:1793":{"id":"0:666:1793","crate_id":0,"name":"borrow","span":{"filename":"library/alloc/src/borrow.rs","begin":[25,4],"end":[27,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"B"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:1385:3820":{"id":"b:1:2216-0:1385:3820","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:1385:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2969:650":{"id":"0:2969:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[229,4],"end":[231,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:6914:6204":{"id":"a:1:7710:3767-0:6914:6204","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2495-0:6980:218":{"id":"b:1:2495-0:6980:218","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4698:668":{"id":"0:4698:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/rc.rs","begin":[1926,4],"end":[1928,5]},"visibility":"default","docs":"Allocate a reference-counted slice and fill it by cloning `v`'s items.\n\n# Example\n\n```\n# use std::rc::Rc;\nlet original: &[i32] = &[1, 2, 3];\nlet shared: Rc<[i32]> = Rc::from(original);\nassert_eq!(&[1, 2, 3], &shared[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5571:8973":{"id":"0:5571:8973","crate_id":0,"name":"try_pin","span":{"filename":"library/alloc/src/sync.rs","begin":[557,4],"end":[559,5]},"visibility":"public","docs":"Constructs a new `Pin<Arc<T>>`, return an error if allocation fails.","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["data",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Pin","id":"1:48133:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50972:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1814:2759":{"id":"0:1814:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2060,4],"end":[2062,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3586:3475":{"id":"0:3586:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1823,4],"end":[1823,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"0:6984":{"id":"0:6984","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[364,21],"end":[364,23]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2655:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:7016:895":{"id":"0:7016:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/string.rs","begin":[2252,0],"end":[2252,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11334:5579":{"id":"1:11334:5579","crate_id":1,"name":"split_at","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[672,4],"end":[672,54]},"visibility":"public","docs":"Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```","links":{"str::split_at_mut":"1:11335:7959"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7080":{"id":"0:7080","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/splice.rs","begin":[19,9],"end":[19,14]},"visibility":{"restricted":{"parent":"0:5911:8668","path":"::vec::splice"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"vec_splice\", since = \"1.21.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"1:7130:154","args":null}}},"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Splice","id":"0:7074:9310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:7084:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4313":{"id":"0:4313","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[232,0],"end":[693,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4314:908","0:4328:6330","0:4330:2513","0:4333:2546","0:4334:6387","0:4336:6299","0:4337:6401","0:4338:2629","0:4339:6412","0:4340:6419","0:4341:6424","0:4343:6433","0:4345:6450"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1494:4039":{"id":"0:1494:4039","crate_id":0,"name":"split_off","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1320,4],"end":[1343,5]},"visibility":"public","docs":"Splits the collection into two at the given key. Returns everything after the given key,\nincluding the key.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeMap;\n\nlet mut a = BTreeMap::new();\na.insert(1, \"a\");\na.insert(2, \"b\");\na.insert(3, \"c\");\na.insert(17, \"d\");\na.insert(41, \"e\");\n\nlet b = a.split_off(&3);\n\nassert_eq!(a.len(), 2);\nassert_eq!(b.len(), 3);\n\nassert_eq!(a[&1], \"a\");\nassert_eq!(a[&2], \"b\");\n\nassert_eq!(b[&3], \"c\");\nassert_eq!(b[&17], \"d\");\nassert_eq!(b[&41], \"e\");\n```","links":{},"attrs":["#[stable(feature = \"btree_split_off\", since = \"1.11.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:6083:3475":{"id":"b:1:2505-0:6083:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6859:595":{"id":"0:6859:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2687,0],"end":[2687,63]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"U"},"len":"N"}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6667:59":{"id":"0:6667:59","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3066,4],"end":[3068,5]},"visibility":"default","docs":"Creates an empty `Vec<T>`.\n\nThe vector will not allocate until elements are pushed onto it.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:2908:95":{"id":"a:1:7710:3767-0:2908:95","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1702":{"id":"0:1702","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1853,0],"end":[1862,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:1680:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["0:1706:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6001":{"id":"0:6001","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[168,0],"end":[173,1]},"visibility":{"restricted":{"parent":"0:5946:3448","path":"::vec::drain"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6004:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3245":{"id":"0:3245","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1669,0],"end":[1673,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:2970:4926","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3247:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:0:671-0:6787:192":{"id":"b:0:671-0:6787:192","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:6787:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4963:1793":{"id":"0:4963:1793","crate_id":0,"name":"borrow","span":{"filename":"library/alloc/src/slice.rs","begin":[768,4],"end":[770,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:6822:3475":{"id":"a:1:2708:2329-0:6822:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4826":{"id":"0:4826","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[32,0],"end":[32,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"slice_range\", issue = \"76393\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::range","name":"range","id":"1:9191:3801","glob":false}},"0:4372":{"id":"0:4372","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[829,0],"end":[835,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"box_from_c_string\", since = \"1.20.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4373:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6653:995":{"id":"0:6653:995","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3030,4],"end":[3032,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4682:702":{"id":"0:4682:702","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/rc.rs","begin":[1865,4],"end":[1867,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:8805:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1793:2751":{"id":"0:1793:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2032,4],"end":[2034,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11347:40313":{"id":"1:11347:40313","crate_id":1,"name":"starts_with","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1096,4],"end":[1096,68]},"visibility":"public","docs":"Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```","links":{"self::pattern":"1:11013:1760","prim@char":"1:58430:10458"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:6740:3364":{"id":"a:1:7709:3766-0:6740:3364","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1468:3914":{"id":"0:1468:3914","crate_id":0,"name":"last_entry","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[828,4],"end":[841,5]},"visibility":"public","docs":"Returns the last entry in the map for in-place manipulation.\nThe key of this entry is the maximum key in the map.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nmap.insert(2, \"b\");\nif let Some(mut entry) = map.last_entry() {\n    if *entry.key() > 0 {\n        entry.insert(\"last\");\n    }\n}\nassert_eq!(*map.get(&1).unwrap(), \"a\");\nassert_eq!(*map.get(&2).unwrap(), \"last\");\n```","links":{},"attrs":["#[stable(feature = \"map_first_last\", since = \"1.66.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:1216:3670","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4241":{"id":"0:4241","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2818,0],"end":[2832,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"vecdeque_vec_conversions\", since = \"1.10.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:4244:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7709:3766-0:276:1792":{"id":"a:1:7709:3766-0:276:1792","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4802":{"id":"0:4802","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2703,0],"end":[2707,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(since = \"1.5.0\", feature = \"smart_ptr_as_ref\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2463:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4804:307"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11361:3524":{"id":"1:11361:3524","crate_id":1,"name":"split","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1341,4],"end":[1341,70]},"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace","links":{"str::split_whitespace":"1:11339:13876","prim@char":"1:58430:10458","str::rsplit":"1:11367:13642","self::pattern":"1:11013:1760","`DoubleEndedIterator`":"1:7053:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Split","id":"1:49965:7687","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:5424:3449":{"id":"b:1:2499-0:5424:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6630":{"id":"0:6630","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2836,0],"end":[3000,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6637:8668","0:6640:3974"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4411:2911":{"id":"0:4411:2911","crate_id":0,"name":"clone_into","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1024,4],"end":[1028,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4358:1793":{"id":"0:4358:1793","crate_id":0,"name":"borrow","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[748,4],"end":[750,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4076:2019":{"id":"0:4076:2019","crate_id":0,"name":"with_capacity","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[559,4],"end":[561,5]},"visibility":"public","docs":"Creates an empty deque with space for at least `capacity` elements.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<u32> = VecDeque::with_capacity(10);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["capacity",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1272":{"id":"0:1272","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[297,0],"end":[384,1]},"visibility":{"restricted":{"parent":"0:1169:3668","path":"::collections::btree::map::entry"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:1201:3672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1277:3528","0:1278:4237","0:1279:3797"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1552:2753":{"id":"0:1552:2753","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1567,4],"end":[1569,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:3004:4940":{"id":"b:1:2219-0:3004:4940","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:3004:4940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1519:4091":{"id":"0:1519:4091","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1502,4],"end":[1504,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1742:2750":{"id":"0:1742:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1950,4],"end":[1950,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}}}},"b:1:2219-0:6897:102":{"id":"b:1:2219-0:6897:102","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3303-0:6881:1972":{"id":"b:1:3303-0:6881:1972","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5386":{"id":"0:5386","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2659,0],"end":[2667,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"from_mut_str_for_string\", since = \"1.44.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5387:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:282":{"id":"0:282","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[203,0],"end":[362,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:284:908","0:285:1758","0:286:2366","0:287:1003","0:288:2380","0:289:2386","0:290:2391"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4773":{"id":"0:4773","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2542,0],"end":[2561,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rc_weak\", since = \"1.4.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4775:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5070:180":{"id":"0:5070:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/str.rs","begin":[62,4],"end":[62,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"b:1:2510-0:6740:3364":{"id":"b:1:2510-0:6740:3364","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5422:1536":{"id":"0:5422:1536","crate_id":0,"name":"write_str","span":{"filename":"library/alloc/src/string.rs","begin":[2864,4],"end":[2867,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3096:4069":{"id":"0:3096:4069","crate_id":0,"name":"DrainFilter","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1287,0],"end":[1300,1]},"visibility":"public","docs":"An iterator produced by calling `drain_filter` on BTreeSet.","links":{},"attrs":["#[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'a"}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["a:1:2658:222-0:3096:4069","a:1:2644:214-0:3096:4069","a:1:2708:2329-0:3096:4069","a:1:7709:3766-0:3096:4069","a:1:7710:3767-0:3096:4069","b:1:7020-0:3096:4069","b:1:2510-0:3096:4069","b:1:2505-0:3096:4069","b:1:2216-0:3096:4069","b:1:3303-0:3096:4069","b:1:2219-0:3096:4069","b:1:2499-0:3096:4069","b:1:2495-0:3096:4069","0:3104","0:3109","0:3115","0:3125"]}},"0:1729":{"id":"0:1729","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1928,0],"end":[1946,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:1426:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1733:2750","0:1734:921","0:1735:2753","0:1736:4091","0:1737:2120"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6957:6203":{"id":"0:6957:6203","crate_id":0,"name":"IntoStringError","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[227,0],"end":[230,1]},"visibility":"public","docs":"An error indicating invalid UTF-8 when converting a [`CString`] into a [`String`].\n\n`CString` is just a wrapper over a buffer of bytes with a nul terminator;\n[`CString::into_string`] performs UTF-8 validation on those bytes and may\nreturn this error.\n\nThis `struct` is created by [`CString::into_string()`]. See\nits documentation for more.","links":{"`CString::into_string()`":"0:4334:6387","`CString::into_string`":"0:4334:6387","`CString`":"0:6897:102","`String`":"0:6980:218"},"attrs":["#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:4400","a:1:2658:222-0:6957:6203","a:1:2644:214-0:6957:6203","a:1:2708:2329-0:6957:6203","a:1:7709:3766-0:6957:6203","a:1:7710:3767-0:6957:6203","b:0:5362-0:6957:6203","b:0:671-0:6957:6203","b:1:2567-0:6957:6203","b:1:2510-0:6957:6203","b:1:2505-0:6957:6203","b:1:2216-0:6957:6203","b:1:3303-0:6957:6203","b:1:2219-0:6957:6203","b:1:2499-0:6957:6203","b:1:2495-0:6957:6203","0:6960","0:6962","0:6963","0:6965","0:6966","0:6968","0:4406","0:4425"]}},"1:11388:10484":{"id":"1:11388:10484","crate_id":1,"name":"matches","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1717,4],"end":[1717,74]},"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```","links":{"self::pattern":"1:11013:1760","prim@char":"1:58430:10458","`DoubleEndedIterator`":"1:7053:119","str::matches":"1:11388:10484"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Matches","id":"1:50169:7944","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:6980:218":{"id":"b:1:3303-0:6980:218","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4562:1003":{"id":"0:4562:1003","crate_id":0,"name":"pin","span":{"filename":"library/alloc/src/rc.rs","begin":[641,4],"end":[643,5]},"visibility":"public","docs":"Constructs a new `Pin<Rc<T>>`. If `T` does not implement `Unpin`, then\n`value` will be pinned in memory and unable to be moved.","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"pin\", since = \"1.33.0\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Pin","id":"1:48133:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3817:6111":{"id":"0:3817:6111","crate_id":0,"name":"try_fold","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[73,4],"end":[80,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7130:154","args":null}}}],"output":{"kind":"generic","inner":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3139:227","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"B"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5218:3448":{"id":"0:5218:3448","crate_id":0,"name":"drain","span":{"filename":"library/alloc/src/string.rs","begin":[1753,4],"end":[1774,5]},"visibility":"public","docs":"Removes the specified range from the string in bulk, returning all\nremoved characters as an iterator.\n\nThe returned iterator keeps a mutable borrow on the string to optimize\nits implementation.\n\n# Panics\n\nPanics if the starting point or end point do not lie on a [`char`]\nboundary, or if they're out of bounds.\n\n# Leaking\n\nIf the returned iterator goes out of scope without being dropped (due to\n[`core::mem::forget`], for example), the string may still contain a copy\nof any drained characters, or may have lost characters arbitrarily,\nincluding characters outside the range.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"α is alpha, β is beta\");\nlet beta_offset = s.find('β').unwrap_or(s.len());\n\n// Remove the range up until the β from the string\nlet t: String = s.drain(..beta_offset).collect();\nassert_eq!(t, \"α is alpha, \");\nassert_eq!(s, \"β is beta\");\n\n// A full range clears the string, like `clear()` does\ns.drain(..);\nassert_eq!(s, \"\");\n```","links":{"`char`":"1:58430:10458","`core::mem::forget`":"1:1592:658"},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["range",{"kind":"generic","inner":"R"}]],"output":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3066:3663","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:1415:3837":{"id":"b:1:2219-0:1415:3837","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:1415:3837","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4141:5901":{"id":"0:4141:5901","crate_id":0,"name":"resize_with","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2076,4],"end":[2084,5]},"visibility":"public","docs":"Modifies the deque in-place so that `len()` is equal to `new_len`,\neither by removing excess elements from the back or by appending\nelements generated by calling `generator` to the back.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(5);\nbuf.push_back(10);\nbuf.push_back(15);\nassert_eq!(buf, [5, 10, 15]);\n\nbuf.resize_with(5, Default::default);\nassert_eq!(buf, [5, 10, 15, 0, 0]);\n\nbuf.resize_with(2, || unreachable!());\nassert_eq!(buf, [5, 10]);\n\nlet mut state = 100;\nbuf.resize_with(5, || { state += 1; state });\nassert_eq!(buf, [5, 10, 101, 102, 103]);\n```","links":{},"attrs":["#[stable(feature = \"vec_resize_with\", since = \"1.33.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["new_len",{"kind":"primitive","inner":"usize"}],["generator",{"kind":"impl_trait","inner":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}]}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"impl FnMut() -> T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":true}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5214:782":{"id":"0:5214:782","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/string.rs","begin":[1636,4],"end":[1638,5]},"visibility":"public","docs":"Returns the length of this `String`, in bytes, not [`char`]s or\ngraphemes. In other words, it might not be what a human considers the\nlength of the string.\n\n# Examples\n\nBasic usage:\n\n```\nlet a = String::from(\"foo\");\nassert_eq!(a.len(), 3);\n\nlet fancy_f = String::from(\"ƒoo\");\nassert_eq!(fancy_f.len(), 4);\nassert_eq!(fancy_f.chars().count(), 3);\n```","links":{"`char`":"1:58430:10458"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1511":{"id":"0:1511","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1482,0],"end":[1509,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1515:2750","0:1516:921","0:1517:2751","0:1518:2753","0:1519:4091","0:1520:2120"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3054:3348":{"id":"0:3054:3348","crate_id":0,"name":"retain","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1004,4],"end":[1010,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` for which `f(&e)` returns `false`.\nThe elements are visited in ascending order.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::from([1, 2, 3, 4, 5, 6]);\n// Keep only the even numbers.\nset.retain(|&k| k % 2 == 0);\nassert!(set.iter().eq([2, 4, 6].iter()));\n```","links":{},"attrs":["#[stable(feature = \"btree_retain\", since = \"1.53.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6904":{"id":"0:6904","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[109,32],"end":[109,34]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]","#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2655:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:7252":{"id":"0:7252","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[29,0],"end":[29,118]},"visibility":{"restricted":{"parent":"0:6257:9314","path":"::vec::partial_eq"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"partialeq_vec_for_slice\", since = \"1.48.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"slice","inner":{"kind":"generic","inner":"T"}},"items":["0:7256:595","0:7257:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7710:3767-0:6822:3475":{"id":"a:1:7710:3767-0:6822:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5228":{"id":"0:5228","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[1959,0],"end":[1963,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5229:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2708:2329-0:7074:9310":{"id":"a:1:2708:2329-0:7074:9310","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Splice","id":"0:7074:9310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3339:3356":{"id":"0:3339:3356","crate_id":0,"name":"Iter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[69,0],"end":[74,1]},"visibility":"public","docs":"An iterator over the elements of a `LinkedList`.\n\nThis `struct` is created by [`LinkedList::iter()`]. See its\ndocumentation for more.","links":{"`LinkedList::iter()`":"0:3389:768"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2708:2329-0:3339:3356","a:1:7709:3766-0:3339:3356","a:1:7710:3767-0:3339:3356","b:0:671-0:3339:3356","b:1:7020-0:3339:3356","b:1:2510-0:3339:3356","b:1:2505-0:3339:3356","b:1:2216-0:3339:3356","b:1:3303-0:3339:3356","b:1:2219-0:3339:3356","b:1:2499-0:3339:3356","b:1:2495-0:3339:3356","0:3346","0:3349","0:3428","0:3436","0:3441","0:3443","0:3659","0:3661"]}},"0:5572:2380":{"id":"0:5572:2380","crate_id":0,"name":"try_new","span":{"filename":"library/alloc/src/sync.rs","begin":[574,4],"end":[583,5]},"visibility":"public","docs":"Constructs a new `Arc<T>`, returning an error if allocation fails.\n\n# Examples\n\n```\n#![feature(allocator_api)]\nuse std::sync::Arc;\n\nlet five = Arc::try_new(5)?;\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["data",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50972:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:3900:3356":{"id":"b:1:2510-0:3900:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5279:2885":{"id":"0:5279:2885","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/string.rs","begin":[2134,4],"end":[2136,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1241:650":{"id":"0:1241:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[112,4],"end":[118,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3746":{"id":"0:3746","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[105,0],"end":[105,69]},"visibility":{"restricted":{"parent":"0:3709:3448","path":"::collections::vec_deque::drain"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:3723:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2644:214-0:2937:3356":{"id":"a:1:2644:214-0:2937:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3240:2751":{"id":"0:3240:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1649,4],"end":[1658,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6923":{"id":"0:6923","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[134,27],"end":[134,29]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]","#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2655:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:290:2391":{"id":"0:290:2391","crate_id":0,"name":"try_new_zeroed","span":{"filename":"library/alloc/src/boxed.rs","begin":[359,4],"end":[361,5]},"visibility":"public","docs":"Constructs a new `Box` with uninitialized contents, with the memory\nbeing filled with `0` bytes on the heap\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\nof this method.\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nlet zero = Box::<u32>::try_new_zeroed()?;\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0);\n# Ok::<(), std::alloc::AllocError>(())\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1519:2186"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50972:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4447":{"id":"0:4447","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[567,64],"end":[567,74]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::DebugTuple","name":"DebugTuple","id":"1:8333:6927","glob":false}},"0:589":{"id":"0:589","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2117,0],"end":[2126,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"futures_api\", since = \"1.36.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Future","id":"1:11595:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Future","id":"1:11595:134","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:592:180","0:593:1011"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3351:409":{"id":"0:3351:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[94,4],"end":[96,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:6734:3475":{"id":"b:1:2510-0:6734:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3151":{"id":"0:3151","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1408,0],"end":[1430,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BitXor","id":"1:2804:4875","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"items":["0:3154:180","0:3155:359"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2708:2329-0:1185:3669":{"id":"a:1:2708:2329-0:1185:3669","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:1185:3669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5927:2751":{"id":"0:5927:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/vec/splice.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4314:908":{"id":"0:4314:908","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[261,4],"end":[317,5]},"visibility":"public","docs":"Creates a new C-compatible string from a container of bytes.\n\nThis function will consume the provided data and use the\nunderlying bytes to construct a new string, ensuring that\nthere is a trailing 0 byte. This trailing 0 byte will be\nappended by this function; the provided data should *not*\ncontain any 0 bytes in it.\n\n# Examples\n\n```ignore (extern-declaration)\nuse std::ffi::CString;\nuse std::os::raw::c_char;\n\nextern \"C\" { fn puts(s: *const c_char); }\n\nlet to_print = CString::new(\"Hello!\").expect(\"CString::new failed\");\nunsafe {\n    puts(to_print.as_ptr());\n}\n```\n\n# Errors\n\nThis function will return an error if the supplied bytes contain an\ninternal 0 byte. The [`NulError`] returned will contain the bytes as well as\nthe position of the nul byte.","links":{"`NulError`":"0:6914:6204"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5227:6389":{"id":"0:5227:6389","crate_id":0,"name":"utf8_error","span":{"filename":"library/alloc/src/string.rs","begin":[1953,4],"end":[1955,5]},"visibility":"public","docs":"Fetch a `Utf8Error` to get more details about the conversion failure.\n\nThe [`Utf8Error`] type provided by [`std::str`] represents an error that may\noccur when converting a slice of [`u8`]s to a [`&str`]. In this sense, it's\nan analogue to `FromUtf8Error`. See its documentation for more details\non using it.\n\n[`std::str`]: core::str \"std::str\"\n[`&str`]: prim@str \"&str\"\n\n# Examples\n\nBasic usage:\n\n```\n// some invalid bytes, in a vector\nlet bytes = vec![0, 159];\n\nlet error = String::from_utf8(bytes).unwrap_err().utf8_error();\n\n// the first byte is invalid here\nassert_eq!(1, error.valid_up_to());\n```","links":{"`Utf8Error`":"1:49909:6209","core::str":"1:10576:1344","prim@str":"1:58436:10463","`u8`":"1:58447:10472"},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Utf8Error","id":"1:49909:6209","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6432:2419":{"id":"0:6432:2419","crate_id":0,"name":"into_boxed_slice","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1098,4],"end":[1106,5]},"visibility":"public","docs":"Converts the vector into [`Box<[T]>`][owned slice].\n\nIf the vector has excess capacity, its items will be moved into a\nnewly-allocated buffer with exactly the right capacity.\n\n[owned slice]: Box\n\n# Examples\n\n```\nlet v = vec![1, 2, 3];\n\nlet slice = v.into_boxed_slice();\n```\n\nAny excess capacity is removed:\n\n```\nlet mut vec = Vec::with_capacity(10);\nvec.extend([1, 2, 3]);\n\nassert_eq!(vec.capacity(), 10);\nlet slice = vec.into_boxed_slice();\nassert_eq!(slice.into_vec().capacity(), 3);\n```","links":{"Box":"0:276:1792"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1413:650":{"id":"0:1413:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[495,4],"end":[497,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6730":{"id":"0:6730","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/alloc.rs","begin":[53,22],"end":[53,29]},"visibility":{"restricted":{"parent":"0:92:279","path":"::alloc"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6731:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5039":{"id":"0:5039","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[36,66],"end":[36,80]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::ParseBoolError","name":"ParseBoolError","id":"1:49923:7934","glob":false}},"0:352":{"id":"0:352","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1277,0],"end":[1323,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:355:409","0:356:411"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6559":{"id":"0:6559","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2627,0],"end":[2634,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2886:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6562:224","0:6563:536"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1853":{"id":"0:1853","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2137,0],"end":[2148,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"extend_ref\", since = \"1.2.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Copy","id":"1:2656:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Copy","id":"1:2656:107","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7025:3507","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1858:2885","0:1861:1746"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1338:3356":{"id":"0:1338:3356","crate_id":0,"name":"Iter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[353,0],"end":[356,1]},"visibility":"public","docs":"An iterator over the entries of a `BTreeMap`.\n\nThis `struct` is created by the [`iter`] method on [`BTreeMap`]. See its\ndocumentation for more.\n\n[`iter`]: BTreeMap::iter","links":{"`BTreeMap`":"0:1301:94","BTreeMap::iter":"0:1916:768"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:1338:3356","a:1:2644:214-0:1338:3356","a:1:2708:2329-0:1338:3356","a:1:7709:3766-0:1338:3356","a:1:7710:3767-0:1338:3356","b:0:671-0:1338:3356","b:1:7020-0:1338:3356","b:1:2510-0:1338:3356","b:1:2505-0:1338:3356","b:1:2216-0:1338:3356","b:1:3303-0:1338:3356","b:1:2219-0:1338:3356","b:1:2499-0:1338:3356","b:1:2495-0:1338:3356","0:1344","0:1511","0:1521","0:1524","0:1529","0:1533"]}},"b:0:671-0:6734:3475":{"id":"b:0:671-0:6734:3475","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:7020-0:2978:4931":{"id":"b:1:7020-0:2978:4931","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:2978:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"b:1:2505-0:2937:3356":{"id":"b:1:2505-0:2937:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:676:109":{"id":"0:676:109","crate_id":0,"name":"Cow","span":{"filename":"library/alloc/src/borrow.rs","begin":[179,0],"end":[190,1]},"visibility":"public","docs":"A clone-on-write smart pointer.\n\nThe type `Cow` is a smart pointer providing clone-on-write functionality: it\ncan enclose and provide immutable access to borrowed data, and clone the\ndata lazily when mutation or ownership is required. The type is designed to\nwork with general borrowed data via the `Borrow` trait.\n\n`Cow` implements `Deref`, which means that you can call\nnon-mutating methods directly on the data it encloses. If mutation\nis desired, `to_mut` will obtain a mutable reference to an owned\nvalue, cloning if necessary.\n\nIf you need reference-counting pointers, note that\n[`Rc::make_mut`][crate::rc::Rc::make_mut] and\n[`Arc::make_mut`][crate::sync::Arc::make_mut] can provide clone-on-write\nfunctionality as well.\n\n# Examples\n\n```\nuse std::borrow::Cow;\n\nfn abs_all(input: &mut Cow<[i32]>) {\n    for i in 0..input.len() {\n        let v = input[i];\n        if v < 0 {\n            // Clones into a vector if not already owned.\n            input.to_mut()[i] = -v;\n        }\n    }\n}\n\n// No clone occurs because `input` doesn't need to be mutated.\nlet slice = [0, 1, 2];\nlet mut input = Cow::from(&slice[..]);\nabs_all(&mut input);\n\n// Clone occurs because `input` needs to be mutated.\nlet slice = [-1, 0, 1];\nlet mut input = Cow::from(&slice[..]);\nabs_all(&mut input);\n\n// No clone occurs because `input` is already owned.\nlet mut input = Cow::from(vec![-1, 0, 1]);\nabs_all(&mut input);\n```\n\nAnother example showing how to keep `Cow` in a struct:\n\n```\nuse std::borrow::Cow;\n\nstruct Items<'a, X: 'a> where [X]: ToOwned<Owned = Vec<X>> {\n    values: Cow<'a, [X]>,\n}\n\nimpl<'a, X: Clone + 'a> Items<'a, X> where [X]: ToOwned<Owned = Vec<X>> {\n    fn new(v: Cow<'a, [X]>) -> Self {\n        Items { values: v }\n    }\n}\n\n// Creates a container from borrowed values of a slice\nlet readonly = [1, 2];\nlet borrowed = Items::new((&readonly[..]).into());\nmatch borrowed {\n    Items { values: Cow::Borrowed(b) } => println!(\"borrowed {b:?}\"),\n    _ => panic!(\"expect borrowed value\"),\n}\n\nlet mut clone_on_write = borrowed;\n// Mutates the data from slice into owned vec and pushes a new value on top\nclone_on_write.values.to_mut().push(3);\nprintln!(\"clone_on_write = {:?}\", clone_on_write.values);\n\n// The data was mutated. Let's check it out.\nmatch clone_on_write {\n    Items { values: Cow::Owned(_) } => println!(\"clone_on_write contains owned data\"),\n    _ => panic!(\"expect owned data\"),\n}\n```","links":{"crate::sync::Arc::make_mut":"0:5650:7357","crate::rc::Rc::make_mut":"0:4592:7357"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"Cow\"]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"outlives":"'a"}],"generic_params":[]}}]},"variants_stripped":false,"variants":["0:679:2676","0:682:2677"],"impls":["0:689","a:1:2658:222-0:676:109","a:1:2644:214-0:676:109","a:1:2708:2329-0:676:109","a:1:7709:3766-0:676:109","a:1:7710:3767-0:676:109","b:0:5362-0:676:109","b:0:671-0:676:109","b:1:2510-0:676:109","b:1:2505-0:676:109","b:1:2216-0:676:109","b:1:3303-0:676:109","b:1:2219-0:676:109","b:1:2499-0:676:109","b:1:2495-0:676:109","0:413","0:418","0:636","0:640","0:663","0:685","0:695","0:699","0:701","0:704","0:710","0:714","0:717","0:720","0:723","0:727","0:730","0:734","0:738","0:741","0:4359","0:4364","0:4374","0:4377","0:4380","0:4709","0:5256","0:5287","0:7027","0:7032","0:7037","0:7042","0:7047","0:7052","0:5374","0:5394","0:5397","0:5400","0:5403","0:5406","0:5410","0:5415","0:5757","0:6037","0:6041","0:6045","0:6049","0:7258","0:7264","0:7269","0:6700"]}},"a:1:7710:3767-0:3004:4940":{"id":"a:1:7710:3767-0:3004:4940","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:3004:4940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5253":{"id":"0:5253","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2051,0],"end":[2057,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"box_str2\", since = \"1.45.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7012:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5254:670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:295:2381":{"id":"0:295:2381","crate_id":0,"name":"try_new_in","span":{"filename":"library/alloc/src/boxed.rs","begin":[412,4],"end":[422,5]},"visibility":"public","docs":"Allocates memory in the given allocator then places `x` into it,\nreturning an error if the allocation fails\n\nThis doesn't actually allocate if `T` is zero-sized.\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nlet five = Box::try_new_in(5, System)?;\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["x",{"kind":"generic","inner":"T"}],["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50972:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe_const"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3587:757":{"id":"0:3587:757","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1827,4],"end":[1829,5]},"visibility":"default","docs":"Consumes the list into an iterator yielding elements by value.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:6957:6203":{"id":"a:1:2708:2329-0:6957:6203","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4919:1399":{"id":"0:4919:1399","crate_id":0,"name":"to_vec","span":{"filename":"library/alloc/src/slice.rs","begin":[407,4],"end":[412,5]},"visibility":"public","docs":"Copies `self` into a new `Vec`.\n\n# Examples\n\n```\nlet s = [10, 40, 30];\nlet x = s.to_vec();\n// Here, `s` and `x` can be modified independently.\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[rustc_conversion_suggestion]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:6734:3475":{"id":"b:1:2219-0:6734:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2510-0:2937:3356":{"id":"b:1:2510-0:2937:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2658:222-0:6822:3475":{"id":"a:1:2658:222-0:6822:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6965":{"id":"0:6965","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[225,27],"end":[225,29]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]","#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2655:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6926":{"id":"0:6926","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[134,31],"end":[134,36]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6927:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:597:2793":{"id":"0:597:2793","crate_id":0,"name":"poll_next","span":{"filename":"library/alloc/src/boxed.rs","begin":[2132,4],"end":[2134,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"1:48133:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"1:11824:2336","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"1:50887:189","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:3985:2324","args":null}}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3641":{"id":"0:3641","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1955,0],"end":[1968,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3645:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11364:7705":{"id":"1:11364:7705","crate_id":1,"name":"split_inclusive","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1381,4],"end":[1381,89]},"visibility":"public","docs":"An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```","links":{"self::pattern":"1:11013:1760","prim@char":"1:58430:10458"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitInclusive","id":"1:10837:7706","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:397:2642":{"id":"0:397:2642","crate_id":0,"name":"write_i32","span":{"filename":"library/alloc/src/boxed.rs","begin":[1418,4],"end":[1420,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"i32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:6787:192":{"id":"b:1:2495-0:6787:192","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:6787:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2510-0:1426:192":{"id":"b:1:2510-0:1426:192","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:1426:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:7269":{"id":"0:7269","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[35,0],"end":[35,109]},"visibility":{"restricted":{"parent":"0:6257:9314","path":"::vec::partial_eq"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"U"}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"items":["0:7272:595","0:7273:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5028":{"id":"0:5028","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[30,0],"end":[30,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::SplitInclusive","name":"SplitInclusive","id":"1:10837:7706","glob":false}},"0:3412:4039":{"id":"0:3412:4039","crate_id":0,"name":"split_off","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[887,4],"end":[916,5]},"visibility":"public","docs":"Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.\n\nThis operation should compute in *O*(*n*) time.\n\n# Panics\n\nPanics if `at > len`.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\n\nd.push_front(1);\nd.push_front(2);\nd.push_front(3);\n\nlet mut split = d.split_off(2);\n\nassert_eq!(split.pop_front(), Some(1));\nassert_eq!(split.pop_front(), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["at",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3095:757":{"id":"0:3095:757","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1280,4],"end":[1282,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1266":{"id":"0:1266","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[274,0],"end":[295,1]},"visibility":{"restricted":{"parent":"0:1169:3668","path":"::collections::btree::map::entry"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:1185:3669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1271:4229"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1296":{"id":"0:1296","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[24,23],"end":[24,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"entry::OccupiedEntry","name":"OccupiedEntry","id":"0:1216:3670","glob":false}},"b:1:2216-0:1376:3816":{"id":"b:1:2216-0:1376:3816","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:1376:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4938:7826":{"id":"0:4938:7826","crate_id":0,"name":"Join","span":{"filename":"library/alloc/src/slice.rs","begin":[690,0],"end":[698,1]},"visibility":"public","docs":"Helper trait for [`[T]::join`](slice::join)","links":{"slice::join":"0:4927:7823"},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:4940:180","0:4941:7823"],"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"bounds":[],"implementations":["0:4948","0:4954","0:5072"]}},"a:1:7710:3767-0:3474:5281":{"id":"a:1:7710:3767-0:3474:5281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CursorMut","id":"0:3474:5281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6890":{"id":"0:6890","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[80,16],"end":[80,25]},"visibility":{"restricted":{"parent":"0:744:1794","path":"::collections"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"try_reserve_kind\", reason =\n\"Uncertain how much info should be exposed\", issue = \"48043\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6891:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:7020-0:3096:4069":{"id":"b:1:7020-0:3096:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3096:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:1636:2120":{"id":"0:1636:2120","crate_id":0,"name":"max","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1742,4],"end":[1744,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:4737:7157":{"id":"a:1:7709:3766-0:4737:7157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"b:1:2510-0:676:109":{"id":"b:1:2510-0:676:109","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3120:2750":{"id":"0:3120:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1328,4],"end":[1328,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:979:2750":{"id":"0:979:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1621,4],"end":[1621,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:3274:409":{"id":"0:3274:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1765,4],"end":[1767,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4536":{"id":"0:4536","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[343,0],"end":[343,74]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Unsize","id":"1:2652:2330","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DispatchFromDyn","id":"1:3218:2333","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2658:222-0:6991:8288":{"id":"a:1:2658:222-0:6991:8288","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2644:214-0:6787:192":{"id":"a:1:2644:214-0:6787:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:6787:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5648":{"id":"0:5648","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[1398,0],"end":[1539,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5650:7357","0:5651:7378"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3779":{"id":"0:3779","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[231,0],"end":[231,58]},"visibility":{"restricted":{"parent":"0:3709:3448","path":"::collections::vec_deque::drain"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:3723:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4417":{"id":"0:4417","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1049,0],"end":[1054,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_asref\", since = \"1.7.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2463:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4418:307"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1493:3668":{"id":"0:1493:3668","crate_id":0,"name":"entry","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1259,4],"end":[1288,5]},"visibility":"public","docs":"Gets the given key's corresponding entry in the map for in-place manipulation.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeMap;\n\nlet mut count: BTreeMap<&str, usize> = BTreeMap::new();\n\n// count the number of occurrences of letters in the vec\nfor x in [\"a\", \"b\", \"a\", \"c\", \"a\", \"b\"] {\n    count.entry(x).and_modify(|curr| *curr += 1).or_insert(1);\n}\n\nassert_eq!(count[\"a\"], 3);\nassert_eq!(count[\"b\"], 2);\nassert_eq!(count[\"c\"], 1);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"generic","inner":"K"}]],"output":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:1185:3669","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:1426:192":{"id":"b:1:2499-0:1426:192","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:1426:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:401:2646":{"id":"0:401:2646","crate_id":0,"name":"write_length_prefix","span":{"filename":"library/alloc/src/boxed.rs","begin":[1430,4],"end":[1432,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6514":{"id":"0:6514","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2434,0],"end":[2477,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6519:10034"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3261":{"id":"0:3261","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1720,0],"end":[1758,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:2978:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3265:2750","0:3266:921","0:3267:2751","0:3268:4091"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5588:329":{"id":"0:5588:329","crate_id":0,"name":"assume_init","span":{"filename":"library/alloc/src/sync.rs","begin":[790,4],"end":[792,5]},"visibility":"public","docs":"Converts to `Arc<T>`.\n\n# Safety\n\nAs with [`MaybeUninit::assume_init`],\nit is up to the caller to guarantee that the inner value\nreally is in an initialized state.\nCalling this when the content is not yet fully initialized\ncauses immediate undefined behavior.\n\n[`MaybeUninit::assume_init`]: mem::MaybeUninit::assume_init\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(get_mut_unchecked)]\n\nuse std::sync::Arc;\n\nlet mut five = Arc::<u32>::new_uninit();\n\n// Deferred initialization:\nArc::get_mut(&mut five).unwrap().write(5);\n\nlet five = unsafe { five.assume_init() };\n\nassert_eq!(*five, 5)\n```","links":{"mem::MaybeUninit::assume_init":"1:1523:329"},"attrs":["#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:2908:95":{"id":"a:1:2708:2329-0:2908:95","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4219:2750":{"id":"0:4219:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2768,4],"end":[2768,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}}}},"0:6990:409":{"id":"0:6990:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/string.rs","begin":[405,47],"end":[405,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7040:595":{"id":"0:7040:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[2257,0],"end":[2257,34]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11311":{"id":"1:11311","crate_id":1,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[136,0],"end":[136,8]},"visibility":{"restricted":{"parent":"1:10576:1344","path":"::str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"primitive","inner":"str"},"items":["1:11312:782","1:11313:2762","1:11314:8486","1:11315:40308","1:11317:40309","1:11320:2629","1:11321:40310","1:11322:306","1:11323:2192","1:11324:3294","1:11326:3929","1:11328:3226","1:11330:3227","1:11332:40311","1:11333:40312","1:11334:5579","1:11335:7959","1:11336:8030","1:11337:8022","1:11338:2612","1:11339:13876","1:11340:7925","1:11341:13985","1:11342:13990","1:11343:7923","1:11344:4997","1:11347:40313","1:11350:40314","1:11353:11422","1:11357:11402","1:11361:3524","1:11364:7705","1:11367:13642","1:11370:14024","1:11373:14020","1:11376:13671","1:11379:13659","1:11382:40315","1:11385:40316","1:11388:10484","1:11391:14004","1:11394:7989","1:11397:13997","1:11400:40317","1:11402:40318","1:11404:40319","1:11406:40320","1:11407:40321","1:11408:40322","1:11411:40323","1:11414:40324","1:11417:40325","1:11420:40326","1:11423:40327","1:11426:40328","1:11429:13949","1:11431:13487","1:11432:40329","1:11433:7842","1:11434:7849","1:11435:13905","1:11437:13908","1:11438:13911"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1630:2750":{"id":"0:1630:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1724,4],"end":[1724,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}}}},"b:1:2495-0:1359:3475":{"id":"b:1:2495-0:1359:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1359:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5352:224":{"id":"0:5352:224","crate_id":0,"name":"Target","span":{"filename":"library/alloc/src/string.rs","begin":[2456,4],"end":[2456,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"str"}}},"a:1:7710:3767-0:5964:3449":{"id":"a:1:7710:3767-0:5964:3449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2495-0:6757:3337":{"id":"b:1:2495-0:6757:3337","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainSorted","id":"0:6757:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5737":{"id":"0:5737","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2490,0],"end":[2494,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:8791:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:8791:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5739:702"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5068":{"id":"0:5068","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[61,0],"end":[67,1]},"visibility":{"restricted":{"parent":"0:5004:1344","path":"::str"}},"docs":"Note: `str` in `Concat<str>` is not meaningful here.\nThis type parameter of the trait only exists to enable another impl.","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"slice_concat_ext\", issue = \"27747\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"S","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Concat","id":"0:4934:7816","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"for":{"kind":"slice","inner":{"kind":"generic","inner":"S"}},"items":["0:5070:180","0:5071:431"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2644:214-0:1385:3820":{"id":"a:1:2644:214-0:1385:3820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:1385:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4533":{"id":"0:4533","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[340,0],"end":[340,72]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Unsize","id":"1:2652:2330","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"CoerceUnsized","id":"1:3181:2331","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7709:3766-0:1185:3669":{"id":"a:1:7709:3766-0:1185:3669","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:1185:3669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:5181:2086":{"id":"0:5181:2086","crate_id":0,"name":"reserve","span":{"filename":"library/alloc/src/string.rs","begin":[1026,4],"end":[1028,5]},"visibility":"public","docs":"Reserves capacity for at least `additional` bytes more than the\ncurrent length. The allocator may reserve more space to speculatively\navoid frequent allocations. After calling `reserve`,\ncapacity will be greater than or equal to `self.len() + additional`.\nDoes nothing if capacity is already sufficient.\n\n# Panics\n\nPanics if the new capacity overflows [`usize`].\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::new();\n\ns.reserve(10);\n\nassert!(s.capacity() >= 10);\n```\n\nThis might not actually increase the capacity:\n\n```\nlet mut s = String::with_capacity(10);\ns.push('a');\ns.push('b');\n\n// s now has a length of 2 and a capacity of at least 10\nlet capacity = s.capacity();\nassert_eq!(2, s.len());\nassert!(capacity >= 10);\n\n// Since we already have at least an extra 8 capacity, calling this...\ns.reserve(8);\n\n// ... doesn't actually increase.\nassert_eq!(capacity, s.capacity());\n```","links":{"`usize`":"1:58453:10478"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3926:6111":{"id":"0:3926:6111","crate_id":0,"name":"try_fold","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[81,4],"end":[88,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7130:154","args":null}}}],"output":{"kind":"generic","inner":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3139:227","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"B"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:276:1792":{"id":"b:1:2216-0:276:1792","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:563:2781":{"id":"0:563:2781","crate_id":0,"name":"borrow_mut","span":{"filename":"library/alloc/src/boxed.rs","begin":[2046,4],"end":[2048,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1529":{"id":"0:1529","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1527,0],"end":[1531,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1532:782"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4840":{"id":"0:4840","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[48,38],"end":[48,56]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::from_raw_parts_mut","name":"from_raw_parts_mut","id":"1:10144:2047","glob":false}},"0:3194:2750":{"id":"0:3194:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1537,4],"end":[1537,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"b:1:2499-0:6083:3475":{"id":"b:1:2499-0:6083:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:363:895":{"id":"0:363:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/boxed.rs","begin":[1342,4],"end":[1344,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4566:2436":{"id":"0:4566:2436","crate_id":0,"name":"new_uninit_slice","span":{"filename":"library/alloc/src/rc.rs","begin":[712,4],"end":[714,5]},"visibility":"public","docs":"Constructs a new reference-counted slice with uninitialized contents.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(get_mut_unchecked)]\n\nuse std::rc::Rc;\n\nlet mut values = Rc::<[u32]>::new_uninit_slice(3);\n\n// Deferred initialization:\nlet data = Rc::get_mut(&mut values).unwrap();\ndata[0].write(1);\ndata[1].write(2);\ndata[2].write(3);\n\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [1, 2, 3])\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1471:3924":{"id":"0:1471:3924","crate_id":0,"name":"contains_key","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[887,4],"end":[893,5]},"visibility":"public","docs":"Returns `true` if the map contains a value for the specified key.\n\nThe key may be any borrowed form of the map's key type, but the ordering\non the borrowed form *must* match the ordering on the key type.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.contains_key(&1), true);\nassert_eq!(map.contains_key(&2), false);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:1415:3837":{"id":"a:1:2708:2329-0:1415:3837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:1415:3837","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2510-0:4016:238":{"id":"b:1:2510-0:4016:238","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1298":{"id":"0:1298","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[24,53],"end":[24,64]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"entry::VacantEntry","name":"VacantEntry","id":"0:1201:3672","glob":false}},"0:5060":{"id":"0:5060","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[51,20],"end":[51,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::RSplitN","name":"RSplitN","id":"1:50087:7701","glob":false}},"0:3490:5278":{"id":"0:3490:5278","crate_id":0,"name":"current","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1249,4],"end":[1251,5]},"visibility":"public","docs":"Returns a reference to the element that the cursor is currently\npointing to.\n\nThis returns `None` if the cursor is currently pointing to the\n\"ghost\" non-element.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4575:329":{"id":"0:4575:329","crate_id":0,"name":"assume_init","span":{"filename":"library/alloc/src/rc.rs","begin":[825,4],"end":[827,5]},"visibility":"public","docs":"Converts to `Rc<[T]>`.\n\n# Safety\n\nAs with [`MaybeUninit::assume_init`],\nit is up to the caller to guarantee that the inner value\nreally is in an initialized state.\nCalling this when the content is not yet fully initialized\ncauses immediate undefined behavior.\n\n[`MaybeUninit::assume_init`]: mem::MaybeUninit::assume_init\n\n# Examples\n\n```\n#![feature(new_uninit)]\n#![feature(get_mut_unchecked)]\n\nuse std::rc::Rc;\n\nlet mut values = Rc::<[u32]>::new_uninit_slice(3);\n\n// Deferred initialization:\nlet data = Rc::get_mut(&mut values).unwrap();\ndata[0].write(1);\ndata[1].write(2);\ndata[2].write(3);\n\nlet values = unsafe { values.assume_init() };\n\nassert_eq!(*values, [1, 2, 3])\n```","links":{"mem::MaybeUninit::assume_init":"1:1523:329"},"attrs":["#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:6737":{"id":"0:6737","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1369,9],"end":[1369,14]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:6739:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:7084:650":{"id":"0:7084:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/vec/splice.rs","begin":[19,9],"end":[19,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3057:3320":{"id":"0:3057:3320","crate_id":0,"name":"append","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1041,4],"end":[1047,5]},"visibility":"public","docs":"Moves all elements from `other` into `self`, leaving `other` empty.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut a = BTreeSet::new();\na.insert(1);\na.insert(2);\na.insert(3);\n\nlet mut b = BTreeSet::new();\nb.insert(3);\nb.insert(4);\nb.insert(5);\n\na.append(&mut b);\n\nassert_eq!(a.len(), 5);\nassert_eq!(b.len(), 0);\n\nassert!(a.contains(&1));\nassert!(a.contains(&2));\nassert!(a.contains(&3));\nassert!(a.contains(&4));\nassert!(a.contains(&5));\n```","links":{},"attrs":["#[stable(feature = \"btree_append\", since = \"1.11.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5379:307":{"id":"0:5379:307","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/string.rs","begin":[2624,4],"end":[2626,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5244:670":{"id":"0:5244:670","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/string.rs","begin":[2013,4],"end":[2017,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"char"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:6779:3475":{"id":"b:1:2219-0:6779:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6779:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2567-0:215:2341":{"id":"b:1:2567-0:215:2341","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/error.rs","begin":[198,0],"end":[198,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"1:3352:10680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2569:9224"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"1:11320:2629":{"id":"1:11320:2629","crate_id":1,"name":"as_bytes","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[325,4],"end":[325,41]},"visibility":"public","docs":"Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```","links":{"`from_utf8`":"1:10581:6388"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4200:670":{"id":"0:4200:670","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2739,4],"end":[2741,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:981:757":{"id":"0:981:757","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1642,4],"end":[1644,5]},"visibility":"default","docs":"Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet heap = BinaryHeap::from([1, 2, 3, 4]);\n\n// Print 1, 2, 3, 4 in arbitrary order\nfor x in heap.into_iter() {\n    // x has type i32, not &i32\n    println!(\"{x}\");\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6953":{"id":"0:6953","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[159,27],"end":[159,29]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7710:3767-0:3462:5277":{"id":"a:1:7710:3767-0:3462:5277","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cursor","id":"0:3462:5277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1263:3528":{"id":"0:1263:3528","crate_id":0,"name":"key","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[232,4],"end":[237,5]},"visibility":"public","docs":"Returns a reference to this entry's key.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nassert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");\n```","links":{},"attrs":["#[stable(feature = \"map_entry_keys\", since = \"1.10.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6442:3797":{"id":"0:6442:3797","crate_id":0,"name":"insert","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1442,4],"end":[1476,5]},"visibility":"public","docs":"Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.\n\n# Panics\n\nPanics if `index > len`.\n\n# Examples\n\n```\nlet mut vec = vec![1, 2, 3];\nvec.insert(1, 4);\nassert_eq!(vec, [1, 4, 2, 3]);\nvec.insert(4, 5);\nassert_eq!(vec, [1, 4, 2, 3, 5]);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}],["element",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3260:409":{"id":"0:3260:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1705,4],"end":[1717,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3549:571":{"id":"0:3549:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1750,4],"end":[1769,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:1201:3672":{"id":"b:1:2495-0:1201:3672","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:1201:3672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:323:329":{"id":"0:323:329","crate_id":0,"name":"assume_init","span":{"filename":"library/alloc/src/boxed.rs","begin":[906,4],"end":[909,5]},"visibility":"public","docs":"Converts to `Box<[T], A>`.\n\n# Safety\n\nAs with [`MaybeUninit::assume_init`],\nit is up to the caller to guarantee that the values\nreally are in an initialized state.\nCalling this when the content is not yet fully initialized\ncauses immediate undefined behavior.\n\n[`MaybeUninit::assume_init`]: mem::MaybeUninit::assume_init\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nlet mut values = Box::<[u32]>::new_uninit_slice(3);\n\nlet values = unsafe {\n    // Deferred initialization:\n    values[0].as_mut_ptr().write(1);\n    values[1].as_mut_ptr().write(2);\n    values[2].as_mut_ptr().write(3);\n\n    values.assume_init()\n};\n\nassert_eq!(*values, [1, 2, 3])\n```","links":{"mem::MaybeUninit::assume_init":"1:1523:329"},"attrs":["#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:6407:237":{"id":"b:1:2495-0:6407:237","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5341":{"id":"0:5341","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2419,0],"end":[2424,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:2973:5511","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeTo","id":"1:46365:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5342:743"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4075:908":{"id":"0:4075:908","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[542,4],"end":[545,5]},"visibility":"public","docs":"Creates an empty deque.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<u32> = VecDeque::new();\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_vec_deque_new\", since =\n\"CURRENT_RUSTC_VERSION\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4457":{"id":"0:4457","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[573,30],"end":[573,37]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::Pointer","name":"Pointer","id":"1:8583:188","glob":false}},"0:5293":{"id":"0:5293","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2177,0],"end":[2208,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":"A convenience impl that delegates to the impl for `&str`.\n\n# Examples\n\n```\nassert_eq!(String::from(\"Hello world\").find(\"world\"), Some(6));\n```","links":{},"attrs":["#[unstable(feature = \"pattern\", reason =\n\"API not fully fleshed out and ready to be stabilized\", issue = \"27721\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["strip_prefix_of","strip_suffix_of","is_prefix_of","is_suffix_of","is_contained_in"],"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"items":["0:5296:7920","0:5297:8572","0:5298:8710","0:5299:8711","0:5300:8712","0:5301:8713","0:5302:8714"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2567-0:6869:1971":{"id":"b:1:2567-0:6869:1971","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/error.rs","begin":[198,0],"end":[198,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"1:3352:10680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:9224"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"1:2508:126":{"id":"1:2508:126","crate_id":1,"name":"Error","span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[764,4],"end":[764,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"U"},"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}},"0:4087:2104":{"id":"0:4087:2104","crate_id":0,"name":"reserve_exact","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[752,4],"end":[762,5]},"visibility":"public","docs":"Reserves the minimum capacity for at least `additional` more elements to be inserted in the\ngiven deque. Does nothing if the capacity is already sufficient.\n\nNote that the allocator may give the collection more space than it requests. Therefore\ncapacity can not be relied upon to be precisely minimal. Prefer [`reserve`] if future\ninsertions are expected.\n\n# Panics\n\nPanics if the new capacity overflows `usize`.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf: VecDeque<i32> = [1].into();\nbuf.reserve_exact(10);\nassert!(buf.capacity() >= 11);\n```\n\n[`reserve`]: VecDeque::reserve","links":{"VecDeque::reserve":"0:4088:2086"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:368:815":{"id":"0:368:815","crate_id":0,"name":"lt","span":{"filename":"library/alloc/src/boxed.rs","begin":[1353,4],"end":[1355,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5049":{"id":"0:5049","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[43,27],"end":[43,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[allow(deprecated)]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::LinesAny","name":"LinesAny","id":"1:50229:7941","glob":false}},"0:5309":{"id":"0:5309","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2272,0],"end":[2277,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5310:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4399:650":{"id":"0:4399:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[967,4],"end":[976,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:276:1792":{"id":"b:1:2219-0:276:1792","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:463:2733":{"id":"0:463:2733","crate_id":0,"name":"downcast_unchecked","span":{"filename":"library/alloc/src/boxed.rs","begin":[1863,4],"end":[1870,5]},"visibility":"public","docs":"Downcasts the box to a concrete type.\n\nFor a safe alternative see [`downcast`].\n\n# Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\n\nlet x: Box<dyn Any + Send + Sync> = Box::new(1_usize);\n\nunsafe {\n    assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n}\n```\n\n# Safety\n\nThe contained value must be of type `T`. Calling this method\nwith the incorrect type is *undefined behavior*.\n\n[`downcast`]: Self::downcast","links":{"Self::downcast":"0:449:2731"},"attrs":["#[inline]","#[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:4423:2822":{"id":"0:4423:2822","crate_id":0,"name":"description","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1128,4],"end":[1130,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1753":{"id":"0:1753","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1973,0],"end":[1977,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"map_values_mut\", since = \"1.10.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:1394:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1756:782"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4374":{"id":"0:4374","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[838,0],"end":[844,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"cow_from_cstr\", since = \"1.28.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4376:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5446:2750":{"id":"0:5446:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/string.rs","begin":[2955,4],"end":[2955,21]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"char"}}},"0:3282":{"id":"0:3282","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1790,0],"end":[1790,46]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:3004:4940","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2658:222-0:6816:3475":{"id":"a:1:2658:222-0:6816:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5029":{"id":"0:5029","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[32,0],"end":[32,35]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::SplitWhitespace","name":"SplitWhitespace","id":"1:50239:7927","glob":false}},"0:4272":{"id":"0:4272","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[122,0],"end":[128,1]},"visibility":{"restricted":{"parent":"0:744:1794","path":"::collections"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"try_reserve_kind\", reason = \"new API\", issue = \"48043\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"LayoutError","id":"1:50960:1960","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4273:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1764:2750":{"id":"0:1764:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1984,4],"end":[1984,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"K"}}},"0:3462:5277":{"id":"0:3462:5277","crate_id":0,"name":"Cursor","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1142,0],"end":[1146,1]},"visibility":"public","docs":"A cursor over a `LinkedList`.\n\nA `Cursor` is like an iterator, except that it can freely seek back-and-forth.\n\nCursors always rest between two elements in the list, and index in a logically circular way.\nTo accommodate this, there is a \"ghost\" non-element that yields `None` between the head and\ntail of the list.\n\nWhen created, cursors start at the front of the list, or the \"ghost\" non-element if the list is empty.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:3483","a:1:2708:2329-0:3462:5277","a:1:7709:3766-0:3462:5277","a:1:7710:3767-0:3462:5277","b:0:671-0:3462:5277","b:1:2510-0:3462:5277","b:1:2505-0:3462:5277","b:1:2216-0:3462:5277","b:1:3303-0:3462:5277","b:1:2219-0:3462:5277","b:1:2499-0:3462:5277","b:1:2495-0:3462:5277","0:3468","0:3471","0:3667","0:3669"]}},"0:3390:4093":{"id":"0:3390:4093","crate_id":0,"name":"iter_mut","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[526,4],"end":[528,5]},"visibility":"public","docs":"Provides a forward iterator with mutable references.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut list: LinkedList<u32> = LinkedList::new();\n\nlist.push_back(0);\nlist.push_back(1);\nlist.push_back(2);\n\nfor element in list.iter_mut() {\n    *element += 10;\n}\n\nlet mut iter = list.iter();\nassert_eq!(iter.next(), Some(&10));\nassert_eq!(iter.next(), Some(&11));\nassert_eq!(iter.next(), Some(&12));\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3352:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4351":{"id":"0:4351","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[719,0],"end":[723,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4352:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:342":{"id":"0:342","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1243,0],"end":[1249,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:344:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4105:4093":{"id":"0:4105:4093","crate_id":0,"name":"iter_mut","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1116,4],"end":[1119,5]},"visibility":"public","docs":"Returns a front-to-back iterator that returns mutable references.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(5);\nbuf.push_back(3);\nbuf.push_back(4);\nfor num in buf.iter_mut() {\n    *num = *num - 2;\n}\nlet b: &[_] = &[&mut 3, &mut 1, &mut 2];\nassert_eq!(&buf.iter_mut().collect::<Vec<&mut i32>>()[..], b);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1634:2753":{"id":"0:1634:2753","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1734,4],"end":[1736,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1385:3820":{"id":"0:1385:3820","crate_id":0,"name":"Values","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[451,0],"end":[453,1]},"visibility":"public","docs":"An iterator over the values of a `BTreeMap`.\n\nThis `struct` is created by the [`values`] method on [`BTreeMap`]. See its\ndocumentation for more.\n\n[`values`]: BTreeMap::values","links":{"`BTreeMap`":"0:1301:94","BTreeMap::values":"0:1919:1502"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:1385:3820","a:1:2644:214-0:1385:3820","a:1:2708:2329-0:1385:3820","a:1:7709:3766-0:1385:3820","a:1:7710:3767-0:1385:3820","b:0:671-0:1385:3820","b:1:7020-0:1385:3820","b:1:2510-0:1385:3820","b:1:2505-0:1385:3820","b:1:2216-0:1385:3820","b:1:3303-0:1385:3820","b:1:2219-0:1385:3820","b:1:2499-0:1385:3820","b:1:2495-0:1385:3820","0:1390","0:1654","0:1663","0:1669","0:1673","0:1676"]}},"0:516":{"id":"0:516","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1971,0],"end":[1978,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:519:782","0:520:2762"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11315:40308":{"id":"1:11315:40308","crate_id":1,"name":"floor_char_boundary","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[258,4],"end":[258,60]},"visibility":"public","docs":"Finds the closest `x` not exceeding `index` where `is_char_boundary(x)` is `true`.\n\nThis method can help you truncate a string so that it's still valid UTF-8, but doesn't\nexceed a given number of bytes. Note that this is done purely at the character level\nand can still visually split graphemes, even though the underlying characters aren't\nsplit. For example, the emoji 🧑‍🔬 (scientist) could be split so that the string only\nincludes 🧑 (person) instead.\n\n# Examples\n\n```\n#![feature(round_char_boundary)]\nlet s = \"❤️🧡💛💚💙💜\";\nassert_eq!(s.len(), 26);\nassert!(!s.is_char_boundary(13));\n\nlet closest = s.floor_char_boundary(13);\nassert_eq!(closest, 10);\nassert_eq!(&s[..closest], \"❤️🧡\");\n```","links":{},"attrs":["#[unstable(feature = \"round_char_boundary\", issue = \"93743\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6500:5901":{"id":"0:6500:5901","crate_id":0,"name":"resize_with","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2161,4],"end":[2171,5]},"visibility":"public","docs":"Resizes the `Vec` in-place so that `len` is equal to `new_len`.\n\nIf `new_len` is greater than `len`, the `Vec` is extended by the\ndifference, with each additional slot filled with the result of\ncalling the closure `f`. The return values from `f` will end up\nin the `Vec` in the order they have been generated.\n\nIf `new_len` is less than `len`, the `Vec` is simply truncated.\n\nThis method uses a closure to create new values on every push. If\nyou'd rather [`Clone`] a given value, use [`Vec::resize`]. If you\nwant to use the [`Default`] trait to generate values, you can\npass [`Default::default`] as the second argument.\n\n# Examples\n\n```\nlet mut vec = vec![1, 2, 3];\nvec.resize_with(5, Default::default);\nassert_eq!(vec, [1, 2, 3, 0, 0]);\n\nlet mut vec = vec![];\nlet mut p = 1;\nvec.resize_with(4, || { p *= 2; p });\nassert_eq!(vec, [2, 4, 8, 16]);\n```","links":{"`Vec::resize`":"0:6510:6045","`Clone`":"1:2233:105","`Default`":"1:2546:114","`Default::default`":"1:2547:59"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"vec_resize_with\", since = \"1.33.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["new_len",{"kind":"primitive","inner":"usize"}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2908:95":{"id":"0:2908:95","crate_id":0,"name":"BTreeSet","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[81,0],"end":[86,1]},"visibility":"public","docs":"An ordered set based on a B-Tree.\n\nSee [`BTreeMap`]'s documentation for a detailed discussion of this collection's performance\nbenefits and drawbacks.\n\nIt is a logic error for an item to be modified in such a way that the item's ordering relative\nto any other item, as determined by the [`Ord`] trait, changes while it is in the set. This is\nnormally only possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\nThe behavior resulting from such a logic error is not specified, but will be encapsulated to the\n`BTreeSet` that observed the logic error and not result in undefined behavior. This could\ninclude panics, incorrect results, aborts, memory leaks, and non-termination.\n\nIterators returned by [`BTreeSet::iter`] produce their items in order, and take worst-case\nlogarithmic and amortized constant time per item returned.\n\n[`Ord`]: core::cmp::Ord\n[`Cell`]: core::cell::Cell\n[`RefCell`]: core::cell::RefCell\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\n// Type inference lets us omit an explicit type signature (which\n// would be `BTreeSet<&str>` in this example).\nlet mut books = BTreeSet::new();\n\n// Add some books.\nbooks.insert(\"A Dance With Dragons\");\nbooks.insert(\"To Kill a Mockingbird\");\nbooks.insert(\"The Odyssey\");\nbooks.insert(\"The Great Gatsby\");\n\n// Check for a specific one.\nif !books.contains(\"The Winds of Winter\") {\n    println!(\"We have {} books, but The Winds of Winter ain't one.\",\n             books.len());\n}\n\n// Remove a book.\nbooks.remove(\"The Odyssey\");\n\n// Iterate over everything.\nfor book in &books {\n    println!(\"{book}\");\n}\n```\n\nA `BTreeSet` with a known list of items can be initialized from an array:\n\n```\nuse std::collections::BTreeSet;\n\nlet set = BTreeSet::from([1, 2, 3]);\n```","links":{"core::cell::Cell":"1:4108:7101","core::cmp::Ord":"1:2299:176","core::cell::RefCell":"1:4173:201","`BTreeMap`":"0:1301:94","`BTreeSet::iter`":"0:3063:768"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"BTreeSet\"]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:3013","0:3016","a:1:2658:222-0:2908:95","a:1:2644:214-0:2908:95","a:1:2708:2329-0:2908:95","a:1:7709:3766-0:2908:95","a:1:7710:3767-0:2908:95","b:0:671-0:2908:95","b:1:2510-0:2908:95","b:1:2505-0:2908:95","b:1:2216-0:2908:95","b:1:3303-0:2908:95","b:1:2219-0:2908:95","b:1:2499-0:2908:95","b:1:2495-0:2908:95","0:2912","0:2917","0:2921","0:2924","0:2928","0:2932","0:3066","0:3076","0:3083","0:3089","0:3129","0:3136","0:3143","0:3146","0:3151","0:3156","0:3161","0:3166"]}},"0:3248":{"id":"0:3248","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1675,0],"end":[1698,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:2970:4926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3251:2750","0:3252:921","0:3253:2751","0:3254:4091"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:699":{"id":"0:699","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[347,0],"end":[347,58]},"visibility":{"restricted":{"parent":"0:648:1793","path":"::borrow"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4859":{"id":"0:4859","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[60,31],"end":[60,43]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rchunks\", since = \"1.31.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::RChunksExact","name":"RChunksExact","id":"1:49865:7694","glob":false}},"b:1:2216-0:6734:3475":{"id":"b:1:2216-0:6734:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3170":{"id":"0:3170","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1490,0],"end":[1494,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3172:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3247:409":{"id":"0:3247:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1670,4],"end":[1672,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4258":{"id":"0:4258","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[27,4],"end":[27,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"super::btree::set","name":"set","id":"0:2871:3015","glob":true}},"0:1545":{"id":"0:1545","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1551,0],"end":[1578,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:1348:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1549:2750","0:1550:921","0:1551:2751","0:1552:2753","0:1553:4091","0:1554:2120"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3303-0:676:109":{"id":"b:1:3303-0:676:109","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1455":{"id":"0:1455","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[639,0],"end":[1469,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1459:3294","0:1461:3874","0:1463:3882","0:1464:3893","0:1465:3901","0:1467:3906","0:1468:3914","0:1469:3920","0:1471:3924","0:1473:3929","0:1475:3797","0:1476:3957","0:1477:3521","0:1480:3902","0:1482:3348","0:1485:3320","0:1487:3801","0:1490:4017","0:1493:3668","0:1494:4039","0:1496:3974","0:1499:4080","0:1500:4087"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6960":{"id":"0:6960","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[225,9],"end":[225,14]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6961:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:7020:595":{"id":"0:7020:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[2253,0],"end":[2253,28]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3842":{"id":"0:3842","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[163,0],"end":[163,47]},"visibility":{"restricted":{"parent":"0:3783:4093","path":"::collections::vec_deque::iter_mut"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"trusted_len\", issue = \"37572\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TrustedLen","id":"1:7403:3146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3303-0:1435:3845":{"id":"b:1:3303-0:1435:3845","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangeMut","id":"0:1435:3845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2658:222-0:3794:3805":{"id":"a:1:2658:222-0:3794:3805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1878":{"id":"0:1878","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2176,0],"end":[2176,68]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2644:214-0:6734:3475":{"id":"a:1:2644:214-0:6734:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2216-0:6749:3449":{"id":"b:1:2216-0:6749:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:6749:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5110:6387":{"id":"0:5110:6387","crate_id":0,"name":"into_string","span":{"filename":"library/alloc/src/str.rs","begin":[502,4],"end":[505,5]},"visibility":"public","docs":"Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```","links":{"`Box<str>`":"0:276:1792","`String`":"0:6980:218"},"attrs":["#[stable(feature = \"box_str\", since = \"1.4.0\")]","#[rustc_allow_incoherent_impl]","#[must_use = \"`self` will be dropped if the result is not used\"]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7050:595":{"id":"0:7050:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[2259,0],"end":[2259,33]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4160:6037":{"id":"0:4160:6037","crate_id":0,"name":"partition_point","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2583,4],"end":[2594,5]},"visibility":"public","docs":"Returns the index of the partition point according to the given predicate\n(the index of the first element of the second partition).\n\nThe deque is assumed to be partitioned according to the given predicate.\nThis means that all elements for which the predicate returns true are at the start of the deque\nand all elements for which the predicate returns false are at the end.\nFor example, `[7, 15, 3, 5, 4, 12, 6]` is partitioned under the predicate `x % 2 != 0`\n(all odd numbers are at the start, all even at the end).\n\nIf the deque is not partitioned, the returned result is unspecified and meaningless,\nas this method performs a kind of binary search.\n\nSee also [`binary_search`], [`binary_search_by`], and [`binary_search_by_key`].\n\n[`binary_search`]: VecDeque::binary_search\n[`binary_search_by`]: VecDeque::binary_search_by\n[`binary_search_by_key`]: VecDeque::binary_search_by_key\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<_> = [1, 2, 3, 3, 5, 6, 7].into();\nlet i = deque.partition_point(|&x| x < 5);\n\nassert_eq!(i, 4);\nassert!(deque.iter().take(i).all(|&x| x < 5));\nassert!(deque.iter().skip(i).all(|&x| !(x < 5)));\n```\n\nIf you want to insert an item to a sorted deque, while maintaining\nsort order:\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque: VecDeque<_> = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].into();\nlet num = 42;\nlet idx = deque.partition_point(|&x| x < num);\ndeque.insert(idx, num);\nassert_eq!(deque, &[0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 42, 55]);\n```","links":{"VecDeque::binary_search_by":"0:4149:5992","VecDeque::binary_search_by_key":"0:4155:6020","VecDeque::binary_search":"0:4147:5991"},"attrs":["#[stable(feature = \"vecdeque_binary_search\", since = \"1.54.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pred",{"kind":"generic","inner":"P"}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3009":{"id":"0:3009","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[318,0],"end":[322,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:3004:4940","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3011:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6607:3475":{"id":"0:6607:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2755,4],"end":[2755,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"a:1:2658:222-0:1435:3845":{"id":"a:1:2658:222-0:1435:3845","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangeMut","id":"0:1435:3845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2708:2329-0:6991:8288":{"id":"a:1:2708:2329-0:6991:8288","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5546":{"id":"0:5546","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[315,0],"end":[319,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"arc_weak\", since = \"1.4.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5548:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3574:2759":{"id":"0:3574:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1800,4],"end":[1802,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1192:1545":{"id":"0:1192:1545","crate_id":0,"name":"0","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[28,57],"end":[28,81]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:1201:3672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}},"0:3176:2750":{"id":"0:3176:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1497,4],"end":[1497,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"0:347:59":{"id":"0:347:59","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/boxed.rs","begin":[1255,4],"end":[1258,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:568":{"id":"0:568","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2059,0],"end":[2063,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(since = \"1.5.0\", feature = \"smart_ptr_as_ref\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2466:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:571:2784"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1384:650":{"id":"0:1384:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[438,4],"end":[440,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5193:8568":{"id":"0:5193:8568","crate_id":0,"name":"remove_matches","span":{"filename":"library/alloc/src/string.rs","begin":[1372,4],"end":[1422,5]},"visibility":"public","docs":"Remove all matches of pattern `pat` in the `String`.\n\n# Examples\n\n```\n#![feature(string_remove_matches)]\nlet mut s = String::from(\"Trees are not green, the sky is not blue.\");\ns.remove_matches(\"not \");\nassert_eq!(\"Trees are green, the sky is blue.\", s);\n```\n\nMatches will be detected and removed iteratively, so in cases where\npatterns overlap, only the first pattern will be removed:\n\n```\n#![feature(string_remove_matches)]\nlet mut s = String::from(\"banana\");\ns.remove_matches(\"ana\");\nassert_eq!(\"bna\", s);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"string_remove_matches\", reason = \"new API\", issue =\n\"72826\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'x"}],"bindings":[]}}},"generic_params":[{"name":"'x","kind":{"lifetime":{"outlives":[]}}}],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:6897:102":{"id":"b:1:2216-0:6897:102","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6438:283":{"id":"0:6438:283","crate_id":0,"name":"allocator","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1285,4],"end":[1287,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4636:224":{"id":"0:4636:224","crate_id":0,"name":"Target","span":{"filename":"library/alloc/src/rc.rs","begin":[1550,4],"end":[1550,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:4864":{"id":"0:4864","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[62,30],"end":[62,39]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::RSplitMut","name":"RSplitMut","id":"1:9499:7700","glob":false}},"0:4581:7249":{"id":"0:4581:7249","crate_id":0,"name":"downgrade","span":{"filename":"library/alloc/src/rc.rs","begin":[938,4],"end":[943,5]},"visibility":"public","docs":"Creates a new [`Weak`] pointer to this allocation.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nlet weak_five = Rc::downgrade(&five);\n```","links":{"`Weak`":"0:4737:7157"},"attrs":["#[must_use =\n\"this returns a new `Weak` pointer, \\\n                  without modifying the original `Rc`\"]","#[stable(feature = \"rc_weak\", since = \"1.4.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4040":{"id":"0:4040","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[148,0],"end":[154,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4042:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5987:307":{"id":"0:5987:307","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[143,4],"end":[145,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4940:180":{"id":"0:4940:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/slice.rs","begin":[693,4],"end":[693,16]},"visibility":"default","docs":"The resulting type after concatenation","links":{},"attrs":["#[unstable(feature = \"slice_concat_trait\", issue = \"27747\")]"],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":null}},"0:834:2111":{"id":"0:834:2111","crate_id":0,"name":"shrink_to_fit","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1060,4],"end":[1062,5]},"visibility":"public","docs":"Discards as much additional capacity as possible.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap: BinaryHeap<i32> = BinaryHeap::with_capacity(100);\n\nassert!(heap.capacity() >= 100);\nheap.shrink_to_fit();\nassert!(heap.capacity() == 0);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:7020-0:3004:4940":{"id":"b:1:7020-0:3004:4940","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:3004:4940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:4579:306":{"id":"0:4579:306","crate_id":0,"name":"as_ptr","span":{"filename":"library/alloc/src/rc.rs","begin":[869,4],"end":[876,5]},"visibility":"public","docs":"Provides a raw pointer to the data.\n\nThe counts are not affected in any way and the `Rc` is not consumed. The pointer is valid\nfor as long there are strong counts in the `Rc`.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet x = Rc::new(\"hello\".to_owned());\nlet y = Rc::clone(&x);\nlet x_ptr = Rc::as_ptr(&x);\nassert_eq!(x_ptr, Rc::as_ptr(&y));\nassert_eq!(unsafe { &*x_ptr }, \"hello\");\n```","links":{},"attrs":["#[stable(feature = \"weak_into_raw\", since = \"1.45.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4449":{"id":"0:4449","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[569,20],"end":[569,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::Formatter","name":"Formatter","id":"1:8528:130","glob":false}},"0:6592:180":{"id":"0:6592:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2723,4],"end":[2723,28]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9110:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}}}}},"0:4933:7848":{"id":"0:4933:7848","crate_id":0,"name":"to_ascii_lowercase","span":{"filename":"library/alloc/src/slice.rs","begin":[637,4],"end":[641,5]},"visibility":"public","docs":"Returns a vector containing a copy of this slice where each byte\nis mapped to its ASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\n[`make_ascii_lowercase`]: slice::make_ascii_lowercase","links":{"slice::make_ascii_lowercase":"1:8968:7849"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[must_use =\n\"this returns the lowercase bytes as a new Vec, \\\n                  without modifying the original\"]","#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3620:595":{"id":"0:3620:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1890,4],"end":[1892,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1805:782":{"id":"0:1805:782","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2050,4],"end":[2052,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:1185:3669":{"id":"a:1:7710:3767-0:1185:3669","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:1185:3669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2510-0:276:1792":{"id":"b:1:2510-0:276:1792","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1520:2120":{"id":"0:1520:2120","crate_id":0,"name":"max","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1506,4],"end":[1508,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5455:1364":{"id":"0:5455:1364","crate_id":0,"name":"sync","span":{"filename":"library/alloc/src/sync.rs","begin":[1,0],"end":[2820,1]},"visibility":"public","docs":"Thread-safe reference-counting pointers.\n\nSee the [`Arc<T>`][Arc] documentation for more details.\n\n**Note**: This module is only available on platforms that support atomic\nloads and stores of pointers. This may be detected at compile time using\n`#[cfg(target_has_atomic = \"ptr\")]`.","links":{"Arc":"0:5513:69"},"attrs":["#[cfg(all(not(no_rc), not(no_sync), target_has_atomic = \"ptr\"))]","#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:5513:69","0:5533:7157"],"is_stripped":false}},"0:6749:3449":{"id":"0:6749:3449","crate_id":0,"name":"Drain","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1479,0],"end":[1481,1]},"visibility":"public","docs":"A draining iterator over the elements of a `BinaryHeap`.\n\nThis `struct` is created by [`BinaryHeap::drain()`]. See its\ndocumentation for more.\n\n[`drain`]: BinaryHeap::drain","links":{"`BinaryHeap::drain()`":"0:840:3448"},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:6749:3449","a:1:2644:214-0:6749:3449","a:1:2708:2329-0:6749:3449","a:1:7709:3766-0:6749:3449","a:1:7710:3767-0:6749:3449","b:1:7020-0:6749:3449","b:1:2510-0:6749:3449","b:1:2505-0:6749:3449","b:1:2216-0:6749:3449","b:1:3303-0:6749:3449","b:1:2219-0:6749:3449","b:1:2499-0:6749:3449","b:1:2495-0:6749:3449","0:6753","0:922","0:927","0:930","0:933"]}},"0:1409":{"id":"0:1409","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[494,0],"end":[498,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:1404:3833","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1413:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5324":{"id":"0:5324","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2366,0],"end":[2373,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:2969:3662","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeTo","id":"1:46365:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5325:180","0:5326:742"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2499-0:3794:3805":{"id":"b:1:2499-0:3794:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5994":{"id":"0:5994","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[154,0],"end":[165,1]},"visibility":{"restricted":{"parent":"0:5946:3448","path":"::vec::drain"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:5997:2750","0:5998:921","0:6000:2751"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2510-0:6991:8288":{"id":"b:1:2510-0:6991:8288","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:935":{"id":"0:935","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1529,0],"end":[1546,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainSorted","id":"0:6757:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:938:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4695:668":{"id":"0:4695:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/rc.rs","begin":[1907,4],"end":[1909,5]},"visibility":"default","docs":"Converts a generic type `T` into an `Rc<T>`\n\nThe conversion allocates on the heap and moves `t`\nfrom the stack into it.\n\n# Example\n```rust\n# use std::rc::Rc;\nlet x = 5;\nlet rc = Rc::new(5);\n\nassert_eq!(Rc::from(x), rc);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6664:571":{"id":"0:6664:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3049,4],"end":[3057,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3032:4997":{"id":"0:3032:4997","crate_id":0,"name":"contains","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[616,4],"end":[622,5]},"visibility":"public","docs":"Returns `true` if the set contains an element equal to the value.\n\nThe value may be any borrowed form of the set's element type,\nbut the ordering on the borrowed form *must* match the\nordering on the element type.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet set = BTreeSet::from([1, 2, 3]);\nassert_eq!(set.contains(&1), true);\nassert_eq!(set.contains(&4), false);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:771:3221":{"id":"a:1:7710:3767-0:771:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PeekMut","id":"0:771:3221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:617:668":{"id":"0:617:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[2253,4],"end":[2255,5]},"visibility":"default","docs":"Converts a type of [`Error`] + [`Send`] + [`Sync`] into a box of\ndyn [`Error`] + [`Send`] + [`Sync`].\n\n# Examples\n\n```\nuse std::error::Error;\nuse std::fmt;\nuse std::mem;\n\n#[derive(Debug)]\nstruct AnError;\n\nimpl fmt::Display for AnError {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        write!(f, \"An error\")\n    }\n}\n\nimpl Error for AnError {}\n\nunsafe impl Send for AnError {}\n\nunsafe impl Sync for AnError {}\n\nlet an_error = AnError;\nassert!(0 == mem::size_of_val(&an_error));\nlet a_boxed_error = Box::<dyn Error + Send + Sync>::from(an_error);\nassert!(\n    mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n```","links":{"`Send`":"1:2644:214","`Sync`":"1:2658:222","`Error`":"1:2560:126"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["err",{"kind":"generic","inner":"E"}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5433":{"id":"0:5433","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2904,0],"end":[2904,33]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6121:2751":{"id":"0:6121:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[206,4],"end":[213,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:4737:7157":{"id":"b:1:2219-0:4737:7157","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:932:2762":{"id":"0:932:2762","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1508,4],"end":[1510,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5256":{"id":"0:5256","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2061,0],"end":[2077,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"herd_cows\", since = \"1.19.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7012:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5258:670"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:0:671-0:3328:157":{"id":"b:0:671-0:3328:157","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3303-0:276:1792":{"id":"b:1:3303-0:276:1792","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:453":{"id":"0:453","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1754,0],"end":[1811,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:455:2731","0:457:2733"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4268":{"id":"0:4268","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[65,0],"end":[77,1]},"visibility":{"restricted":{"parent":"0:744:1794","path":"::collections"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4269:771"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1185:3669":{"id":"0:1185:3669","crate_id":0,"name":"Entry","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[20,0],"end":[33,1]},"visibility":"public","docs":"A view into a single entry in a map, which may either be vacant or occupied.\n\nThis `enum` is constructed from the [`entry`] method on [`BTreeMap`].\n\n[`entry`]: BTreeMap::entry","links":{"`BTreeMap`":"0:1301:94","BTreeMap::entry":"0:1493:3668"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"BTreeEntry\"]"],"deprecation":null,"kind":"enum","inner":{"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"variants_stripped":false,"variants":["0:1190:3944","0:1193:3943"],"impls":["0:1253","0:1266","a:1:2658:222-0:1185:3669","a:1:2644:214-0:1185:3669","a:1:2708:2329-0:1185:3669","a:1:7709:3766-0:1185:3669","a:1:7710:3767-0:1185:3669","b:1:2510-0:1185:3669","b:1:2505-0:1185:3669","b:1:2216-0:1185:3669","b:1:3303-0:1185:3669","b:1:2219-0:1185:3669","b:1:2499-0:1185:3669","b:1:2495-0:1185:3669","0:1196"]}},"0:440:1418":{"id":"0:440:1418","crate_id":0,"name":"try_from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1653,4],"end":[1659,5]},"visibility":"default","docs":"Attempts to convert a `Box<[T]>` into a `Box<[T; N]>`.\n\nThe conversion occurs in-place and does not require a\nnew memory allocation.\n\n# Errors\n\nReturns the old `Box<[T]>` in the `Err` variant if\n`boxed_slice.len()` does not equal `N`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["boxed_slice",{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:2479:230","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:572":{"id":"0:572","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2088,0],"end":[2088,69]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"pin\", since = \"1.33.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2499-0:6869:1971":{"id":"b:1:2499-0:6869:1971","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6690:668":{"id":"0:6690:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3117,4],"end":[3119,5]},"visibility":"default","docs":"Allocate a `Vec<T>` and fill it by cloning `s`'s items.\n\n# Examples\n\n```\nassert_eq!(Vec::from(&[1, 2, 3][..]), vec![1, 2, 3]);\n```","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6731:59":{"id":"0:6731:59","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/alloc.rs","begin":[53,22],"end":[53,29]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11312:782":{"id":"1:11312:782","crate_id":1,"name":"len","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[159,4],"end":[159,36]},"visibility":"public","docs":"Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```","links":{"prim@char":"1:58430:10458"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2658:222-0:6881:1972":{"id":"a:1:2658:222-0:6881:1972","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:0:671-0:6957:6203":{"id":"b:0:671-0:6957:6203","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6826":{"id":"0:6826","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[15,9],"end":[15,14]},"visibility":{"restricted":{"parent":"0:3850:757","path":"::collections::vec_deque::into_iter"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::clone::Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6829:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5190:5696":{"id":"0:5190:5696","crate_id":0,"name":"truncate","span":{"filename":"library/alloc/src/string.rs","begin":[1277,4],"end":[1282,5]},"visibility":"public","docs":"Shortens this `String` to the specified length.\n\nIf `new_len` is greater than the string's current length, this has no\neffect.\n\nNote that this method has no effect on the allocated capacity\nof the string\n\n# Panics\n\nPanics if `new_len` does not lie on a [`char`] boundary.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"hello\");\n\ns.truncate(2);\n\nassert_eq!(\"he\", s);\n```","links":{"`char`":"1:58430:10458"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["new_len",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3782":{"id":"0:3782","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[40,0],"end":[40,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"self::iter_mut::IterMut","name":"IterMut","id":"0:3794:3805","glob":false}},"a:1:2644:214-0:6944:6202":{"id":"a:1:2644:214-0:6944:6202","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:7256:595":{"id":"0:7256:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[29,0],"end":[29,118]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:868:409":{"id":"0:868:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1318,4],"end":[1320,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:3004:4940":{"id":"b:1:2495-0:3004:4940","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:3004:4940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:276:1792":{"id":"0:276:1792","crate_id":0,"name":"Box","span":{"filename":"library/alloc/src/boxed.rs","begin":[198,0],"end":[201,16]},"visibility":"public","docs":"A pointer type that uniquely owns a heap allocation of type `T`.\n\nSee the [module-level documentation](../../std/boxed/index.html) for more.","links":{},"attrs":["#[lang = \"owned_box\"]","#[fundamental]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null,null]},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:282","0:291","0:304","0:310","0:315","0:320","0:324","0:327","0:447","0:453","0:459","a:1:2658:222-0:276:1792","a:1:2644:214-0:276:1792","a:1:7709:3766-0:276:1792","a:1:7710:3767-0:276:1792","b:0:5362-0:276:1792","b:0:671-0:276:1792","b:1:2567-0:276:1792","b:1:7020-0:276:1792","b:1:2510-0:276:1792","b:1:2505-0:276:1792","b:1:11612-0:276:1792","b:1:2216-0:276:1792","b:1:11154-0:276:1792","b:1:3303-0:276:1792","b:1:2219-0:276:1792","b:1:2502-0:276:1792","b:1:2499-0:276:1792","b:1:2495-0:276:1792","0:338","0:342","0:345","0:349","0:352","0:357","0:359","0:364","0:372","0:376","0:379","0:384","0:403","0:406","0:410","0:413","0:416","0:418","0:420","0:423","0:435","0:441","0:465","0:469","0:473","0:477","0:482","0:489","0:511","0:516","0:521","0:524","0:530","0:535","0:540","0:544","0:547","0:551","0:556","0:560","0:564","0:568","0:572","0:575","0:582","0:589","0:594","0:610","0:614","0:618","0:629","0:631","0:634","0:636","0:640","0:643","0:4362","0:4364","0:4366","0:4370","0:4372","0:4391","0:4703","0:5253","0:5278","0:5390","0:5392","0:5751","0:6704","0:6708"]}},"0:5810:9270":{"id":"0:5810:9270","crate_id":0,"name":"Wake","span":{"filename":"library/alloc/src/task.rs","begin":[76,0],"end":[92,1]},"visibility":"public","docs":"The implementation of waking a task on an executor.\n\nThis trait can be used to create a [`Waker`]. An executor can define an\nimplementation of this trait, and use that to construct a Waker to pass\nto the tasks that are executed on that executor.\n\nThis trait is a memory-safe and ergonomic alternative to constructing a\n[`RawWaker`]. It supports the common executor design in which the data used\nto wake up a task is stored in an [`Arc`]. Some executors (especially\nthose for embedded systems) cannot use this API, which is why [`RawWaker`]\nexists as an alternative for those systems.\n\n[arc]: ../../std/sync/struct.Arc.html\n\n# Examples\n\nA basic `block_on` function that takes a future and runs it to completion on\nthe current thread.\n\n**Note:** This example trades correctness for simplicity. In order to prevent\ndeadlocks, production-grade implementations will also need to handle\nintermediate calls to `thread::unpark` as well as nested invocations.\n\n```rust\nuse std::future::Future;\nuse std::sync::Arc;\nuse std::task::{Context, Poll, Wake};\nuse std::thread::{self, Thread};\n\n/// A waker that wakes up the current thread when called.\nstruct ThreadWaker(Thread);\n\nimpl Wake for ThreadWaker {\n    fn wake(self: Arc<Self>) {\n        self.0.unpark();\n    }\n}\n\n/// Run a future to completion on the current thread.\nfn block_on<T>(fut: impl Future<Output = T>) -> T {\n    // Pin the future so it can be polled.\n    let mut fut = Box::pin(fut);\n\n    // Create a new context to be passed to the future.\n    let t = thread::current();\n    let waker = Arc::new(ThreadWaker(t)).into();\n    let mut cx = Context::from_waker(&waker);\n\n    // Run the future to completion.\n    loop {\n        match fut.as_mut().poll(&mut cx) {\n            Poll::Ready(res) => return res,\n            Poll::Pending => thread::park(),\n        }\n    }\n}\n\nblock_on(async {\n    println!(\"Hi from inside a future!\");\n});\n```","links":{"`RawWaker`":"1:50922:9229","`Arc`":"0:5513:69","`Waker`":"1:11834:9231"},"attrs":["#[stable(feature = \"wake_trait\", since = \"1.51.0\")]"],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:5811:9272","0:5812:9278"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":[]}},"0:5800:2625":{"id":"0:5800:2625","crate_id":0,"name":"source","span":{"filename":"library/alloc/src/sync.rs","begin":[2813,4],"end":[2815,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"core::error::Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3382":{"id":"0:3382","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[401,0],"end":[407,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3384:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:50508:8712":{"id":"1:50508:8712","crate_id":1,"name":"strip_prefix_of","span":{"filename":"/rust-lang-rust/library/core/src/str/pattern.rs","begin":[910,4],"end":[910,93]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1259:4202":{"id":"0:1259:4202","crate_id":0,"name":"or_insert_with","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[184,4],"end":[189,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, String> = BTreeMap::new();\nlet s = \"hoho\".to_string();\n\nmap.entry(\"poneyland\").or_insert_with(|| s);\n\nassert_eq!(map[\"poneyland\"], \"hoho\".to_string());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["default",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2920:2768","args":{"parenthesized":{"inputs":[],"output":{"kind":"generic","inner":"V"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1521":{"id":"0:1521","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1512,0],"end":[1512,46]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1845":{"id":"0:1845","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2122,0],"end":[2134,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7025:3507","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1849:2885","0:1852:1746"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:768:96":{"id":"0:768:96","crate_id":0,"name":"BinaryHeap","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[268,0],"end":[270,1]},"visibility":"public","docs":"A priority queue implemented with a binary heap.\n\nThis will be a max-heap.\n\nIt is a logic error for an item to be modified in such a way that the\nitem's ordering relative to any other item, as determined by the [`Ord`]\ntrait, changes while it is in the heap. This is normally only possible\nthrough [`Cell`], [`RefCell`], global state, I/O, or unsafe code. The\nbehavior resulting from such a logic error is not specified, but will\nbe encapsulated to the `BinaryHeap` that observed the logic error and not\nresult in undefined behavior. This could include panics, incorrect results,\naborts, memory leaks, and non-termination.\n\n# Examples\n\n```\nuse std::collections::BinaryHeap;\n\n// Type inference lets us omit an explicit type signature (which\n// would be `BinaryHeap<i32>` in this example).\nlet mut heap = BinaryHeap::new();\n\n// We can use peek to look at the next item in the heap. In this case,\n// there's no items in there yet so we get None.\nassert_eq!(heap.peek(), None);\n\n// Let's add some scores...\nheap.push(1);\nheap.push(5);\nheap.push(2);\n\n// Now peek shows the most important item in the heap.\nassert_eq!(heap.peek(), Some(&5));\n\n// We can check the length of a heap.\nassert_eq!(heap.len(), 3);\n\n// We can iterate over the items in the heap, although they are returned in\n// a random order.\nfor x in &heap {\n    println!(\"{x}\");\n}\n\n// If we instead pop these scores, they should come back in order.\nassert_eq!(heap.pop(), Some(5));\nassert_eq!(heap.pop(), Some(2));\nassert_eq!(heap.pop(), Some(1));\nassert_eq!(heap.pop(), None);\n\n// We can clear the heap of any remaining items.\nheap.clear();\n\n// The heap should now be empty.\nassert!(heap.is_empty())\n```\n\nA `BinaryHeap` with a known list of items can be initialized from an array:\n\n```\nuse std::collections::BinaryHeap;\n\nlet heap = BinaryHeap::from([1, 5, 2]);\n```\n\n## Min-heap\n\nEither [`core::cmp::Reverse`] or a custom [`Ord`] implementation can be used to\nmake `BinaryHeap` a min-heap. This makes `heap.pop()` return the smallest\nvalue instead of the greatest one.\n\n```\nuse std::collections::BinaryHeap;\nuse std::cmp::Reverse;\n\nlet mut heap = BinaryHeap::new();\n\n// Wrap values in `Reverse`\nheap.push(Reverse(1));\nheap.push(Reverse(5));\nheap.push(Reverse(2));\n\n// If we pop these scores now, they should come back in the reverse order.\nassert_eq!(heap.pop(), Some(Reverse(1)));\nassert_eq!(heap.pop(), Some(Reverse(2)));\nassert_eq!(heap.pop(), Some(Reverse(5)));\nassert_eq!(heap.pop(), None);\n```\n\n# Time complexity\n\n| [push]  | [pop]         | [peek]/[peek\\_mut] |\n|---------|---------------|--------------------|\n| *O*(1)~ | *O*(log(*n*)) | *O*(1)             |\n\nThe value for `push` is an expected cost; the method documentation gives a\nmore detailed analysis.\n\n[`core::cmp::Reverse`]: core::cmp::Reverse\n[`Ord`]: core::cmp::Ord\n[`Cell`]: core::cell::Cell\n[`RefCell`]: core::cell::RefCell\n[push]: BinaryHeap::push\n[pop]: BinaryHeap::pop\n[peek]: BinaryHeap::peek\n[peek\\_mut]: BinaryHeap::peek_mut","links":{"core::cmp::Ord":"1:2299:176","core::cell::Cell":"1:4108:7101","BinaryHeap::pop":"0:808:3231","BinaryHeap::peek_mut":"0:807:3255","core::cmp::Reverse":"1:38086:10688","BinaryHeap::peek":"0:828:3367","BinaryHeap::push":"0:810:3275","core::cell::RefCell":"1:4173:201"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"BinaryHeap\"]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:803","0:824","a:1:2658:222-0:768:96","a:1:2644:214-0:768:96","a:1:2708:2329-0:768:96","a:1:7709:3766-0:768:96","a:1:7710:3767-0:768:96","b:0:671-0:768:96","b:1:2510-0:768:96","b:1:2505-0:768:96","b:1:2216-0:768:96","b:1:3303-0:768:96","b:1:2219-0:768:96","b:1:2499-0:768:96","b:1:2495-0:768:96","0:793","0:797","0:800","0:961","0:964","0:970","0:973","0:977","0:982","0:988","0:1009"]}},"0:4348":{"id":"0:4348","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[709,0],"end":[716,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2886:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4349:224","0:4350:536"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2216-0:1415:3837":{"id":"b:1:2216-0:1415:3837","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:1415:3837","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4212:2750":{"id":"0:4212:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2758,4],"end":[2758,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"0:233":{"id":"0:233","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[102,0],"end":[106,1]},"visibility":{"restricted":{"parent":"0:194:2340","path":"::boxed::thin"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:235:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2708:2329-0:1230:3671":{"id":"a:1:2708:2329-0:1230:3671","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedError","id":"0:1230:3671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:7220:595":{"id":"0:7220:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[23,0],"end":[23,122]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"A2"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:313:2454":{"id":"0:313:2454","crate_id":0,"name":"new_uninit_slice_in","span":{"filename":"library/alloc/src/boxed.rs","begin":[765,4],"end":[767,5]},"visibility":"public","docs":"Constructs a new boxed slice with uninitialized contents in the provided allocator.\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nuse std::alloc::System;\n\nlet mut values = Box::<[u32], _>::new_uninit_slice_in(3, System);\n\nlet values = unsafe {\n    // Deferred initialization:\n    values[0].as_mut_ptr().write(1);\n    values[1].as_mut_ptr().write(2);\n    values[2].as_mut_ptr().write(3);\n\n    values.assume_init()\n};\n\nassert_eq!(*values, [1, 2, 3])\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["len",{"kind":"primitive","inner":"usize"}],["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11414:40324":{"id":"1:11414:40324","crate_id":1,"name":"strip_prefix","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[2140,4],"end":[2140,83]},"visibility":"public","docs":"Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```","links":{"prim@char":"1:58430:10458","self::pattern":"1:11013:1760"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["prefix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:2937:3356":{"id":"b:1:2499-0:2937:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2505-0:276:1792":{"id":"b:1:2505-0:276:1792","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:988":{"id":"0:988","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1658,0],"end":[1673,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7025:3507","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:990:2885","0:992:1746","0:993:3508"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4855":{"id":"0:4855","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[58,22],"end":[58,26]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::Iter","name":"Iter","id":"1:9257:3356","glob":false}},"0:933":{"id":"0:933","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1514,0],"end":[1514,41]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:6749:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:315":{"id":"0:315","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[798,0],"end":[871,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:318:329","0:319:2221"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:2514:1418":{"id":"1:2514:1418","crate_id":1,"name":"try_from","span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[781,4],"end":[781,54]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"U"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"T"},"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:560":{"id":"0:560","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2045,0],"end":[2049,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"box_borrow\", since = \"1.1.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:563:2781"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5387:668":{"id":"0:5387:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[2664,4],"end":[2666,5]},"visibility":"default","docs":"Converts a `&mut str` into a [`String`].\n\nThe result is allocated on the heap.","links":{"`String`":"0:6980:218"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:6944:6202":{"id":"b:1:2499-0:6944:6202","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3389:768":{"id":"0:3389:768","crate_id":0,"name":"iter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[497,4],"end":[499,5]},"visibility":"public","docs":"Provides a forward iterator.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut list: LinkedList<u32> = LinkedList::new();\n\nlist.push_back(0);\nlist.push_back(1);\nlist.push_back(2);\n\nlet mut iter = list.iter();\nassert_eq!(iter.next(), Some(&0));\nassert_eq!(iter.next(), Some(&1));\nassert_eq!(iter.next(), Some(&2));\nassert_eq!(iter.next(), None);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7010:595":{"id":"0:7010:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[2252,0],"end":[2252,24]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5326:742":{"id":"0:5326:742","crate_id":0,"name":"index","span":{"filename":"library/alloc/src/string.rs","begin":[2370,4],"end":[2372,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"resolved_path","inner":{"name":"ops::RangeTo","id":"1:46365:196","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6429:2105":{"id":"0:6429:2105","crate_id":0,"name":"try_reserve_exact","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1016,4],"end":[1018,5]},"visibility":"public","docs":"Tries to reserve the minimum capacity for at least `additional`\nelements to be inserted in the given `Vec<T>`. Unlike [`try_reserve`],\nthis will not deliberately over-allocate to speculatively avoid frequent\nallocations. After calling `try_reserve_exact`, capacity will be greater\nthan or equal to `self.len() + additional` if it returns `Ok(())`.\nDoes nothing if the capacity is already sufficient.\n\nNote that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer [`try_reserve`] if future insertions are expected.\n\n[`try_reserve`]: Vec::try_reserve\n\n# Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse std::collections::TryReserveError;\n\nfn process_data(data: &[u32]) -> Result<Vec<u32>, TryReserveError> {\n    let mut output = Vec::new();\n\n    // Pre-reserve the memory, exiting if we can't\n    output.try_reserve_exact(data.len())?;\n\n    // Now we know this can't OOM in the middle of our complex work\n    output.extend(data.iter().map(|&val| {\n        val * 2 + 5 // very complicated\n    }));\n\n    Ok(output)\n}\n# process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n```","links":{"Vec::try_reserve":"0:6428:2097"},"attrs":["#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:1216:3670":{"id":"b:1:2219-0:1216:3670","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:1216:3670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:0:5362-0:7002:8296":{"id":"b:0:5362-0:7002:8296","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2526,0],"end":[2540,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5360:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf16Error","id":"0:7002:8296","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5364:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2505-0:4521:198":{"id":"b:1:2505-0:4521:198","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4262":{"id":"0:4262","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[48,0],"end":[48,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"linked_list::LinkedList","name":"LinkedList","id":"0:3328:157","glob":false}},"0:786":{"id":"0:786","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[313,0],"end":[320,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:2899:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PeekMut","id":"0:771:3221","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:788:538"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:779":{"id":"0:779","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[293,0],"end":[300,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PeekMut","id":"0:771:3221","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:781:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1725":{"id":"0:1725","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1925,0],"end":[1925,94]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:1680:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2708:2329-0:5533:7157":{"id":"a:1:2708:2329-0:5533:7157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6745:409":{"id":"0:6745:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1441,9],"end":[1441,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1659:921":{"id":"0:1659:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1775,4],"end":[1777,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:6914:6204":{"id":"b:1:3303-0:6914:6204","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:496:2753":{"id":"0:496:2753","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/boxed.rs","begin":[1930,4],"end":[1932,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"","id":"1:7130:154","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1790:2750":{"id":"0:1790:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2026,4],"end":[2026,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"V"}}},"0:427:668":{"id":"0:427:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1618,4],"end":[1621,5]},"visibility":"default","docs":"Converts a `[T; N]` into a `Box<[T]>`\n\nThis conversion moves the array to newly heap-allocated memory.\n\n# Examples\n\n```rust\nlet boxed: Box<[u8]> = Box::from([4, 2]);\nprintln!(\"{boxed:?}\");\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["array",{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5639":{"id":"0:5639","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[1337,0],"end":[1383,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5641:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3445":{"id":"0:3445","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1079,0],"end":[1106,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3352:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3448:2750","0:3449:921","0:3451:2751","0:3452:2753"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4646":{"id":"0:4646","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1634,0],"end":[1649,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4648:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4089:2105":{"id":"0:4089:2105","crate_id":0,"name":"try_reserve_exact","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[833,4],"end":[845,5]},"visibility":"public","docs":"Tries to reserve the minimum capacity for at least `additional` more elements to\nbe inserted in the given deque. After calling `try_reserve_exact`,\ncapacity will be greater than or equal to `self.len() + additional` if\nit returns `Ok(())`. Does nothing if the capacity is already sufficient.\n\nNote that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer [`try_reserve`] if future insertions are expected.\n\n[`try_reserve`]: VecDeque::try_reserve\n\n# Errors\n\nIf the capacity overflows `usize`, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse std::collections::TryReserveError;\nuse std::collections::VecDeque;\n\nfn process_data(data: &[u32]) -> Result<VecDeque<u32>, TryReserveError> {\n    let mut output = VecDeque::new();\n\n    // Pre-reserve the memory, exiting if we can't\n    output.try_reserve_exact(data.len())?;\n\n    // Now we know this can't OOM(Out-Of-Memory) in the middle of our complex work\n    output.extend(data.iter().map(|&val| {\n        val * 2 + 5 // very complicated\n    }));\n\n    Ok(output)\n}\n# process_data(&[1, 2, 3]).expect(\"why is the test harness OOMing on 12 bytes?\");\n```","links":{"VecDeque::try_reserve":"0:4090:2097"},"attrs":["#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:5513:69":{"id":"b:1:2495-0:5513:69","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3456:2759":{"id":"0:3456:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1111,4],"end":[1123,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:694:2999":{"id":"0:694:2999","crate_id":0,"name":"into_owned","span":{"filename":"library/alloc/src/borrow.rs","begin":[322,4],"end":[327,5]},"visibility":"public","docs":"Extracts the owned data.\n\nClones the data if it is not already owned.\n\n# Examples\n\nCalling `into_owned` on a `Cow::Borrowed` returns a clone of the borrowed data:\n\n```\nuse std::borrow::Cow;\n\nlet s = \"Hello world!\";\nlet cow = Cow::Borrowed(s);\n\nassert_eq!(\n  cow.into_owned(),\n  String::from(s)\n);\n```\n\nCalling `into_owned` on a `Cow::Owned` returns the owned data. The data is moved out of the\n`Cow` without being cloned.\n\n```\nuse std::borrow::Cow;\n\nlet s = \"Hello world!\";\nlet cow: Cow<str> = Cow::Owned(String::from(s));\n\nassert_eq!(\n  cow.into_owned(),\n  String::from(s)\n);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:4737:7157":{"id":"b:1:2505-0:4737:7157","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5071:431":{"id":"0:5071:431","crate_id":0,"name":"concat","span":{"filename":"library/alloc/src/str.rs","begin":[64,4],"end":[66,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5224":{"id":"0:5224","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[1883,0],"end":[1956,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5225:2629","0:5226:6299","0:5227:6389"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1662:2753":{"id":"0:1662:2753","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1783,4],"end":[1785,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:0:671-0:2970:4926":{"id":"b:0:671-0:2970:4926","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:2970:4926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2505-0:3474:5281":{"id":"b:1:2505-0:3474:5281","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CursorMut","id":"0:3474:5281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4134:3320":{"id":"0:4134:3320","crate_id":0,"name":"append","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1916,4],"end":[1937,5]},"visibility":"public","docs":"Moves all the elements of `other` into `self`, leaving `other` empty.\n\n# Panics\n\nPanics if the new number of elements in self overflows a `usize`.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf: VecDeque<_> = [1, 2].into();\nlet mut buf2: VecDeque<_> = [3, 4].into();\nbuf.append(&mut buf2);\nassert_eq!(buf, [1, 2, 3, 4]);\nassert_eq!(buf2, []);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"append\", since = \"1.4.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:6869:1971":{"id":"a:1:7709:3766-0:6869:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2219-0:6991:8288":{"id":"b:1:2219-0:6991:8288","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7709:3766-0:1376:3816":{"id":"a:1:7709:3766-0:1376:3816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:1376:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2510-0:215:2341":{"id":"b:1:2510-0:215:2341","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1318":{"id":"0:1318","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[206,0],"end":[289,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1322:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3675:3010":{"id":"0:3675:3010","crate_id":0,"name":"vec_deque","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1,0],"end":[2907,1]},"visibility":"public","docs":"A double-ended queue (deque) implemented with a growable ring buffer.\n\nThis queue has *O*(1) amortized inserts and removals from both ends of the\ncontainer. It also has *O*(1) indexing like a vector. The contained elements\nare not required to be copyable, and the queue will be sendable if the\ncontained type is sendable.","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:3708","0:3782","0:3849","0:3888","0:4016:238"],"is_stripped":false}},"0:1799:2759":{"id":"0:1799:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2043,4],"end":[2045,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:1394:3826":{"id":"a:1:7709:3766-0:1394:3826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:1394:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:4687":{"id":"0:4687","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1878,0],"end":[1882,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4689:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5347":{"id":"0:5347","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2440,0],"end":[2445,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"inclusive_range\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:2973:5511","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeInclusive","id":"1:46387:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5348:743"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4339:6412":{"id":"0:4339:6412","crate_id":0,"name":"as_bytes_with_nul","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[561,4],"end":[563,5]},"visibility":"public","docs":"Equivalent to [`CString::as_bytes()`] except that the\nreturned slice includes the trailing nul terminator.\n\n# Examples\n\n```\nuse std::ffi::CString;\n\nlet c_string = CString::new(\"foo\").expect(\"CString::new failed\");\nlet bytes = c_string.as_bytes_with_nul();\nassert_eq!(bytes, &[b'f', b'o', b'o', b'\\0']);\n```","links":{"`CString::as_bytes()`":"0:4338:2629"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6887":{"id":"0:6887","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[80,9],"end":[80,14]},"visibility":{"restricted":{"parent":"0:744:1794","path":"::collections"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"try_reserve_kind\", reason =\n\"Uncertain how much info should be exposed\", issue = \"48043\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6888:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6991:8288":{"id":"0:6991:8288","crate_id":0,"name":"FromUtf8Error","span":{"filename":"library/alloc/src/string.rs","begin":[407,0],"end":[410,1]},"visibility":"public","docs":"A possible error value when converting a `String` from a UTF-8 byte vector.\n\nThis type is the error type for the [`from_utf8`] method on [`String`]. It\nis designed in such a way to carefully avoid reallocations: the\n[`into_bytes`] method will give back the byte vector that was used in the\nconversion attempt.\n\n[`from_utf8`]: String::from_utf8\n[`into_bytes`]: FromUtf8Error::into_bytes\n\nThe [`Utf8Error`] type provided by [`std::str`] represents an error that may\noccur when converting a slice of [`u8`]s to a [`&str`]. In this sense, it's\nan analogue to `FromUtf8Error`, and you can get one from a `FromUtf8Error`\nthrough the [`utf8_error`] method.\n\n[`Utf8Error`]: str::Utf8Error \"std::str::Utf8Error\"\n[`std::str`]: core::str \"std::str\"\n[`&str`]: prim@str \"&str\"\n[`utf8_error`]: FromUtf8Error::utf8_error\n\n# Examples\n\nBasic usage:\n\n```\n// some invalid bytes, in a vector\nlet bytes = vec![0, 159];\n\nlet value = String::from_utf8(bytes);\n\nassert!(value.is_err());\nassert_eq!(vec![0, 159], value.unwrap_err().into_bytes());\n```","links":{"str::Utf8Error":"1:49909:6209","FromUtf8Error::into_bytes":"0:5226:6299","`String`":"0:6980:218","FromUtf8Error::utf8_error":"0:5227:6389","core::str":"1:10576:1344","prim@str":"1:58436:10463","String::from_utf8":"0:5165:6388","`u8`":"1:58447:10472"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:5224","a:1:2658:222-0:6991:8288","a:1:2644:214-0:6991:8288","a:1:2708:2329-0:6991:8288","a:1:7709:3766-0:6991:8288","a:1:7710:3767-0:6991:8288","b:0:5362-0:6991:8288","b:0:671-0:6991:8288","b:1:2567-0:6991:8288","b:1:2510-0:6991:8288","b:1:2505-0:6991:8288","b:1:2216-0:6991:8288","b:1:3303-0:6991:8288","b:1:2219-0:6991:8288","b:1:2499-0:6991:8288","b:1:2495-0:6991:8288","0:6994","0:6996","0:6997","0:6999","0:7000","0:6989","0:5228","0:5232"]}},"0:6420:2010":{"id":"0:6420:2010","crate_id":0,"name":"new_in","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[610,4],"end":[612,5]},"visibility":"public","docs":"Constructs a new, empty `Vec<T, A>`.\n\nThe vector will not allocate until elements are pushed onto it.\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\n# #[allow(unused_mut)]\nlet mut vec: Vec<i32, _> = Vec::new_in(System);\n```","links":{},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1902:180":{"id":"0:1902:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2207,4],"end":[2207,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"V"}}},"0:1706:650":{"id":"0:1706:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1859,4],"end":[1861,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:676:109":{"id":"a:1:2708:2329-0:676:109","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2644:214-0:276:1792":{"id":"a:1:2644:214-0:276:1792","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3088:757":{"id":"0:3088:757","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1270,4],"end":[1272,5]},"visibility":"default","docs":"Gets an iterator for moving out the `BTreeSet`'s contents.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet set = BTreeSet::from([1, 2, 3, 4]);\n\nlet v: Vec<_> = set.into_iter().collect();\nassert_eq!(v, [1, 2, 3, 4]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6779:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2721:831":{"id":"0:2721:831","crate_id":0,"name":"marker","span":{"filename":"library/alloc/src/collections/btree/node.rs","begin":[1661,0],"end":[1661,14]},"visibility":"public","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":[],"is_stripped":false}},"0:5250":{"id":"0:5250","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2032,0],"end":[2047,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"extend_string\", since = \"1.4.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7012:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5251:670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5320:268":{"id":"0:5320:268","crate_id":0,"name":"add_assign","span":{"filename":"library/alloc/src/string.rs","begin":[2351,4],"end":[2353,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2567-0:6957:6203":{"id":"b:1:2567-0:6957:6203","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/error.rs","begin":[198,0],"end":[198,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"1:3352:10680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:9224"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"0:5327":{"id":"0:5327","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2375,0],"end":[2382,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:2969:3662","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeFrom","id":"1:46345:193","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5328:180","0:5329:742"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5057":{"id":"0:5057","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[49,20],"end":[49,26]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::RSplit","name":"RSplit","id":"1:49983:7699","glob":false}},"0:1801":{"id":"0:1801","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2049,0],"end":[2053,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:1415:3837","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1805:782"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5533:7157":{"id":"0:5533:7157","crate_id":0,"name":"Weak","span":{"filename":"library/alloc/src/sync.rs","begin":[294,0],"end":[302,1]},"visibility":"public","docs":"`Weak` is a version of [`Arc`] that holds a non-owning reference to the\nmanaged allocation. The allocation is accessed by calling [`upgrade`] on the `Weak`\npointer, which returns an <code>[Option]<[Arc]\\<T>></code>.\n\nSince a `Weak` reference does not count towards ownership, it will not\nprevent the value stored in the allocation from being dropped, and `Weak` itself makes no\nguarantees about the value still being present. Thus it may return [`None`]\nwhen [`upgrade`]d. Note however that a `Weak` reference *does* prevent the allocation\nitself (the backing store) from being deallocated.\n\nA `Weak` pointer is useful for keeping a temporary reference to the allocation\nmanaged by [`Arc`] without preventing its inner value from being dropped. It is also used to\nprevent circular references between [`Arc`] pointers, since mutual owning references\nwould never allow either [`Arc`] to be dropped. For example, a tree could\nhave strong [`Arc`] pointers from parent nodes to children, and `Weak`\npointers from children back to their parents.\n\nThe typical way to obtain a `Weak` pointer is to call [`Arc::downgrade`].\n\n[`upgrade`]: Weak::upgrade","links":{"Option":"1:47997:175","Arc":"0:5513:69","`None`":"1:47999:173","`Arc::downgrade`":"0:5597:7249","Weak::upgrade":"0:5680:7614","`Arc`":"0:5513:69"},"attrs":["#[stable(feature = \"arc_weak\", since = \"1.4.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:5666","0:5673","0:5678","a:1:2708:2329-0:5533:7157","a:1:7709:3766-0:5533:7157","a:1:7710:3767-0:5533:7157","b:0:671-0:5533:7157","b:1:2510-0:5533:7157","b:1:2505-0:5533:7157","b:1:2216-0:5533:7157","b:1:3303-0:5533:7157","b:1:2219-0:5533:7157","b:1:2499-0:5533:7157","b:1:2495-0:5533:7157","0:5536","0:5538","0:5540","0:5543","0:5546","0:5688","0:5691","0:5694"]}},"0:4379:668":{"id":"0:4379:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[850,4],"end":[852,5]},"visibility":"default","docs":"Converts a [`CStr`] into a borrowed [`Cow`] without copying or allocating.","links":{"`Cow`":"0:676:109","`CStr`":"1:46902:101"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5589":{"id":"0:5589","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[795,0],"end":[834,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}},"items":["0:5591:329"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2708:2329-0:3474:5281":{"id":"a:1:2708:2329-0:3474:5281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CursorMut","id":"0:3474:5281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:0:5362-0:276:1792":{"id":"b:0:5362-0:276:1792","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2526,0],"end":[2540,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5360:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:5364:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:286:2366":{"id":"0:286:2366","crate_id":0,"name":"new_zeroed","span":{"filename":"library/alloc/src/boxed.rs","begin":[270,4],"end":[272,5]},"visibility":"public","docs":"Constructs a new `Box` with uninitialized contents, with the memory\nbeing filled with `0` bytes.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\nof this method.\n\n# Examples\n\n```\n#![feature(new_uninit)]\n\nlet zero = Box::<u32>::new_zeroed();\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0)\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1519:2186"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[unstable(feature = \"new_uninit\", issue = \"63291\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6598:743":{"id":"0:6598:743","crate_id":0,"name":"index_mut","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2738,4],"end":[2740,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:2969:3662","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1252:2822":{"id":"0:1252:2822","crate_id":0,"name":"description","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[141,4],"end":[143,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[allow(deprecated)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4412":{"id":"0:4412","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1032,0],"end":[1036,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_asref\", since = \"1.7.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4413:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2216-0:5533:7157":{"id":"b:1:2216-0:5533:7157","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3303-0:6083:3475":{"id":"b:1:3303-0:6083:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3142:1746":{"id":"0:3142:1746","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1369,4],"end":[1371,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["elem",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:1426:192":{"id":"a:1:7709:3766-0:1426:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:1426:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6446:3348":{"id":"0:6446:3348","crate_id":0,"name":"retain","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1558,4],"end":[1563,5]},"visibility":"public","docs":"Retains only the elements specified by the predicate.\n\nIn other words, remove all elements `e` for which `f(&e)` returns `false`.\nThis method operates in place, visiting each element exactly once in the\noriginal order, and preserves the order of the retained elements.\n\n# Examples\n\n```\nlet mut vec = vec![1, 2, 3, 4];\nvec.retain(|&x| x % 2 == 0);\nassert_eq!(vec, [2, 4]);\n```\n\nBecause the elements are visited exactly once in the original order,\nexternal state may be used to decide which elements to keep.\n\n```\nlet mut vec = vec![1, 2, 3, 4, 5];\nlet keep = [false, true, true, false, true];\nlet mut iter = keep.iter();\nvec.retain(|_| *iter.next().unwrap());\nassert_eq!(vec, [2, 3, 5]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"generic","inner":"F"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6873":{"id":"0:6873","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[59,16],"end":[59,25]},"visibility":{"restricted":{"parent":"0:744:1794","path":"::collections"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"try_reserve\", since = \"1.57.0\")]","#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2654:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2495-0:2908:95":{"id":"b:1:2495-0:2908:95","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2708:2329-0:3531:4069":{"id":"a:1:2708:2329-0:3531:4069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3531:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2658:222-0:1426:192":{"id":"a:1:2658:222-0:1426:192","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:1426:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3232:409":{"id":"0:3232:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1603,4],"end":[1616,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6704":{"id":"0:6704","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3197,0],"end":[3210,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]","#[stable(feature = \"vec_from_box\", since = \"1.18.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6707:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3303-0:6734:3475":{"id":"b:1:3303-0:6734:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5238:411":{"id":"0:5238:411","crate_id":0,"name":"clone_from","span":{"filename":"library/alloc/src/string.rs","begin":[1995,4],"end":[1997,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6711:668":{"id":"0:6711:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3235,4],"end":[3237,5]},"visibility":"default","docs":"Convert a vector into a boxed slice.\n\nIf `v` has excess capacity, its items will be moved into a\nnewly-allocated buffer with exactly the right capacity.\n\n# Examples\n\n```\nassert_eq!(Box::from(vec![1, 2, 3]), vec![1, 2, 3].into_boxed_slice());\n```\n\nAny excess capacity is removed:\n```\nlet mut vec = Vec::with_capacity(10);\nvec.extend([1, 2, 3]);\n\nassert_eq!(Box::from(vec), vec![1, 2, 3].into_boxed_slice());\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:918":{"id":"0:918","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1466,0],"end":[1466,51]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6982":{"id":"0:6982","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[364,9],"end":[364,19]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["le","ge","lt","gt"],"trait":{"name":"PartialOrd","id":"1:2305:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6983:995"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:784:224":{"id":"0:784:224","crate_id":0,"name":"Target","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[304,4],"end":[304,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:3132:2885":{"id":"0:3132:2885","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1350,4],"end":[1354,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"Iter"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"Iter","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5340:743":{"id":"0:5340:743","crate_id":0,"name":"index_mut","span":{"filename":"library/alloc/src/string.rs","begin":[2414,4],"end":[2416,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"resolved_path","inner":{"name":"ops::Range","id":"1:46321:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:6822:3475":{"id":"b:1:2495-0:6822:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4799":{"id":"0:4799","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2696,0],"end":[2700,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4801:1793"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6919:409":{"id":"0:6919:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[134,9],"end":[134,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6665":{"id":"0:6665","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3062,0],"end":[3069,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:6667:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:973":{"id":"0:973","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1613,0],"end":[1617,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7012:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:975:670"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2219-0:2944:4916":{"id":"b:1:2219-0:2944:4916","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:2944:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6434:3433":{"id":"0:6434:3433","crate_id":0,"name":"as_slice","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1186,4],"end":[1188,5]},"visibility":"public","docs":"Extracts a slice containing the entire vector.\n\nEquivalent to `&s[..]`.\n\n# Examples\n\n```\nuse std::io::{self, Write};\nlet buffer = vec![1, 2, 3, 5, 8];\nio::sink().write(buffer.as_slice()).unwrap();\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"vec_as_slice\", since = \"1.7.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:768:96":{"id":"a:1:2644:214-0:768:96","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4424":{"id":"0:4424","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1134,0],"end":[1134,50]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","provide","cause","source","description"],"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3849":{"id":"0:3849","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[45,0],"end":[45,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"self::into_iter::IntoIter","name":"IntoIter","id":"0:6822:3475","glob":false}},"a:1:2658:222-0:7057:4069":{"id":"a:1:2658:222-0:7057:4069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:7057:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4833":{"id":"0:4833","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[44,22],"end":[44,30]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"from_ref\", since = \"1.28.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::from_mut","name":"from_mut","id":"1:10149:7676","glob":false}},"b:1:2505-0:4016:238":{"id":"b:1:2505-0:4016:238","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7709:3766-0:2978:4931":{"id":"a:1:7709:3766-0:2978:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:2978:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6968":{"id":"0:6968","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[225,31],"end":[225,36]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6969:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5656:7294":{"id":"0:5656:7294","crate_id":0,"name":"get_mut_unchecked","span":{"filename":"library/alloc/src/sync.rs","begin":[1643,4],"end":[1647,5]},"visibility":"public","docs":"Returns a mutable reference into the given `Arc`,\nwithout any check.\n\nSee also [`get_mut`], which is safe and does appropriate checks.\n\n[`get_mut`]: Arc::get_mut\n\n# Safety\n\nIf any other `Arc` or [`Weak`] pointers to the same allocation exist, then\nthey must be must not be dereferenced or have active borrows for the duration\nof the returned borrow, and their inner type must be exactly the same as the\ninner type of this Rc (including lifetimes). This is trivially the case if no\nsuch pointers exist, for example immediately after `Arc::new`.\n\n# Examples\n\n```\n#![feature(get_mut_unchecked)]\n\nuse std::sync::Arc;\n\nlet mut x = Arc::new(String::new());\nunsafe {\n    Arc::get_mut_unchecked(&mut x).push_str(\"foo\")\n}\nassert_eq!(*x, \"foo\");\n```\nOther `Arc` pointers to the same allocation must be to the same type.\n```no_run\n#![feature(get_mut_unchecked)]\n\nuse std::sync::Arc;\n\nlet x: Arc<str> = Arc::from(\"Hello, world!\");\nlet mut y: Arc<[u8]> = x.clone().into();\nunsafe {\n    // this is Undefined Behavior, because x's inner type is str, not [u8]\n    Arc::get_mut_unchecked(&mut y).fill(0xff); // 0xff is invalid in UTF-8\n}\nprintln!(\"{}\", &*x); // Invalid UTF-8 in a str\n```\nOther `Arc` pointers to the same allocation must be to the exact same type, including lifetimes.\n```no_run\n#![feature(get_mut_unchecked)]\n\nuse std::sync::Arc;\n\nlet x: Arc<&str> = Arc::new(\"Hello, world!\");\n{\n    let s = String::from(\"Oh, no!\");\n    let mut y: Arc<&str> = x.clone().into();\n    unsafe {\n        // this is Undefined Behavior, because x's inner type\n        // is &'long str, not &'short str\n        *Arc::get_mut_unchecked(&mut y) = &s;\n    }\n}\nprintln!(\"{}\", &*x); // Use-after-free\n```","links":{"Arc::get_mut":"0:5655:3929","`Weak`":"0:5533:7157"},"attrs":["#[inline]","#[unstable(feature = \"get_mut_unchecked\", issue = \"63292\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:1866:702":{"id":"0:1866:702","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2152,4],"end":[2157,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:8805:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3772":{"id":"0:3772","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[215,0],"end":[225,1]},"visibility":{"restricted":{"parent":"0:3709:3448","path":"::collections::vec_deque::drain"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:3723:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3775:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4596:2731":{"id":"0:4596:2731","crate_id":0,"name":"downcast","span":{"filename":"library/alloc/src/rc.rs","begin":[1318,4],"end":[1328,5]},"visibility":"public","docs":"Attempt to downcast the `Rc<dyn Any>` to a concrete type.\n\n# Examples\n\n```\nuse std::any::Any;\nuse std::rc::Rc;\n\nfn print_if_string(value: Rc<dyn Any>) {\n    if let Ok(string) = value.downcast::<String>() {\n        println!(\"String ({}): {}\", string.len(), string);\n    }\n}\n\nlet my_string = \"Hello World\".to_string();\nprint_if_string(Rc::new(my_string));\nprint_if_string(Rc::new(0i8));\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rc_downcast\", since = \"1.29.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6150":{"id":"0:6150","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[373,0],"end":[382,1]},"visibility":{"restricted":{"parent":"0:6056:757","path":"::vec::into_iter"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"vec_into_iter_clone\", since = \"1.8.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6153:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3661":{"id":"0:3661","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1994,0],"end":[1994,44]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6095:650":{"id":"0:6095:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[50,4],"end":[52,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5396:668":{"id":"0:5396:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[2744,4],"end":[2746,5]},"visibility":"default","docs":"Converts a clone-on-write string to an owned\ninstance of [`String`].\n\nThis extracts the owned string,\nclones the string if it is not already owned.\n\n# Example\n\n```\n# use std::borrow::Cow;\n// If the string is not owned...\nlet cow: Cow<str> = Cow::Borrowed(\"eggplant\");\n// It will allocate on the heap and copy the string.\nlet owned: String = String::from(cow);\nassert_eq!(&owned[..], \"eggplant\");\n```","links":{"`String`":"0:6980:218"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5744":{"id":"0:5744","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2520,0],"end":[2535,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"items":["0:5746:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2567-0:6944:6202":{"id":"b:1:2567-0:6944:6202","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/error.rs","begin":[198,0],"end":[198,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"1:3352:10680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:9224"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"0:4744":{"id":"0:4744","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2194,0],"end":[2194,76]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Unsize","id":"1:2652:2330","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"CoerceUnsized","id":"1:3181:2331","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:299:2392":{"id":"0:299:2392","crate_id":0,"name":"try_new_zeroed_in","span":{"filename":"library/alloc/src/boxed.rs","begin":[559,4],"end":[566,5]},"visibility":"public","docs":"Constructs a new `Box` with uninitialized contents, with the memory\nbeing filled with `0` bytes in the provided allocator,\nreturning an error if the allocation fails,\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\nof this method.\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nuse std::alloc::System;\n\nlet zero = Box::<u32, _>::try_new_zeroed_in(System)?;\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0);\n# Ok::<(), std::alloc::AllocError>(())\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1519:2186"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50972:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe_const"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:121:2112":{"id":"0:121:2112","crate_id":0,"name":"shrink","span":{"filename":"library/alloc/src/alloc.rs","begin":[277,4],"end":[317,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:1815:1966","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}],["old_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50943:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["new_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50943:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:1815:1966","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50972:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:1216:3670":{"id":"b:1:2510-0:1216:3670","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:1216:3670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2499-0:6991:8288":{"id":"b:1:2499-0:6991:8288","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3470:409":{"id":"0:3470:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1150,4],"end":[1153,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5032":{"id":"0:5032","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[34,31],"end":[34,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::from_utf8_mut","name":"from_utf8_mut","id":"1:10582:7928","glob":false}},"b:1:2216-0:6779:3475":{"id":"b:1:2216-0:6779:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6779:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:395:2640":{"id":"0:395:2640","crate_id":0,"name":"write_i8","span":{"filename":"library/alloc/src/boxed.rs","begin":[1412,4],"end":[1414,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"i8"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:768:96":{"id":"b:1:2219-0:768:96","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3458":{"id":"0:3458","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1127,0],"end":[1127,47]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3352:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5796":{"id":"0:5796","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2802,0],"end":[2820,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"arc_error\", since = \"1.52.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"core::error::Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["type_id","provide","cause","source","description"],"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5798:2822","0:5799:383","0:5800:2625","0:5801:9224"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2499-0:3474:5281":{"id":"b:1:2499-0:3474:5281","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CursorMut","id":"0:3474:5281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2567-0:1230:3671":{"id":"b:1:2567-0:1230:3671","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/error.rs","begin":[198,0],"end":[198,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"1:3352:10680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedError","id":"0:1230:3671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2569:9224"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"a:1:2644:214-0:6957:6203":{"id":"a:1:2644:214-0:6957:6203","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2505-0:215:2341":{"id":"b:1:2505-0:215:2341","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4081:2021":{"id":"0:4081:2021","crate_id":0,"name":"with_capacity_in","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[590,4],"end":[592,5]},"visibility":"public","docs":"Creates an empty deque with space for at least `capacity` elements.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<u32> = VecDeque::with_capacity(10);\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["capacity",{"kind":"primitive","inner":"usize"}],["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3413:3521":{"id":"0:3413:3521","crate_id":0,"name":"remove","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[942,4],"end":[962,5]},"visibility":"public","docs":"Removes the element at the given index and returns it.\n\nThis operation should compute in *O*(*n*) time.\n\n# Panics\nPanics if at >= len\n\n# Examples\n\n```\n#![feature(linked_list_remove)]\nuse std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\n\nd.push_front(1);\nd.push_front(2);\nd.push_front(3);\n\nassert_eq!(d.remove(1), 2);\nassert_eq!(d.remove(0), 3);\nassert_eq!(d.remove(0), 1);\n```","links":{},"attrs":["#[unstable(feature = \"linked_list_remove\", issue = \"69210\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["at",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1607:2750":{"id":"0:1607:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1692,4],"end":[1692,23]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}},"0:3600":{"id":"0:3600","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1853,0],"end":[1862,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7025:3507","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3602:2885","0:3604:1746"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:835:3422":{"id":"0:835:3422","crate_id":0,"name":"shrink_to","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1083,4],"end":[1085,5]},"visibility":"public","docs":"Discards capacity with a lower bound.\n\nThe capacity will remain at least as large as both the length\nand the supplied value.\n\nIf the current capacity is less than the lower limit, this is a no-op.\n\n# Examples\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap: BinaryHeap<i32> = BinaryHeap::with_capacity(100);\n\nassert!(heap.capacity() >= 100);\nheap.shrink_to(10);\nassert!(heap.capacity() >= 10);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"shrink_to\", since = \"1.56.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["min_capacity",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:629":{"id":"0:629","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2304,0],"end":[2322,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"string_box_error\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}}},"items":["0:630:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6874":{"id":"0:6874","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[59,16],"end":[59,25]},"visibility":{"restricted":{"parent":"0:744:1794","path":"::collections"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6875:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5727:650":{"id":"0:5727:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/sync.rs","begin":[2452,4],"end":[2454,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:636":{"id":"0:636","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2372,0],"end":[2390,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"cow_box_error\", since = \"1.22.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'b"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'a"}}}],"bindings":[]}}}},"items":["0:639:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3520:5455":{"id":"0:3520:5455","crate_id":0,"name":"splice_before","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1525,4],"end":[1538,5]},"visibility":"public","docs":"Inserts the elements from the given `LinkedList` before the current one.\n\nIf the cursor is pointing at the \"ghost\" non-element then the new elements are\ninserted at the end of the `LinkedList`.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["list",{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1650":{"id":"0:1650","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1765,0],"end":[1769,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:1376:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1653:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3349":{"id":"0:3349","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[93,0],"end":[97,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3351:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:952:2750":{"id":"0:952:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1550,4],"end":[1550,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:376":{"id":"0:376","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1377,0],"end":[1377,54]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5390":{"id":"0:5390","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2684,0],"end":[2702,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]","#[stable(feature = \"string_from_box\", since = \"1.18.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5391:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3048:3797":{"id":"0:3048:3797","crate_id":0,"name":"insert","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[906,4],"end":[911,5]},"visibility":"public","docs":"Adds a value to the set.\n\nReturns whether the value was newly inserted. That is:\n\n- If the set did not previously contain an equal value, `true` is\n  returned.\n- If the set already contained an equal value, `false` is returned, and\n  the entry is not updated.\n\nSee the [module-level documentation] for more.\n\n[module-level documentation]: index.html#insert-and-complex-keys\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::new();\n\nassert_eq!(set.insert(2), true);\nassert_eq!(set.insert(2), false);\nassert_eq!(set.len(), 1);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5031":{"id":"0:5031","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[34,20],"end":[34,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::from_utf8","name":"from_utf8","id":"1:10581:6388","glob":false}},"0:5098:7999":{"id":"0:5098:7999","crate_id":0,"name":"replacen","span":{"filename":"library/alloc/src/str.rs","begin":[311,4],"end":[322,5]},"visibility":"public","docs":"Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```","links":{"`String`":"0:6980:218"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[must_use =\n\"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]","#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}],["to",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}],["count",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:7020-0:6757:3337":{"id":"b:1:7020-0:6757:3337","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainSorted","id":"0:6757:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:687:409":{"id":"0:687:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/borrow.rs","begin":[194,4],"end":[202,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:6749:3449":{"id":"b:1:3303-0:6749:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:6749:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:643":{"id":"0:643","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2414,0],"end":[2428,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"box_error\", since = \"1.8.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"core::error::Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["type_id","provide","cause","source","description"],"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:645:2822","0:646:383","0:647:2625"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2658:222-0:1338:3356":{"id":"a:1:2658:222-0:1338:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2216-0:1230:3671":{"id":"b:1:2216-0:1230:3671","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedError","id":"0:1230:3671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5166:6537":{"id":"0:5166:6537","crate_id":0,"name":"from_utf8_lossy","span":{"filename":"library/alloc/src/string.rs","begin":[631,4],"end":[659,5]},"visibility":"public","docs":"Converts a slice of bytes to a string, including invalid characters.\n\nStrings are made of bytes ([`u8`]), and a slice of bytes\n([`&[u8]`][byteslice]) is made of bytes, so this function converts\nbetween the two. Not all byte slices are valid strings, however: strings\nare required to be valid UTF-8. During this conversion,\n`from_utf8_lossy()` will replace any invalid UTF-8 sequences with\n[`U+FFFD REPLACEMENT CHARACTER`][U+FFFD], which looks like this: �\n\n[byteslice]: prim@slice\n[U+FFFD]: core::char::REPLACEMENT_CHARACTER\n\nIf you are sure that the byte slice is valid UTF-8, and you don't want\nto incur the overhead of the conversion, there is an unsafe version\nof this function, [`from_utf8_unchecked`], which has the same behavior\nbut skips the checks.\n\n[`from_utf8_unchecked`]: String::from_utf8_unchecked\n\nThis function returns a [`Cow<'a, str>`]. If our byte slice is invalid\nUTF-8, then we need to insert the replacement characters, which will\nchange the size of the string, and hence, require a `String`. But if\nit's already valid UTF-8, we don't need a new allocation. This return\ntype allows us to handle both cases.\n\n[`Cow<'a, str>`]: crate::borrow::Cow \"borrow::Cow\"\n\n# Examples\n\nBasic usage:\n\n```\n// some bytes, in a vector\nlet sparkle_heart = vec![240, 159, 146, 150];\n\nlet sparkle_heart = String::from_utf8_lossy(&sparkle_heart);\n\nassert_eq!(\"💖\", sparkle_heart);\n```\n\nIncorrect bytes:\n\n```\n// some invalid bytes\nlet input = b\"Hello \\xF0\\x90\\x80World\";\nlet output = String::from_utf8_lossy(input);\n\nassert_eq!(\"Hello �World\", output);\n```","links":{"core::char::REPLACEMENT_CHARACTER":"1:4512:8111","crate::borrow::Cow":"0:676:109","`u8`":"1:58447:10472","prim@slice":"1:58435:10462","String::from_utf8_unchecked":"0:5173:7932"},"attrs":["#[must_use]","#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5366:1398":{"id":"0:5366:1398","crate_id":0,"name":"to_string","span":{"filename":"library/alloc/src/string.rs","begin":[2546,4],"end":[2548,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:676:109":{"id":"b:1:2505-0:676:109","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:2937:3356":{"id":"0:2937:3356","crate_id":0,"name":"Iter","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[138,0],"end":[140,1]},"visibility":"public","docs":"An iterator over the items of a `BTreeSet`.\n\nThis `struct` is created by the [`iter`] method on [`BTreeSet`].\nSee its documentation for more.\n\n[`iter`]: BTreeSet::iter","links":{"BTreeSet::iter":"0:3063:768","`BTreeSet`":"0:2908:95"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:2937:3356","a:1:2644:214-0:2937:3356","a:1:2708:2329-0:2937:3356","a:1:7709:3766-0:2937:3356","a:1:7710:3767-0:2937:3356","b:0:671-0:2937:3356","b:1:7020-0:2937:3356","b:1:2510-0:2937:3356","b:1:2505-0:2937:3356","b:1:2216-0:2937:3356","b:1:3303-0:2937:3356","b:1:2219-0:2937:3356","b:1:2499-0:2937:3356","b:1:2495-0:2937:3356","0:2941","0:3170","0:3173","0:3182","0:3186","0:3189"]}},"0:5027":{"id":"0:5027","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[28,0],"end":[28,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::SplitAsciiWhitespace","name":"SplitAsciiWhitespace","id":"1:50248:7926","glob":false}},"0:5926:921":{"id":"0:5926:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/vec/splice.rs","begin":[34,4],"end":[36,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7130:154","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5444:307":{"id":"0:5444:307","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/string.rs","begin":[2948,4],"end":[2950,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1348:3805":{"id":"0:1348:3805","crate_id":0,"name":"IterMut","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[372,0],"end":[378,1]},"visibility":"public","docs":"A mutable iterator over the entries of a `BTreeMap`.\n\nThis `struct` is created by the [`iter_mut`] method on [`BTreeMap`]. See its\ndocumentation for more.\n\n[`iter_mut`]: BTreeMap::iter_mut","links":{"BTreeMap::iter_mut":"0:1917:4093","`BTreeMap`":"0:1301:94"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:1348:3805","a:1:2644:214-0:1348:3805","a:1:2708:2329-0:1348:3805","a:1:7709:3766-0:1348:3805","a:1:7710:3767-0:1348:3805","b:1:7020-0:1348:3805","b:1:2510-0:1348:3805","b:1:2505-0:1348:3805","b:1:2216-0:1348:3805","b:1:3303-0:1348:3805","b:1:2219-0:1348:3805","b:1:2499-0:1348:3805","b:1:2495-0:1348:3805","0:1355","0:1545","0:1555","0:1560","0:1564"]}},"b:1:2510-0:6725:1970":{"id":"b:1:2510-0:6725:1970","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5162":{"id":"0:5162","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[432,0],"end":[1881,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5163:908","0:5164:2019","0:5165:6388","0:5166:6537","0:5168:8387","0:5169:8399","0:5171:6474","0:5172:2866","0:5173:7932","0:5174:6299","0:5175:308","0:5176:8465","0:5177:3005","0:5178:8485","0:5180:2020","0:5181:2086","0:5182:2104","0:5183:2097","0:5184:2105","0:5185:2111","0:5186:3422","0:5187:3275","0:5189:2629","0:5190:5696","0:5191:3231","0:5192:3521","0:5193:8568","0:5199:3348","0:5209:3797","0:5212:8605","0:5213:8616","0:5214:782","0:5215:2762","0:5216:4039","0:5217:3451","0:5218:3448","0:5220:8669","0:5222:8674","0:5223:1585"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1261:4210":{"id":"0:1261:4210","crate_id":0,"name":"or_insert_with_key","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[211,4],"end":[219,5]},"visibility":"public","docs":"Ensures a value is in the entry by inserting, if empty, the result of the default function.\nThis method allows for generating key-derived values for insertion by providing the default\nfunction a reference to the key that was moved during the `.entry(key)` method call.\n\nThe reference to the moved key is provided so that cloning or copying the key is\nunnecessary, unlike with `.or_insert_with(|| ... )`.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\n\nmap.entry(\"poneyland\").or_insert_with_key(|key| key.chars().count());\n\nassert_eq!(map[\"poneyland\"], 9);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"or_insert_with_key\", since = \"1.50.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["default",{"kind":"generic","inner":"F"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2920:2768","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}}],"output":{"kind":"generic","inner":"V"}}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4413:668":{"id":"0:4413:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[1033,4],"end":[1035,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4107:5536":{"id":"0:4107:5536","crate_id":0,"name":"as_mut_slices","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1183,4],"end":[1188,5]},"visibility":"public","docs":"Returns a pair of slices which contain, in order, the contents of the\ndeque.\n\nIf [`make_contiguous`] was previously called, all elements of the\ndeque will be in the first slice and the second slice will be empty.\n\n[`make_contiguous`]: VecDeque::make_contiguous\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque = VecDeque::new();\n\ndeque.push_back(0);\ndeque.push_back(1);\n\ndeque.push_front(10);\ndeque.push_front(9);\n\ndeque.as_mut_slices().0[0] = 42;\ndeque.as_mut_slices().1[0] = 24;\nassert_eq!(deque.as_slices(), (&[42, 10][..], &[24, 1][..]));\n```","links":{"VecDeque::make_contiguous":"0:4142:5929"},"attrs":["#[inline]","#[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4948":{"id":"0:4948","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[717,0],"end":[736,1]},"visibility":{"restricted":{"parent":"0:4810:1314","path":"::slice"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[unstable(feature = \"slice_concat_ext\", issue = \"27747\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Join","id":"0:4938:7826","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}},"for":{"kind":"slice","inner":{"kind":"generic","inner":"V"}},"items":["0:4951:180","0:4952:7823"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3480":{"id":"0:3480","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1181,0],"end":[1185,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CursorMut","id":"0:3474:5281","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3482:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:824":{"id":"0:824","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[824,0],"end":[1223,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:826:768","0:827:3363","0:828:3367","0:829:2020","0:830:2104","0:831:2086","0:832:2105","0:833:2097","0:834:2111","0:835:3422","0:836:3433","0:837:1928","0:838:782","0:839:2762","0:840:3448","0:841:3451"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1542:2750":{"id":"0:1542:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1542,4],"end":[1542,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}},"a:1:2644:214-0:6980:218":{"id":"a:1:2644:214-0:6980:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2495-0:2944:4916":{"id":"b:1:2495-0:2944:4916","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:2944:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3575":{"id":"0:3575","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1806,0],"end":[1806,44]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7710:3767-0:1415:3837":{"id":"a:1:7710:3767-0:1415:3837","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoValues","id":"0:1415:3837","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5598:7257":{"id":"0:5598:7257","crate_id":0,"name":"weak_count","span":{"filename":"library/alloc/src/sync.rs","begin":[1003,4],"end":[1008,5]},"visibility":"public","docs":"Gets the number of [`Weak`] pointers to this allocation.\n\n# Safety\n\nThis method by itself is safe, but using it correctly requires extra care.\nAnother thread can change the weak count at any time,\nincluding potentially between calling this method and acting on the result.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\nlet _weak_five = Arc::downgrade(&five);\n\n// This assertion is deterministic because we haven't shared\n// the `Arc` or `Weak` between threads.\nassert_eq!(1, Arc::weak_count(&five));\n```","links":{"`Weak`":"0:5533:7157"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"arc_counts\", since = \"1.15.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6437:2192":{"id":"0:6437:2192","crate_id":0,"name":"as_mut_ptr","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1272,4],"end":[1280,5]},"visibility":"public","docs":"Returns an unsafe mutable pointer to the vector's buffer, or a dangling\nraw pointer valid for zero sized reads if the vector didn't allocate.\n\nThe caller must ensure that the vector outlives the pointer this\nfunction returns, or else it will end up pointing to garbage.\nModifying the vector may cause its buffer to be reallocated,\nwhich would also make any pointers to it invalid.\n\n# Examples\n\n```\n// Allocate vector big enough for 4 elements.\nlet size = 4;\nlet mut x: Vec<i32> = Vec::with_capacity(size);\nlet x_ptr = x.as_mut_ptr();\n\n// Initialize elements via raw pointer writes, then set length.\nunsafe {\n    for i in 0..size {\n        *x_ptr.add(i) = i as i32;\n    }\n    x.set_len(size);\n}\nassert_eq!(&*x, &[0, 1, 2, 3]);\n```","links":{},"attrs":["#[stable(feature = \"vec_as_ptr\", since = \"1.37.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5301:8713":{"id":"0:5301:8713","crate_id":0,"name":"is_suffix_of","span":{"filename":"library/alloc/src/string.rs","begin":[2200,4],"end":[2202,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1200:650":{"id":"0:1200:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[37,4],"end":[42,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:5964:3449":{"id":"b:1:2216-0:5964:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1631:921":{"id":"0:1631:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1726,4],"end":[1728,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4228:3508":{"id":"0:4228:3508","crate_id":0,"name":"extend_reserve","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2788,4],"end":[2790,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:6757:3337":{"id":"a:1:7709:3766-0:6757:3337","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainSorted","id":"0:6757:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"a:1:2658:222-0:6957:6203":{"id":"a:1:2658:222-0:6957:6203","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5720":{"id":"0:5720","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2428,0],"end":[2446,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","clamp","min"],"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5722:416"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5171:6474":{"id":"0:5171:6474","crate_id":0,"name":"into_raw_parts","span":{"filename":"library/alloc/src/string.rs","begin":[756,4],"end":[758,5]},"visibility":"public","docs":"Decomposes a `String` into its raw components.\n\nReturns the raw pointer to the underlying data, the length of\nthe string (in bytes), and the allocated capacity of the data\n(in bytes). These are the same arguments in the same order as\nthe arguments to [`from_raw_parts`].\n\nAfter calling this function, the caller is responsible for the\nmemory previously managed by the `String`. The only way to do\nthis is to convert the raw pointer, length, and capacity back\ninto a `String` with the [`from_raw_parts`] function, allowing\nthe destructor to perform the cleanup.\n\n[`from_raw_parts`]: String::from_raw_parts\n\n# Examples\n\n```\n#![feature(vec_into_raw_parts)]\nlet s = String::from(\"hello\");\n\nlet (ptr, len, cap) = s.into_raw_parts();\n\nlet rebuilt = unsafe { String::from_raw_parts(ptr, len, cap) };\nassert_eq!(rebuilt, \"hello\");\n```","links":{"String::from_raw_parts":"0:5172:2866"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[unstable(feature = \"vec_into_raw_parts\", reason = \"new API\", issue =\n\"65816\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"usize"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11394:7989":{"id":"1:11394:7989","crate_id":1,"name":"match_indices","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1799,4],"end":[1799,85]},"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```","links":{"self::pattern":"1:11013:1760","`DoubleEndedIterator`":"1:7053:119","prim@char":"1:58430:10458","str::rmatch_indices":"1:11397:13997"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"MatchIndices","id":"1:50115:7942","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6952":{"id":"0:6952","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[159,27],"end":[159,29]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]","#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2655:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1654":{"id":"0:1654","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1772,0],"end":[1786,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:1385:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1658:2750","0:1659:921","0:1661:2751","0:1662:2753"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4080:2010":{"id":"0:4080:2010","crate_id":0,"name":"new_in","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[576,4],"end":[578,5]},"visibility":"public","docs":"Creates an empty deque.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet deque: VecDeque<u32> = VecDeque::new();\n```","links":{},"attrs":["#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7267:595":{"id":"0:7267:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[33,0],"end":[33,105]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"U"}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:6725:1970":{"id":"a:1:2644:214-0:6725:1970","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5345":{"id":"0:5345","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2433,0],"end":[2438,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:2973:5511","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeFull","id":"1:46305:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5346:743"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6698:668":{"id":"0:6698:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3157,4],"end":[3162,5]},"visibility":"default","docs":"Allocate a `Vec<T>` and move `s`'s items into it.\n\n# Examples\n\n```\nassert_eq!(Vec::from([1, 2, 3]), vec![1, 2, 3]);\n```","links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:367:995":{"id":"0:367:995","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/boxed.rs","begin":[1349,4],"end":[1351,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5305:895":{"id":"0:5305:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/string.rs","begin":[2217,4],"end":[2219,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3545:2751":{"id":"0:3545:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1740,4],"end":[1742,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:5513:69":{"id":"b:1:2216-0:5513:69","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2499-0:5964:3449":{"id":"b:1:2499-0:5964:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3391:5276":{"id":"0:3391:5276","crate_id":0,"name":"cursor_front","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[536,4],"end":[538,5]},"visibility":"public","docs":"Provides a cursor at the front element.\n\nThe cursor is pointing to the \"ghost\" non-element if the list is empty.","links":{},"attrs":["#[inline]","#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Cursor","id":"0:3462:5277","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3164:180":{"id":"0:3164:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1459,4],"end":[1459,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"b:1:2219-0:6749:3449":{"id":"b:1:2219-0:6749:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:6749:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3579":{"id":"0:3579","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1812,0],"end":[1818,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7012:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3581:670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2920:595":{"id":"0:2920:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[97,4],"end":[99,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4395:1928":{"id":"0:4395:1928","crate_id":0,"name":"into_vec","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[953,4],"end":[955,5]},"visibility":"public","docs":"Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.\n\n# Examples\n\n```\nuse std::ffi::CString;\n\nlet nul_error = CString::new(\"foo\\0bar\").unwrap_err();\nassert_eq!(nul_error.into_vec(), b\"foo\\0bar\");\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4578:2546":{"id":"0:4578:2546","crate_id":0,"name":"into_raw","span":{"filename":"library/alloc/src/rc.rs","begin":[846,4],"end":[850,5]},"visibility":"public","docs":"Consumes the `Rc`, returning the wrapped pointer.\n\nTo avoid a memory leak the pointer must be converted back to an `Rc` using\n[`Rc::from_raw`].\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet x = Rc::new(\"hello\".to_owned());\nlet x_ptr = Rc::into_raw(x);\nassert_eq!(unsafe { &*x_ptr }, \"hello\");\n```","links":{"`Rc::from_raw`":"0:4580:2513"},"attrs":["#[stable(feature = \"rc_raw\", since = \"1.17.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"generic","inner":"Self"}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1882":{"id":"0:1882","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2179,0],"end":[2184,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2305:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2305:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["le","ge","lt","gt"],"trait":{"name":"PartialOrd","id":"1:2305:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1886:995"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2495-0:6816:3475":{"id":"b:1:2495-0:6816:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1288:3929":{"id":"0:1288:3929","crate_id":0,"name":"get_mut","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[476,4],"end":[478,5]},"visibility":"public","docs":"Gets a mutable reference to the value in the entry.\n\nIf you need a reference to the `OccupiedEntry` that may outlive the\ndestruction of the `Entry` value, see [`into_mut`].\n\n[`into_mut`]: OccupiedEntry::into_mut\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nassert_eq!(map[\"poneyland\"], 12);\nif let Entry::Occupied(mut o) = map.entry(\"poneyland\") {\n    *o.get_mut() += 10;\n    assert_eq!(*o.get(), 22);\n\n    // We can use the same Entry multiple times.\n    *o.get_mut() += 2;\n}\nassert_eq!(map[\"poneyland\"], 24);\n```","links":{"OccupiedEntry::into_mut":"0:1289:4195"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5335:742":{"id":"0:5335:742","crate_id":0,"name":"index","span":{"filename":"library/alloc/src/string.rs","begin":[2397,4],"end":[2399,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"resolved_path","inner":{"name":"ops::RangeInclusive","id":"1:46387:195","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:1301:94":{"id":"b:1:2219-0:1301:94","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3303-0:4016:238":{"id":"b:1:3303-0:4016:238","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5976":{"id":"0:5976","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[43,0],"end":[139,1]},"visibility":{"restricted":{"parent":"0:5946:3448","path":"::vec::drain"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:5980:3433","0:5981:283","0:5982:10185"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5313":{"id":"0:5313","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2288,0],"end":[2293,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:8791:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5314:702"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3451:2751":{"id":"0:3451:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1098,4],"end":[1100,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4109:2762":{"id":"0:4109:2762","crate_id":0,"name":"is_empty","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1220,4],"end":[1222,5]},"visibility":"public","docs":"Returns `true` if the deque is empty.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque = VecDeque::new();\nassert!(deque.is_empty());\ndeque.push_front(1);\nassert!(!deque.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5182:2104":{"id":"0:5182:2104","crate_id":0,"name":"reserve_exact","span":{"filename":"library/alloc/src/string.rs","begin":[1076,4],"end":[1078,5]},"visibility":"public","docs":"Reserves the minimum capacity for at least `additional` bytes more than\nthe current length. Unlike [`reserve`], this will not\ndeliberately over-allocate to speculatively avoid frequent allocations.\nAfter calling `reserve_exact`, capacity will be greater than or equal to\n`self.len() + additional`. Does nothing if the capacity is already\nsufficient.\n\n[`reserve`]: String::reserve\n\n# Panics\n\nPanics if the new capacity overflows [`usize`].\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::new();\n\ns.reserve_exact(10);\n\nassert!(s.capacity() >= 10);\n```\n\nThis might not actually increase the capacity:\n\n```\nlet mut s = String::with_capacity(10);\ns.push('a');\ns.push('b');\n\n// s now has a length of 2 and a capacity of at least 10\nlet capacity = s.capacity();\nassert_eq!(2, s.len());\nassert!(capacity >= 10);\n\n// Since we already have at least an extra 8 capacity, calling this...\ns.reserve_exact(8);\n\n// ... doesn't actually increase.\nassert_eq!(capacity, s.capacity());\n```","links":{"String::reserve":"0:5181:2086","`usize`":"1:58453:10478"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5035":{"id":"0:5035","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[34,66],"end":[34,71]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::Chars","name":"Chars","id":"1:49935:7931","glob":false}},"b:0:671-0:3900:3356":{"id":"b:0:671-0:3900:3356","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:7258":{"id":"0:7258","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[31,0],"end":[31,122]},"visibility":{"restricted":{"parent":"0:6257:9314","path":"::vec::partial_eq"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"items":["0:7262:595","0:7263:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3237:2750":{"id":"0:3237:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1620,4],"end":[1620,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"0:5239":{"id":"0:5239","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2002,0],"end":[2008,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7012:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5240:670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4828":{"id":"0:4828","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[36,0],"end":[36,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"array_chunks\", issue = \"74985\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::ArrayChunksMut","name":"ArrayChunksMut","id":"1:49833:7669","glob":false}},"0:6009:571":{"id":"0:6009:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[177,4],"end":[241,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:7020-0:1376:3816":{"id":"b:1:7020-0:1376:3816","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:1376:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"1:11417:40325":{"id":"1:11417:40325","crate_id":1,"name":"strip_suffix","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[2167,4],"end":[2170,58]},"visibility":"public","docs":"Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```","links":{"self::pattern":"1:11013:1760","prim@char":"1:58430:10458"},"attrs":["#[must_use =\n\"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["suffix",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11033:7919","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6426:2086":{"id":"0:6426:2086","crate_id":0,"name":"reserve","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[906,4],"end":[908,5]},"visibility":"public","docs":"Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec<T>`. The collection may reserve more space to\nspeculatively avoid frequent reallocations. After calling `reserve`,\ncapacity will be greater than or equal to `self.len() + additional`.\nDoes nothing if capacity is already sufficient.\n\n# Panics\n\nPanics if the new capacity exceeds `isize::MAX` bytes.\n\n# Examples\n\n```\nlet mut vec = vec![1];\nvec.reserve(10);\nassert!(vec.capacity() >= 11);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4920:2777":{"id":"0:4920:2777","crate_id":0,"name":"to_vec_in","span":{"filename":"library/alloc/src/slice.rs","begin":[431,4],"end":[437,5]},"visibility":"public","docs":"Copies `self` into a new `Vec` with an allocator.\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nlet s = [10, 40, 30];\nlet x = s.to_vec_in(System);\n// Here, `s` and `x` can be modified independently.\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[rustc_allow_incoherent_impl]","#[inline]","#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:3328:157":{"id":"b:1:3303-0:3328:157","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5421":{"id":"0:5421","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2862,0],"end":[2874,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["write_char","write_fmt"],"trait":{"name":"Write","id":"1:8518:6928","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5422:1536","0:5423:8822"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:128:1968":{"id":"0:128:1968","crate_id":0,"name":"handle_alloc_error","span":{"filename":"library/alloc/src/alloc.rs","begin":[378,0],"end":[390,1]},"visibility":"public","docs":"Abort on memory allocation error or failure.\n\nCallers of memory allocation APIs wishing to abort computation\nin response to an allocation error are encouraged to call this function,\nrather than directly invoking `panic!` or similar.\n\nThe default behavior of this function is to print a message to standard error\nand abort the process.\nIt can be replaced with [`set_alloc_error_hook`] and [`take_alloc_error_hook`].\n\n[`set_alloc_error_hook`]: ../../std/alloc/fn.set_alloc_error_hook.html\n[`take_alloc_error_hook`]: ../../std/alloc/fn.take_alloc_error_hook.html","links":{},"attrs":["#[stable(feature = \"global_alloc\", since = \"1.28.0\")]","#[rustc_const_unstable(feature = \"const_alloc_error\", issue = \"92523\")]","#[cfg(all(not(no_global_oom_handling), not(test)))]","#[cold]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50943:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"primitive","inner":"never"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:7020-0:5424:3449":{"id":"b:1:7020-0:5424:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:5310:650":{"id":"0:5310:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/string.rs","begin":[2274,4],"end":[2276,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:722:59":{"id":"0:722:59","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/borrow.rs","begin":[415,4],"end":[417,5]},"visibility":"default","docs":"Creates an owned Cow<'a, B> with the default value for the contained owned value.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:6734:3475":{"id":"b:1:2505-0:6734:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4570":{"id":"0:4570","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[753,0],"end":[788,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4572:329"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:441":{"id":"0:441","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1664,0],"end":[1693,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"boxed_array_try_from_vec\", since = \"1.66.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}}],"bindings":[]}}}},"items":["0:445:126","0:446:1418"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11321:40310":{"id":"1:11321:40310","crate_id":1,"name":"as_bytes_mut","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[369,4],"end":[369,54]},"visibility":"public","docs":"Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:3671":{"id":"0:3671","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[2009,0],"end":[2009,49]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CursorMut","id":"0:3474:5281","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4699":{"id":"0:4699","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1933,0],"end":[1948,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:4700:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6951:595":{"id":"0:6951:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[159,16],"end":[159,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:549:670":{"id":"0:549:670","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/boxed.rs","begin":[2015,4],"end":[2017,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"I"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3486:742":{"id":"0:3486:742","crate_id":0,"name":"index","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1194,4],"end":[1197,5]},"visibility":"public","docs":"Returns the cursor position index within the `LinkedList`.\n\nThis returns `None` if the cursor is currently pointing to the\n\"ghost\" non-element.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3011:650":{"id":"0:3011:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[319,4],"end":[321,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:684:1545":{"id":"0:684:1545","crate_id":0,"name":"0","span":{"filename":"library/alloc/src/borrow.rs","begin":[189,56],"end":[189,77]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct_field","inner":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"B"},"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:362:595":{"id":"0:362:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/boxed.rs","begin":[1338,4],"end":[1340,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:1338:3356":{"id":"a:1:7710:3767-0:1338:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3393:5283":{"id":"0:3393:5283","crate_id":0,"name":"cursor_back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[556,4],"end":[558,5]},"visibility":"public","docs":"Provides a cursor at the back element.\n\nThe cursor is pointing to the \"ghost\" non-element if the list is empty.","links":{},"attrs":["#[inline]","#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Cursor","id":"0:3462:5277","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5058":{"id":"0:5058","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[49,28],"end":[49,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::Split","name":"Split","id":"1:49965:7687","glob":false}},"b:1:2216-0:3462:5277":{"id":"b:1:2216-0:3462:5277","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cursor","id":"0:3462:5277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6654":{"id":"0:6654","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3036,0],"end":[3036,45]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4750":{"id":"0:4750","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2199,0],"end":[2219,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4752:908"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:828:3367":{"id":"0:828:3367","crate_id":0,"name":"peek","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[888,4],"end":[890,5]},"visibility":"public","docs":"Returns the greatest item in the binary heap, or `None` if it is empty.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::new();\nassert_eq!(heap.peek(), None);\n\nheap.push(1);\nheap.push(5);\nheap.push(2);\nassert_eq!(heap.peek(), Some(&5));\n\n```\n\n# Time complexity\n\nCost is *O*(1) in the worst case.","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11402:40318":{"id":"1:11402:40318","crate_id":1,"name":"trim_start","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1906,4],"end":[1906,36]},"visibility":"public","docs":"Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_start\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2658:222-0:3531:4069":{"id":"a:1:2658:222-0:3531:4069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3531:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"1:11337:8022":{"id":"1:11337:8022","crate_id":1,"name":"char_indices","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[839,4],"end":[839,49]},"visibility":"public","docs":"Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```","links":{"prim@char":"1:58430:10458"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharIndices","id":"1:49941:7930","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:827:3363":{"id":"0:827:3363","crate_id":0,"name":"into_iter_sorted","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[861,4],"end":[863,5]},"visibility":"public","docs":"Returns an iterator which retrieves elements in heap order.\nThis method consumes the original heap.\n\n# Examples\n\nBasic usage:\n\n```\n#![feature(binary_heap_into_iter_sorted)]\nuse std::collections::BinaryHeap;\nlet heap = BinaryHeap::from([1, 2, 3, 4, 5]);\n\nassert_eq!(heap.into_iter_sorted().take(2).collect::<Vec<_>>(), [5, 4]);\n```","links":{},"attrs":["#[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:409:668":{"id":"0:409:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1476,4],"end":[1478,5]},"visibility":"default","docs":"Converts a `Box<T>` into a `Pin<Box<T>>`. If `T` does not implement [`Unpin`], then\n`*boxed` will be pinned in memory and unable to be moved.\n\nThis conversion does not allocate on the heap and happens in place.\n\nThis is also available via [`Box::into_pin`].\n\nConstructing and pinning a `Box` with <code><Pin<Box\\<T>>>::from([Box::new]\\(x))</code>\ncan also be written more concisely using <code>[Box::pin]\\(x)</code>.\nThis `From` implementation is useful if you already have a `Box<T>`, or you are\nconstructing a (pinned) `Box` in a different way than with [`Box::new`].","links":{"Box::new":"0:284:908","Box::pin":"0:287:1003","`Box::new`":"0:284:908","`Box::into_pin`":"0:337:2414","`Unpin`":"1:2708:2329"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["boxed",{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:3531:4069":{"id":"b:1:2216-0:3531:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3531:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6791":{"id":"0:6791","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[172,9],"end":[172,14]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:6787:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:6794:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3531:4069":{"id":"0:3531:4069","crate_id":0,"name":"DrainFilter","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1705,0],"end":[1714,1]},"visibility":"public","docs":"An iterator produced by calling `drain_filter` on LinkedList.","links":{},"attrs":["#[unstable(feature = \"drain_filter\", reason = \"recently added\", issue =\n\"43244\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"generic_params":[]}}]},"impls":["a:1:2658:222-0:3531:4069","a:1:2644:214-0:3531:4069","a:1:2708:2329-0:3531:4069","a:1:7709:3766-0:3531:4069","a:1:7710:3767-0:3531:4069","b:1:7020-0:3531:4069","b:1:2510-0:3531:4069","b:1:2505-0:3531:4069","b:1:2216-0:3531:4069","b:1:3303-0:3531:4069","b:1:2219-0:3531:4069","b:1:2499-0:3531:4069","b:1:2495-0:3531:4069","0:3540","0:3546","0:3563"]}},"0:5538":{"id":"0:5538","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[307,0],"end":[307,56]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"arc_weak\", since = \"1.4.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7709:3766-0:768:96":{"id":"a:1:7709:3766-0:768:96","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:3303-0:3462:5277":{"id":"b:1:3303-0:3462:5277","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cursor","id":"0:3462:5277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2216-0:6816:3475":{"id":"b:1:2216-0:6816:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6892":{"id":"0:6892","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[80,27],"end":[80,29]},"visibility":{"restricted":{"parent":"0:744:1794","path":"::collections"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"try_reserve_kind\", reason =\n\"Uncertain how much info should be exposed\", issue = \"48043\")]","#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralEq","id":"1:2655:219","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2708:2329-0:5424:3449":{"id":"a:1:2708:2329-0:5424:3449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4245":{"id":"0:4245","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2835,0],"end":[2881,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"vecdeque_vec_conversions\", since = \"1.10.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:4248:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2510-0:859:3356":{"id":"b:1:2510-0:859:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4261":{"id":"0:4261","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[43,0],"end":[43,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"btree_set::BTreeSet","name":"BTreeSet","id":"0:2908:95","glob":false}},"b:0:5362-0:215:2341":{"id":"b:0:5362-0:215:2341","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2526,0],"end":[2540,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5360:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5364:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5391:668":{"id":"0:5391:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[2699,4],"end":[2701,5]},"visibility":"default","docs":"Converts the given boxed `str` slice to a [`String`].\nIt is notable that the `str` slice is owned.\n\n# Examples\n\nBasic usage:\n\n```\nlet s1: String = String::from(\"hello world\");\nlet s2: Box<str> = s1.into_boxed_str();\nlet s3: String = String::from(s2);\n\nassert_eq!(\"hello world\", s3)\n```","links":{"`String`":"0:6980:218"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4451":{"id":"0:4451","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[569,39],"end":[569,44]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::Write","name":"Write","id":"1:8518:6928","glob":false}},"0:964":{"id":"0:964","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1586,0],"end":[1599,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"std_collections_from_array\", since = \"1.56.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:968:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3222":{"id":"0:3222","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1592,0],"end":[1596,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:6787:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3225:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6120:921":{"id":"0:6120:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[187,4],"end":[203,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3042:2753":{"id":"0:3042:2753","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[826,4],"end":[831,5]},"visibility":"public","docs":"Returns a reference to the last element in the set, if any.\nThis element is always the maximum of all elements in the set.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::new();\nassert_eq!(set.last(), None);\nset.insert(1);\nassert_eq!(set.last(), Some(&1));\nset.insert(2);\nassert_eq!(set.last(), Some(&2));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"map_first_last\", since = \"1.66.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3809:2750":{"id":"0:3809:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[32,4],"end":[32,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}}}},"0:6423:6474":{"id":"0:6423:6474","crate_id":0,"name":"into_raw_parts","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[818,4],"end":[821,5]},"visibility":"public","docs":"Decomposes a `Vec<T>` into its raw components.\n\nReturns the raw pointer to the underlying data, the length of\nthe vector (in elements), and the allocated capacity of the\ndata (in elements). These are the same arguments in the same\norder as the arguments to [`from_raw_parts`].\n\nAfter calling this function, the caller is responsible for the\nmemory previously managed by the `Vec`. The only way to do\nthis is to convert the raw pointer, length, and capacity back\ninto a `Vec` with the [`from_raw_parts`] function, allowing\nthe destructor to perform the cleanup.\n\n[`from_raw_parts`]: Vec::from_raw_parts\n\n# Examples\n\n```\n#![feature(vec_into_raw_parts)]\nlet v: Vec<i32> = vec![-1, 0, 1];\n\nlet (ptr, len, cap) = v.into_raw_parts();\n\nlet rebuilt = unsafe {\n    // We can now make changes to the components, such as\n    // transmuting the raw pointer to a compatible type.\n    let ptr = ptr as *mut u32;\n\n    Vec::from_raw_parts(ptr, len, cap)\n};\nassert_eq!(rebuilt, [4294967295, 0, 1]);\n```","links":{"Vec::from_raw_parts":"0:6416:2866"},"attrs":["#[unstable(feature = \"vec_into_raw_parts\", reason = \"new API\", issue =\n\"65816\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"generic","inner":"T"}}},{"kind":"primitive","inner":"usize"},{"kind":"primitive","inner":"usize"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6567:538":{"id":"0:6567:538","crate_id":0,"name":"deref_mut","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2639,4],"end":[2641,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:288:2380":{"id":"0:288:2380","crate_id":0,"name":"try_new","span":{"filename":"library/alloc/src/boxed.rs","begin":[306,4],"end":[308,5]},"visibility":"public","docs":"Allocates memory on the heap then places `x` into it,\nreturning an error if the allocation fails\n\nThis doesn't actually allocate if `T` is zero-sized.\n\n# Examples\n\n```\n#![feature(allocator_api)]\n\nlet five = Box::try_new(5)?;\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["x",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50972:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1713:921":{"id":"0:1713:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1871,4],"end":[1873,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5756:668":{"id":"0:5756:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/sync.rs","begin":[2608,4],"end":[2615,5]},"visibility":"default","docs":"Allocate a reference-counted slice and move `v`'s items into it.\n\n# Example\n\n```\n# use std::sync::Arc;\nlet unique: Vec<i32> = vec![1, 2, 3];\nlet shared: Arc<[i32]> = Arc::from(unique);\nassert_eq!(&[1, 2, 3], &shared[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["v",{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3173":{"id":"0:3173","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1496,0],"end":[1518,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3176:2750","0:3177:921","0:3178:2751","0:3179:2753","0:3180:4091","0:3181:2120"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2510-0:1376:3816":{"id":"b:1:2510-0:1376:3816","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:1376:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2505-0:6749:3449":{"id":"b:1:2505-0:6749:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:6749:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5439":{"id":"0:5439","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2940,0],"end":[2944,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"string_drain_as_str\", since = \"1.55.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2463:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:5441:307"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1517:2751":{"id":"0:1517:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1494,4],"end":[1496,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:3462:5277":{"id":"a:1:7709:3766-0:3462:5277","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cursor","id":"0:3462:5277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5091:2903":{"id":"0:5091:2903","crate_id":0,"name":"to_owned","span":{"filename":"library/alloc/src/str.rs","begin":[208,4],"end":[210,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3124:2751":{"id":"0:3124:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1336,4],"end":[1338,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:734":{"id":"0:734","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[452,0],"end":[460,1]},"visibility":{"restricted":{"parent":"0:648:1793","path":"::borrow"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"cow_add\", since = \"1.14.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"1:2735:2887","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:736:180","0:737:267"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4084:3929":{"id":"0:4084:3929","crate_id":0,"name":"get_mut","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[671,4],"end":[678,5]},"visibility":"public","docs":"Provides a mutable reference to the element at the given index.\n\nElement at index 0 is the front of the queue.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(3);\nbuf.push_back(4);\nbuf.push_back(5);\nif let Some(elem) = buf.get_mut(1) {\n    *elem = 7;\n}\n\nassert_eq!(buf[1], 7);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2658:222-0:6869:1971":{"id":"a:1:2658:222-0:6869:1971","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6593:742":{"id":"0:6593:742","crate_id":0,"name":"index","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2726,4],"end":[2728,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"generic","inner":"I"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:2969:3662","args":null}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3031:3451":{"id":"0:3031:3451","crate_id":0,"name":"clear","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[593,4],"end":[598,5]},"visibility":"public","docs":"Clears the set, removing all elements.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut v = BTreeSet::new();\nv.insert(1);\nv.clear();\nassert!(v.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5033":{"id":"0:5033","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[34,46],"end":[34,51]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::Bytes","name":"Bytes","id":"1:49951:7929","glob":false}},"0:6861":{"id":"0:6861","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2688,0],"end":[2688,67]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"vec_deque_partial_eq_slice\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"U"},"len":"N"}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6867:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3448:2750":{"id":"0:3448:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1080,4],"end":[1080,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}}}},"a:1:2708:2329-0:1394:3826":{"id":"a:1:2708:2329-0:1394:3826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:1394:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5883:10185":{"id":"0:5883:10185","crate_id":0,"name":"keep_rest","span":{"filename":"library/alloc/src/vec/drain_filter.rs","begin":[80,4],"end":[112,5]},"visibility":"public","docs":"Keep unyielded elements in the source `Vec`.\n\n# Examples\n\n```\n#![feature(drain_filter)]\n#![feature(drain_keep_rest)]\n\nlet mut vec = vec!['a', 'b', 'c'];\nlet mut drain = vec.drain_filter(|_| true);\n\nassert_eq!(drain.next().unwrap(), 'a');\n\n// This call keeps 'b' and 'c' in the vec.\ndrain.keep_rest();\n\n// If we wouldn't call `keep_rest()`,\n// `vec` would be empty.\nassert_eq!(vec, ['b', 'c']);\n```","links":{},"attrs":["#[unstable(feature = \"drain_keep_rest\", issue = \"101122\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:2944:4916":{"id":"b:1:2505-0:2944:4916","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:2944:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3198":{"id":"0:3198","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1548,0],"end":[1552,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6779:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3201:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4194":{"id":"0:4194","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2730,0],"end":[2735,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:2973:5511","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:4197:743"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3498":{"id":"0:3498","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1304,0],"end":[1412,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"CursorMut","id":"0:3474:5281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3501:742","0:3502:5369","0:3503:5371","0:3505:5278","0:3507:5415","0:3509:5417","0:3511:5425"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2505-0:3723:3449":{"id":"b:1:2505-0:3723:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:3723:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3615:2885":{"id":"0:3615:2885","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1878,4],"end":[1880,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:797":{"id":"0:797","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[344,0],"end":[350,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:799:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:296:2357":{"id":"0:296:2357","crate_id":0,"name":"new_uninit_in","span":{"filename":"library/alloc/src/boxed.rs","begin":[449,4],"end":[460,5]},"visibility":"public","docs":"Constructs a new box with uninitialized contents in the provided allocator.\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nuse std::alloc::System;\n\nlet mut five = Box::<u32, _>::new_uninit_in(System);\n\nlet five = unsafe {\n    // Deferred initialization:\n    five.as_mut_ptr().write(5);\n\n    five.assume_init()\n};\n\nassert_eq!(*five, 5)\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]","#[cfg(not(no_global_oom_handling))]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe_const"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:7020-0:6083:3475":{"id":"b:1:7020-0:6083:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:6845":{"id":"0:6845","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2686,0],"end":[2686,62]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"vec_deque_partial_eq_slice\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"U"},"len":"N"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6851:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:7035:595":{"id":"0:7035:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[2255,0],"end":[2255,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2658:222-0:1680:4069":{"id":"a:1:2658:222-0:1680:4069","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:1680:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5037":{"id":"0:5037","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[36,20],"end":[36,39]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::from_utf8_unchecked","name":"from_utf8_unchecked","id":"1:10583:7932","glob":false}},"0:6495:3451":{"id":"0:6495:3451","crate_id":0,"name":"clear","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2030,4],"end":[2043,5]},"visibility":"public","docs":"Clears the vector, removing all values.\n\nNote that this method has no effect on the allocated capacity\nof the vector.\n\n# Examples\n\n```\nlet mut v = vec![1, 2, 3];\n\nv.clear();\n\nassert!(v.is_empty());\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6616":{"id":"0:6616","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2808,0],"end":[2815,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"items":["0:6620:2750","0:6621:3475","0:6622:757"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1399":{"id":"0:1399","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[475,0],"end":[479,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"map_values_mut\", since = \"1.10.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:1394:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1402:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:788:538":{"id":"0:788:538","crate_id":0,"name":"deref_mut","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[314,4],"end":[319,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1551:2751":{"id":"0:1551:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1563,4],"end":[1565,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6435:4583":{"id":"0:6435:4583","crate_id":0,"name":"as_mut_slice","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1203,4],"end":[1205,5]},"visibility":"public","docs":"Extracts a mutable slice of the entire vector.\n\nEquivalent to `&mut s[..]`.\n\n# Examples\n\n```\nuse std::io::{self, Read};\nlet mut buffer = vec![0; 3];\nio::repeat(0b101).read_exact(buffer.as_mut_slice()).unwrap();\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"vec_as_slice\", since = \"1.7.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:1359:3475":{"id":"a:1:2708:2329-0:1359:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1359:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:388:2221":{"id":"0:388:2221","crate_id":0,"name":"write","span":{"filename":"library/alloc/src/boxed.rs","begin":[1391,4],"end":[1393,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["bytes",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4026:411":{"id":"0:4026:411","crate_id":0,"name":"clone_from","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[116,4],"end":[119,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:6881:1972":{"id":"b:1:2495-0:6881:1972","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5417:670":{"id":"0:5417:670","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/string.rs","begin":[2834,4],"end":[2836,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["it",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1775:2759":{"id":"0:1775:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2009,4],"end":[2011,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:1348:3805":{"id":"b:1:2499-0:1348:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:1348:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:593:1011":{"id":"0:593:1011","crate_id":0,"name":"poll","span":{"filename":"library/alloc/src/boxed.rs","begin":[2123,4],"end":[2125,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"1:48133:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["cx",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Context","id":"1:11824:2336","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Poll","id":"1:50887:189","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:11595:134","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:1385:3820":{"id":"a:1:7709:3766-0:1385:3820","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:1385:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:0:5362-0:6944:6202":{"id":"b:0:5362-0:6944:6202","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2526,0],"end":[2540,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5360:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5364:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7709:3766-0:1201:3672":{"id":"a:1:7709:3766-0:1201:3672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:1201:3672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:6913:409":{"id":"0:6913:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[109,47],"end":[109,52]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1242":{"id":"0:1242","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[122,0],"end":[134,1]},"visibility":{"restricted":{"parent":"0:1169:3668","path":"::collections::btree::map::entry"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"map_try_insert\", issue = \"82766\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedError","id":"0:1230:3671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1247:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6675:307":{"id":"0:6675:307","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3080,4],"end":[3082,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4929:7831":{"id":"0:4929:7831","crate_id":0,"name":"connect","span":{"filename":"library/alloc/src/slice.rs","begin":[591,4],"end":[596,5]},"visibility":"public","docs":"Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.\n\n# Examples\n\n```\n# #![allow(deprecated)]\nassert_eq!([\"hello\", \"world\"].connect(\" \"), \"hello world\");\nassert_eq!([[1, 2], [3, 4]].connect(&0), [1, 2, 0, 3, 4]);\n```","links":{},"attrs":["#[rustc_allow_incoherent_impl]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[deprecated(since = \"1.3.0\", note = \"renamed to join\")]"],"deprecation":{"since":"1.3.0","note":"renamed to join"},"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["sep",{"kind":"generic","inner":"Separator"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Join","id":"0:4938:7826","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Separator"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[{"name":"Separator","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Join","id":"0:4938:7826","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Separator"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3272":{"id":"0:3272","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1764,0],"end":[1768,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:3004:4940","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3274:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3037:5020":{"id":"0:3037:5020","crate_id":0,"name":"is_subset","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[694,4],"end":[750,5]},"visibility":"public","docs":"Returns `true` if the set is a subset of another,\ni.e., `other` contains at least all the elements in `self`.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet sup = BTreeSet::from([1, 2, 3]);\nlet mut set = BTreeSet::new();\n\nassert_eq!(set.is_subset(&sup), true);\nset.insert(2);\nassert_eq!(set.is_subset(&sup), true);\nset.insert(4);\nassert_eq!(set.is_subset(&sup), false);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4547:7155":{"id":"0:4547:7155","crate_id":0,"name":"new_cyclic","span":{"filename":"library/alloc/src/rc.rs","begin":[440,4],"end":[480,5]},"visibility":"public","docs":"Constructs a new `Rc<T>` while giving you a `Weak<T>` to the allocation,\nto allow you to construct a `T` which holds a weak pointer to itself.\n\nGenerally, a structure circularly referencing itself, either directly or\nindirectly, should not hold a strong reference to itself to prevent a memory leak.\nUsing this function, you get access to the weak pointer during the\ninitialization of `T`, before the `Rc<T>` is created, such that you can\nclone and store it inside the `T`.\n\n`new_cyclic` first allocates the managed allocation for the `Rc<T>`,\nthen calls your closure, giving it a `Weak<T>` to this allocation,\nand only afterwards completes the construction of the `Rc<T>` by placing\nthe `T` returned from your closure into the allocation.\n\nSince the new `Rc<T>` is not fully-constructed until `Rc<T>::new_cyclic`\nreturns, calling [`upgrade`] on the weak reference inside your closure will\nfail and result in a `None` value.\n\n# Panics\n\nIf `data_fn` panics, the panic is propagated to the caller, and the\ntemporary [`Weak<T>`] is dropped normally.\n\n# Examples\n\n```\n# #![allow(dead_code)]\nuse std::rc::{Rc, Weak};\n\nstruct Gadget {\n    me: Weak<Gadget>,\n}\n\nimpl Gadget {\n    /// Construct a reference counted Gadget.\n    fn new() -> Rc<Self> {\n        // `me` is a `Weak<Gadget>` pointing at the new allocation of the\n        // `Rc` we're constructing.\n        Rc::new_cyclic(|me| {\n            // Create the actual struct here.\n            Gadget { me: me.clone() }\n        })\n    }\n\n    /// Return a reference counted pointer to Self.\n    fn me(&self) -> Rc<Self> {\n        self.me.upgrade().unwrap()\n    }\n}\n```\n[`upgrade`]: Weak::upgrade","links":{"Weak::upgrade":"0:4764:7614","`Weak<T>`":"0:4737:7157"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"arc_new_cyclic\", since = \"1.60.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["data_fn",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2920:2768","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"output":{"kind":"generic","inner":"T"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4440":{"id":"0:4440","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[565,20],"end":[565,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::Debug","name":"Debug","id":"1:8571:110","glob":false}},"0:3626:995":{"id":"0:3626:995","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1904,4],"end":[1906,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:3723:3449":{"id":"b:1:2510-0:3723:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:3723:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3411:5349":{"id":"0:3411:5349","crate_id":0,"name":"pop_back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[857,4],"end":[859,5]},"visibility":"public","docs":"Removes the last element from a list and returns it, or `None` if\nit is empty.\n\nThis operation should compute in *O*(1) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\nassert_eq!(d.pop_back(), None);\nd.push_back(1);\nd.push_back(3);\nassert_eq!(d.pop_back(), Some(3));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:2978:4931":{"id":"b:1:2219-0:2978:4931","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:2978:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4922:1928":{"id":"0:4922:1928","crate_id":0,"name":"into_vec","span":{"filename":"library/alloc/src/slice.rs","begin":[456,4],"end":[459,5]},"visibility":"public","docs":"Converts `self` into a vector without clones or allocation.\n\nThe resulting vector can be converted back into a box via\n`Vec<T>`'s `into_boxed_slice` method.\n\n# Examples\n\n```\nlet s: Box<[i32]> = Box::new([10, 40, 30]);\nlet x = s.into_vec();\n// `s` cannot be used anymore because it has been converted into `x`.\n\nassert_eq!(x, vec![10, 40, 30]);\n```","links":{},"attrs":["#[rustc_allow_incoherent_impl]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1892":{"id":"0:1892","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2195,0],"end":[2199,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1896:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3303-0:3352:3805":{"id":"b:1:3303-0:3352:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3352:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11335:7959":{"id":"1:11335:7959","crate_id":1,"name":"split_at_mut","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[716,4],"end":[716,70]},"visibility":"public","docs":"Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```","links":{"str::split_at":"1:11334:5579"},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["mid",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"primitive","inner":"str"}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3410:5344":{"id":"0:3410:5344","crate_id":0,"name":"push_back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[836,4],"end":[838,5]},"visibility":"public","docs":"Appends an element to the back of a list.\n\nThis operation should compute in *O*(1) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut d = LinkedList::new();\nd.push_back(1);\nd.push_back(3);\nassert_eq!(3, *d.back().unwrap());\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["elt",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3443":{"id":"0:3443","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1076,0],"end":[1076,40]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:0:5362-0:4521:198":{"id":"b:0:5362-0:4521:198","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2526,0],"end":[2540,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5360:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5364:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3303-0:6407:237":{"id":"b:1:3303-0:6407:237","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:704":{"id":"0:704","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[361,0],"end":[370,1]},"visibility":{"restricted":{"parent":"0:648:1793","path":"::borrow"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"C","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"C"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"C"},"bounds":[{"trait_bound":{"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'b"},{"type":{"kind":"generic","inner":"C"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["0:709:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:403":{"id":"0:403","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1440,0],"end":[1457,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"from_for_ptrs\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:405:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7710:3767-0:3723:3449":{"id":"a:1:7710:3767-0:3723:3449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:3723:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4957:180":{"id":"0:4957:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/slice.rs","begin":[741,4],"end":[741,25]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}},"a:1:7709:3766-0:2970:4926":{"id":"a:1:7709:3766-0:2970:4926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:2970:4926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2495-0:2937:3356":{"id":"b:1:2495-0:2937:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5536":{"id":"0:5536","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[305,0],"end":[305,56]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"arc_weak\", since = \"1.4.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6707:668":{"id":"0:6707:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3207,4],"end":[3209,5]},"visibility":"default","docs":"Convert a boxed slice into a vector by transferring ownership of\nthe existing heap allocation.\n\n# Examples\n\n```\nlet b: Box<[i32]> = vec![1, 2, 3].into_boxed_slice();\nassert_eq!(Vec::from(b), vec![1, 2, 3]);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3583":{"id":"0:3583","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1821,0],"end":[1830,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3585:2750","0:3586:3475","0:3587:757"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2708:2329-0:859:3356":{"id":"a:1:2708:2329-0:859:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:7709:3766-0:3339:3356":{"id":"a:1:7709:3766-0:3339:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2216-0:1359:3475":{"id":"b:1:2216-0:1359:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1359:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2216-0:6725:1970":{"id":"b:1:2216-0:6725:1970","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:688:411":{"id":"0:688:411","crate_id":0,"name":"clone_from","span":{"filename":"library/alloc/src/borrow.rs","begin":[204,4],"end":[209,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["source",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2944:4916":{"id":"0:2944:4916","crate_id":0,"name":"Difference","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[187,0],"end":[193,1]},"visibility":"public","docs":"A lazy iterator producing elements in the difference of `BTreeSet`s.\n\nThis `struct` is created by the [`difference`] method on [`BTreeSet`].\nSee its documentation for more.\n\n[`difference`]: BTreeSet::difference","links":{"BTreeSet::difference":"0:3023:4966","`BTreeSet`":"0:2908:95"},"attrs":["#[must_use =\n\"this returns the difference as an iterator, \\\n              without modifying either input set\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:2944:4916","a:1:2644:214-0:2944:4916","a:1:2708:2329-0:2944:4916","a:1:7709:3766-0:2944:4916","a:1:7710:3767-0:2944:4916","b:0:671-0:2944:4916","b:1:7020-0:2944:4916","b:1:2510-0:2944:4916","b:1:2505-0:2944:4916","b:1:2216-0:2944:4916","b:1:3303-0:2944:4916","b:1:2219-0:2944:4916","b:1:2499-0:2944:4916","b:1:2495-0:2944:4916","0:2966","0:3229","0:3233","0:3242"]}},"0:1680:4069":{"id":"0:1680:4069","crate_id":0,"name":"DrainFilter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1814,0],"end":[1827,1]},"visibility":"public","docs":"An iterator produced by calling `drain_filter` on BTreeMap.","links":{},"attrs":["#[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"impls":["a:1:2658:222-0:1680:4069","a:1:2644:214-0:1680:4069","a:1:2708:2329-0:1680:4069","a:1:7709:3766-0:1680:4069","a:1:7710:3767-0:1680:4069","b:1:7020-0:1680:4069","b:1:2510-0:1680:4069","b:1:2505-0:1680:4069","b:1:2216-0:1680:4069","b:1:3303-0:1680:4069","b:1:2219-0:1680:4069","b:1:2499-0:1680:4069","b:1:2495-0:1680:4069","0:1696","0:1702","0:1707","0:1725"]}},"0:950":{"id":"0:950","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1549,0],"end":[1562,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainSorted","id":"0:6757:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:952:2750","0:953:921","0:954:2751"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:524":{"id":"0:524","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1984,0],"end":[1990,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Tuple","id":"1:2721:2328","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2920:2768","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FnOnce","id":"1:2920:2768","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:528:180","0:529:380"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3303-0:859:3356":{"id":"b:1:3303-0:859:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2708:2329-0:3339:3356":{"id":"a:1:2708:2329-0:3339:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1195:1545":{"id":"0:1195:1545","crate_id":0,"name":"0","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[32,59],"end":[32,85]},"visibility":"default","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct_field","inner":{"kind":"resolved_path","inner":{"name":"OccupiedEntry","id":"0:1216:3670","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}},"0:2928":{"id":"0:2928","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[113,0],"end":[117,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","clamp","min"],"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:2931:416"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4588:7294":{"id":"0:4588:7294","crate_id":0,"name":"get_mut_unchecked","span":{"filename":"library/alloc/src/rc.rs","begin":[1147,4],"end":[1151,5]},"visibility":"public","docs":"Returns a mutable reference into the given `Rc`,\nwithout any check.\n\nSee also [`get_mut`], which is safe and does appropriate checks.\n\n[`get_mut`]: Rc::get_mut\n\n# Safety\n\nIf any other `Rc` or [`Weak`] pointers to the same allocation exist, then\nthey must be must not be dereferenced or have active borrows for the duration\nof the returned borrow, and their inner type must be exactly the same as the\ninner type of this Rc (including lifetimes). This is trivially the case if no\nsuch pointers exist, for example immediately after `Rc::new`.\n\n# Examples\n\n```\n#![feature(get_mut_unchecked)]\n\nuse std::rc::Rc;\n\nlet mut x = Rc::new(String::new());\nunsafe {\n    Rc::get_mut_unchecked(&mut x).push_str(\"foo\")\n}\nassert_eq!(*x, \"foo\");\n```\nOther `Rc` pointers to the same allocation must be to the same type.\n```no_run\n#![feature(get_mut_unchecked)]\n\nuse std::rc::Rc;\n\nlet x: Rc<str> = Rc::from(\"Hello, world!\");\nlet mut y: Rc<[u8]> = x.clone().into();\nunsafe {\n    // this is Undefined Behavior, because x's inner type is str, not [u8]\n    Rc::get_mut_unchecked(&mut y).fill(0xff); // 0xff is invalid in UTF-8\n}\nprintln!(\"{}\", &*x); // Invalid UTF-8 in a str\n```\nOther `Rc` pointers to the same allocation must be to the exact same type, including lifetimes.\n```no_run\n#![feature(get_mut_unchecked)]\n\nuse std::rc::Rc;\n\nlet x: Rc<&str> = Rc::new(\"Hello, world!\");\n{\n    let s = String::from(\"Oh, no!\");\n    let mut y: Rc<&str> = x.clone().into();\n    unsafe {\n        // this is Undefined Behavior, because x's inner type\n        // is &'long str, not &'short str\n        *Rc::get_mut_unchecked(&mut y) = &s;\n    }\n}\nprintln!(\"{}\", &*x); // Use-after-free\n```","links":{"Rc::get_mut":"0:4587:3929","`Weak`":"0:4737:7157"},"attrs":["#[inline]","#[unstable(feature = \"get_mut_unchecked\", issue = \"63292\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:6027":{"id":"0:6027","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[252,0],"end":[252,62]},"visibility":{"restricted":{"parent":"0:5946:3448","path":"::vec::drain"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"trusted_len\", issue = \"37572\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TrustedLen","id":"1:7403:3146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2216-0:6083:3475":{"id":"b:1:2216-0:6083:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2499-0:5533:7157":{"id":"b:1:2499-0:5533:7157","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5282":{"id":"0:5282","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2141,0],"end":[2150,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"extend_string\", since = \"1.4.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7025:3507","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5283:2885","0:5286:1746"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4244:668":{"id":"0:4244:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2828,4],"end":[2831,5]},"visibility":"default","docs":"Turn a [`Vec<T>`] into a [`VecDeque<T>`].\n\n[`Vec<T>`]: crate::vec::Vec\n[`VecDeque<T>`]: crate::collections::VecDeque\n\nIn its current implementation, this is a very cheap\nconversion. This isn't yet a guarantee though, and\nshouldn't be relied on.","links":{"crate::collections::VecDeque":"0:4016:238","crate::vec::Vec":"0:6407:237"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["other",{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7031:895":{"id":"0:7031:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/string.rs","begin":[2255,0],"end":[2255,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1916:768":{"id":"0:1916:768","crate_id":0,"name":"iter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2265,4],"end":[2273,5]},"visibility":"public","docs":"Gets an iterator over the entries of the map, sorted by key.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(3, \"c\");\nmap.insert(2, \"b\");\nmap.insert(1, \"a\");\n\nfor (key, value) in map.iter() {\n    println!(\"{key}: {value}\");\n}\n\nlet (first_key, first_value) = map.iter().next().unwrap();\nassert_eq!((*first_key, *first_value), (1, \"a\"));\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:0:671-0:1426:192":{"id":"b:0:671-0:1426:192","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:1426:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6608:757":{"id":"0:6608:757","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2774,4],"end":[2794,5]},"visibility":"default","docs":"Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.\n\n# Examples\n\n```\nlet v = vec![\"a\".to_string(), \"b\".to_string()];\nlet mut v_iter = v.into_iter();\n\nlet first_element: Option<String> = v_iter.next();\n\nassert_eq!(first_element, Some(\"a\".to_string()));\nassert_eq!(v_iter.next(), Some(\"b\".to_string()));\nassert_eq!(v_iter.next(), None);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7016:147","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6537":{"id":"0:6537","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2527,0],"end":[2547,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6540:10045"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5:1505":{"id":"0:5:1505","crate_id":0,"name":"vec","span":{"filename":"library/alloc/src/macros.rs","begin":[42,0],"end":[55,1]},"visibility":"public","docs":"Creates a [`Vec`] containing the arguments.\n\n`vec!` allows `Vec`s to be defined with the same syntax as array expressions.\nThere are two forms of this macro:\n\n- Create a [`Vec`] containing a given list of elements:\n\n```\nlet v = vec![1, 2, 3];\nassert_eq!(v[0], 1);\nassert_eq!(v[1], 2);\nassert_eq!(v[2], 3);\n```\n\n- Create a [`Vec`] from a given element and size:\n\n```\nlet v = vec![1; 3];\nassert_eq!(v, [1, 1, 1]);\n```\n\nNote that unlike array expressions this syntax supports all elements\nwhich implement [`Clone`] and the number of elements doesn't have to be\na constant.\n\nThis will use `clone` to duplicate an expression, so one should be careful\nusing this with types having a nonstandard `Clone` implementation. For\nexample, `vec![Rc::new(1); 5]` will create a vector of five references\nto the same boxed integer value, not five references pointing to independently\nboxed integers.\n\nAlso, note that `vec![expr; 0]` is allowed, and produces an empty vector.\nThis will still evaluate `expr`, however, and immediately drop the resulting value, so\nbe mindful of side effects.\n\n[`Vec`]: crate::vec::Vec","links":{"crate::vec::Vec":"0:6407:237","`Clone`":"1:2233:105"},"attrs":["#[cfg(all(not(no_global_oom_handling), not(test)))]","#[macro_export]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"vec_macro\"]","#[allow_internal_unstable(rustc_attrs, liballoc_internals)]"],"deprecation":null,"kind":"macro","inner":"macro_rules! vec {\n    () => { ... };\n    ($elem:expr; $n:expr) => { ... };\n    ($($x:expr),+ $(,)?) => { ... };\n}"},"0:1635:4091":{"id":"0:1635:4091","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1738,4],"end":[1740,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5601:7279":{"id":"0:5601:7279","crate_id":0,"name":"decrement_strong_count","span":{"filename":"library/alloc/src/sync.rs","begin":[1104,4],"end":[1106,5]},"visibility":"public","docs":"Decrements the strong reference count on the `Arc<T>` associated with the\nprovided pointer by one.\n\n# Safety\n\nThe pointer must have been obtained through `Arc::into_raw`, and the\nassociated `Arc` instance must be valid (i.e. the strong count must be at\nleast 1) when invoking this method. This method can be used to release the final\n`Arc` and backing storage, but **should not** be called after the final `Arc` has been\nreleased.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nunsafe {\n    let ptr = Arc::into_raw(five);\n    Arc::increment_strong_count(ptr);\n\n    // Those assertions are deterministic because we haven't shared\n    // the `Arc` between threads.\n    let five = Arc::from_raw(ptr);\n    assert_eq!(2, Arc::strong_count(&five));\n    Arc::decrement_strong_count(ptr);\n    assert_eq!(1, Arc::strong_count(&five));\n}\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"arc_mutate_strong_count\", since = \"1.51.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["ptr",{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:276:1792":{"id":"a:1:7710:3767-0:276:1792","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1603":{"id":"0:1603","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1691,0],"end":[1702,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1359:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1607:2750","0:1608:921","0:1610:2751"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7709:3766-0:5424:3449":{"id":"a:1:7709:3766-0:5424:3449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5185:2111":{"id":"0:5185:2111","crate_id":0,"name":"shrink_to_fit","span":{"filename":"library/alloc/src/string.rs","begin":[1174,4],"end":[1176,5]},"visibility":"public","docs":"Shrinks the capacity of this `String` to match its length.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"foo\");\n\ns.reserve(100);\nassert!(s.capacity() >= 100);\n\ns.shrink_to_fit();\nassert_eq!(3, s.capacity());\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4521:198":{"id":"0:4521:198","crate_id":0,"name":"Rc","span":{"filename":"library/alloc/src/rc.rs","begin":[318,0],"end":[321,1]},"visibility":"public","docs":"A single-threaded reference-counting pointer. 'Rc' stands for 'Reference\nCounted'.\n\nSee the [module-level documentation](./index.html) for more details.\n\nThe inherent methods of `Rc` are all associated functions, which means\nthat you have to call them as e.g., [`Rc::get_mut(&mut value)`][get_mut] instead of\n`value.get_mut()`. This avoids conflicts with methods of the inner type `T`.\n\n[get_mut]: Rc::get_mut","links":{"Rc::get_mut":"0:4587:3929"},"attrs":["#[rustc_diagnostic_item = \"Rc\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_insignificant_dtor]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:4544","0:4564","0:4570","0:4573","0:4576","0:4590","0:4595","b:0:5362-0:4521:198","b:0:671-0:4521:198","b:1:2510-0:4521:198","b:1:2505-0:4521:198","b:1:2216-0:4521:198","b:1:3303-0:4521:198","b:1:2219-0:4521:198","b:1:2502-0:4521:198","b:1:2499-0:4521:198","b:1:2495-0:4521:198","0:4387","0:4389","0:4525","0:4527","0:4529","0:4531","0:4533","0:4536","0:4634","0:4640","0:4643","0:4646","0:4664","0:4668","0:4670","0:4677","0:4680","0:4684","0:4687","0:4690","0:4693","0:4696","0:4699","0:4701","0:4703","0:4706","0:4709","0:4713","0:4715","0:4722","0:4799","0:4802","0:4805"]}},"0:3503:5371":{"id":"0:3503:5371","crate_id":0,"name":"move_prev","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1344,4],"end":[1357,5]},"visibility":"public","docs":"Moves the cursor to the previous element of the `LinkedList`.\n\nIf the cursor is pointing to the \"ghost\" non-element then this will move it to\nthe last element of the `LinkedList`. If it is pointing to the first\nelement of the `LinkedList` then this will move it to the \"ghost\" non-element.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5242":{"id":"0:5242","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2012,0],"end":[2018,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"string_from_iter_by_ref\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7012:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"char"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5244:670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3143":{"id":"0:3143","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1375,0],"end":[1380,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Default","id":"1:2546:114","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3145:59"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5052":{"id":"0:5052","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[45,34],"end":[45,47]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::RMatchIndices","name":"RMatchIndices","id":"1:50133:7943","glob":false}},"0:5680:7614":{"id":"0:5680:7614","crate_id":0,"name":"upgrade","span":{"filename":"library/alloc/src/sync.rs","begin":[2022,4],"end":[2046,5]},"visibility":"public","docs":"Attempts to upgrade the `Weak` pointer to an [`Arc`], delaying\ndropping of the inner value if successful.\n\nReturns [`None`] if the inner value has since been dropped.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nlet weak_five = Arc::downgrade(&five);\n\nlet strong_five: Option<Arc<_>> = weak_five.upgrade();\nassert!(strong_five.is_some());\n\n// Destroy all strong pointers.\ndrop(strong_five);\ndrop(five);\n\nassert!(weak_five.upgrade().is_none());\n```","links":{"`Arc`":"0:5513:69","`None`":"1:47999:173"},"attrs":["#[must_use =\n\"this returns a new `Arc`, \\\n                  without modifying the original weak pointer\"]","#[stable(feature = \"arc_weak\", since = \"1.4.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5761":{"id":"0:5761","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2646,0],"end":[2662,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"shared_from_str\", since = \"1.62.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}},"items":["0:5762:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5038":{"id":"0:5038","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[36,41],"end":[36,64]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::from_utf8_unchecked_mut","name":"from_utf8_unchecked_mut","id":"1:10584:7933","glob":false}},"0:4365:668":{"id":"0:4365:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[779,4],"end":[784,5]},"visibility":"default","docs":"Converts a `Cow<'a, CStr>` into a `Box<CStr>`,\nby copying the contents if they are borrowed.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["cow",{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11343:7923":{"id":"1:11343:7923","crate_id":1,"name":"encode_utf16","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1043,4],"end":[1043,49]},"visibility":"public","docs":"Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```","links":{},"attrs":["#[must_use =\n\"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EncodeUtf16","id":"1:50257:7924","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5595:306":{"id":"0:5595:306","crate_id":0,"name":"as_ptr","span":{"filename":"library/alloc/src/sync.rs","begin":[877,4],"end":[884,5]},"visibility":"public","docs":"Provides a raw pointer to the data.\n\nThe counts are not affected in any way and the `Arc` is not consumed. The pointer is valid for\nas long as there are strong counts in the `Arc`.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet x = Arc::new(\"hello\".to_owned());\nlet y = Arc::clone(&x);\nlet x_ptr = Arc::as_ptr(&x);\nassert_eq!(x_ptr, Arc::as_ptr(&y));\nassert_eq!(unsafe { &*x_ptr }, \"hello\");\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rc_as_ptr\", since = \"1.45.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:3462:5277":{"id":"b:1:2495-0:3462:5277","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cursor","id":"0:3462:5277","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6045":{"id":"0:6045","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/cow.rs","begin":[33,0],"end":[43,1]},"visibility":{"restricted":{"parent":"0:6033:2675","path":"::vec::cow"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"cow_from_vec_ref\", since = \"1.28.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"items":["0:6048:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:7282:895":{"id":"0:7282:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[36,0],"end":[36,117]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"U"},"len":"N"}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4645:409":{"id":"0:4645:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/rc.rs","begin":[1624,4],"end":[1629,5]},"visibility":"default","docs":"Makes a clone of the `Rc` pointer.\n\nThis creates another pointer to the same allocation, increasing the\nstrong reference count.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nlet _ = Rc::clone(&five);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:2978:4931":{"id":"b:1:2499-0:2978:4931","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:2978:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:7710:3767-0:6980:218":{"id":"a:1:7710:3767-0:6980:218","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2708:2329-0:6740:3364":{"id":"a:1:2708:2329-0:6740:3364","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:417:668":{"id":"0:417:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1540,4],"end":[1542,5]},"visibility":"default","docs":"Converts a `&str` into a `Box<str>`\n\nThis conversion allocates on the heap\nand performs a copy of `s`.\n\n# Examples\n\n```rust\nlet boxed: Box<str> = Box::from(\"hello\");\nprintln!(\"{boxed}\");\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:6914:6204":{"id":"b:1:2505-0:6914:6204","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:245:571":{"id":"0:245:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[132,4],"end":[138,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11438:13911":{"id":"1:11438:13911","crate_id":1,"name":"escape_unicode","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[2571,4],"end":[2571,53]},"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```","links":{"`char::escape_unicode`":"1:4447:13911"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeUnicode","id":"1:50282:7938","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:776":{"id":"0:776","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[286,0],"end":[290,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PeekMut","id":"0:771:3221","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:778:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7709:3766-0:7002:8296":{"id":"a:1:7709:3766-0:7002:8296","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf16Error","id":"0:7002:8296","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2510-0:7057:4069":{"id":"b:1:2510-0:7057:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:7057:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3060:3974":{"id":"0:3060:3974","crate_id":0,"name":"drain_filter","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1117,4],"end":[1124,5]},"visibility":"public","docs":"Creates an iterator that visits all elements in ascending order and\nuses a closure to determine if an element should be removed.\n\nIf the closure returns `true`, the element is removed from the set and\nyielded. If the closure returns `false`, or panics, the element remains\nin the set and will not be yielded.\n\nIf the iterator is only partially consumed or not consumed at all, each\nof the remaining elements is still subjected to the closure and removed\nand dropped if it returns `true`.\n\nIt is unspecified how many more elements will be subjected to the\nclosure if a panic occurs in the closure, or if a panic occurs while\ndropping an element, or if the `DrainFilter` itself is leaked.\n\n# Examples\n\nSplitting a set into even and odd values, reusing the original set:\n\n```\n#![feature(btree_drain_filter)]\nuse std::collections::BTreeSet;\n\nlet mut set: BTreeSet<i32> = (0..8).collect();\nlet evens: BTreeSet<_> = set.drain_filter(|v| v % 2 == 0).collect();\nlet odds = set;\nassert_eq!(evens.into_iter().collect::<Vec<_>>(), vec![0, 2, 4, 6]);\nassert_eq!(odds.into_iter().collect::<Vec<_>>(), vec![1, 3, 5, 7]);\n```","links":{},"attrs":["#[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["pred",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3096:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"outlives":"'a"},{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:986:3475":{"id":"0:986:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1650,4],"end":[1650,32]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"b:1:2216-0:6914:6204":{"id":"b:1:2216-0:6914:6204","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6430:2111":{"id":"0:6430:2111","crate_id":0,"name":"shrink_to_fit","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1036,4],"end":[1043,5]},"visibility":"public","docs":"Shrinks the capacity of the vector as much as possible.\n\nIt will drop down as close as possible to the length but the allocator\nmay still inform the vector that there is space for a few more elements.\n\n# Examples\n\n```\nlet mut vec = Vec::with_capacity(10);\nvec.extend([1, 2, 3]);\nassert_eq!(vec.capacity(), 10);\nvec.shrink_to_fit();\nassert!(vec.capacity() >= 3);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:1376:3816":{"id":"b:1:3303-0:1376:3816","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:1376:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5329:742":{"id":"0:5329:742","crate_id":0,"name":"index","span":{"filename":"library/alloc/src/string.rs","begin":[2379,4],"end":[2381,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"resolved_path","inner":{"name":"ops::RangeFrom","id":"1:46345:193","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4801:1793":{"id":"0:4801:1793","crate_id":0,"name":"borrow","span":{"filename":"library/alloc/src/rc.rs","begin":[2697,4],"end":[2699,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3872:921":{"id":"0:3872:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[46,4],"end":[48,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:3474:5281":{"id":"b:1:2495-0:3474:5281","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CursorMut","id":"0:3474:5281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5975:650":{"id":"0:5975:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[38,4],"end":[40,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:670:2911":{"id":"0:670:2911","crate_id":0,"name":"clone_into","span":{"filename":"library/alloc/src/borrow.rs","begin":[76,4],"end":[78,5]},"visibility":"default","docs":"Uses borrowed data to replace owned data, usually by cloning.\n\nThis is borrow-generalized version of [`Clone::clone_from`].\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s: String = String::new();\n\"hello\".clone_into(&mut s);\n\nlet mut v: Vec<i32> = Vec::new();\n[1, 2][..].clone_into(&mut v);\n```","links":{"`Clone::clone_from`":"1:2235:411"},"attrs":["#[stable(feature = \"toowned_clone_into\", since = \"1.63.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Owned","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"0:667:225","args":null}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5268:2885":{"id":"0:5268:2885","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/string.rs","begin":[2103,4],"end":[2105,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"char"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:1404:3833":{"id":"a:1:7710:3767-0:1404:3833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:1404:3833","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:0:671-0:2937:3356":{"id":"b:0:671-0:2937:3356","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6578":{"id":"0:6578","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2675,0],"end":[2695,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6581:409","0:6582:411"],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11376:13671":{"id":"1:11376:13671","crate_id":1,"name":"splitn","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1588,4],"end":[1588,82]},"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```","links":{"str::rsplitn":"1:11379:13659","self::pattern":"1:11013:1760","prim@char":"1:58430:10458"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"SplitN","id":"1:50069:7703","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4144:1119":{"id":"0:4144:1119","crate_id":0,"name":"rotate_right","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2344,4],"end":[2352,5]},"visibility":"public","docs":"Rotates the double-ended queue `k` places to the right.\n\nEquivalently,\n- Rotates the first item into position `k`.\n- Pops the last `k` items and pushes them to the front.\n- Rotates `len() - k` places to the left.\n\n# Panics\n\nIf `k` is greater than `len()`. Note that `k == len()`\ndoes _not_ panic and is a no-op rotation.\n\n# Complexity\n\nTakes `*O*(min(k, len() - k))` time and no extra space.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf: VecDeque<_> = (0..10).collect();\n\nbuf.rotate_right(3);\nassert_eq!(buf, [7, 8, 9, 0, 1, 2, 3, 4, 5, 6]);\n\nfor i in 1..10 {\n    assert_eq!(0, buf[i * 3 % 10]);\n    buf.rotate_right(3);\n}\nassert_eq!(buf, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n```","links":{},"attrs":["#[stable(feature = \"vecdeque_rotate\", since = \"1.36.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["k",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5406":{"id":"0:5406","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2817,0],"end":[2821,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"cow_str_from_iter\", since = \"1.12.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7012:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"char"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:5408:670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1431":{"id":"0:1431","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[536,0],"end":[540,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:1426:192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1434:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:7037":{"id":"0:7037","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2257,0],"end":[2257,34]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(unused_lifetimes)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:7040:595","0:7041:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3394:5286":{"id":"0:3394:5286","crate_id":0,"name":"cursor_back_mut","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[566,4],"end":[568,5]},"visibility":"public","docs":"Provides a cursor with editing operations at the back element.\n\nThe cursor is pointing to the \"ghost\" non-element if the list is empty.","links":{},"attrs":["#[inline]","#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CursorMut","id":"0:3474:5281","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:1301:94":{"id":"b:1:2505-0:1301:94","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5328:180":{"id":"0:5328:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/string.rs","begin":[2376,4],"end":[2376,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"primitive","inner":"str"}}},"0:5935":{"id":"0:5935","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/splice.rs","begin":[54,0],"end":[92,1]},"visibility":{"restricted":{"parent":"0:5911:8668","path":"::vec::splice"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"vec_splice\", since = \"1.21.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Splice","id":"0:7074:9310","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:5938:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4178:995":{"id":"0:4178:995","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2692,4],"end":[2694,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6753":{"id":"0:6753","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1478,9],"end":[1478,14]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:6749:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:6756:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5579:7193":{"id":"0:5579:7193","crate_id":0,"name":"try_unwrap","span":{"filename":"library/alloc/src/sync.rs","begin":[671,4],"end":[687,5]},"visibility":"public","docs":"Returns the inner value, if the `Arc` has exactly one strong reference.\n\nOtherwise, an [`Err`] is returned with the same `Arc` that was\npassed in.\n\nThis will succeed even if there are outstanding weak references.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet x = Arc::new(3);\nassert_eq!(Arc::try_unwrap(x), Ok(3));\n\nlet x = Arc::new(4);\nlet _y = Arc::clone(&x);\nassert_eq!(*Arc::try_unwrap(x).unwrap_err(), 4);\n```","links":{"`Err`":"1:48147:125"},"attrs":["#[inline]","#[stable(feature = \"arc_unique\", since = \"1.4.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:391:2636":{"id":"0:391:2636","crate_id":0,"name":"write_u32","span":{"filename":"library/alloc/src/boxed.rs","begin":[1400,4],"end":[1402,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"u32"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5450":{"id":"0:5450","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2973,0],"end":[2978,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:5451:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:567:307":{"id":"0:567:307","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/boxed.rs","begin":[2053,4],"end":[2055,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6140":{"id":"0:6140","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[348,0],"end":[348,61]},"visibility":{"restricted":{"parent":"0:6056:757","path":"::vec::into_iter"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"trusted_len\", issue = \"37572\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"TrustedLen","id":"1:7403:3146","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3257":{"id":"0:3257","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1704,0],"end":[1718,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:2978:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3260:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2216-0:6980:218":{"id":"b:1:2216-0:6980:218","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2658:222-0:1348:3805":{"id":"a:1:2658:222-0:1348:3805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:1348:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1861:1746":{"id":"0:1861:1746","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2145,4],"end":[2147,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["(k, v)",{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5064":{"id":"0:5064","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[53,38],"end":[53,53]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::SplitTerminator","name":"SplitTerminator","id":"1:50015:7947","glob":false}},"0:5430":{"id":"0:5430","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2895,0],"end":[2899,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":["0:5431:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2219-0:1394:3826":{"id":"b:1:2219-0:1394:3826","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:1394:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1608:921":{"id":"0:1608:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1694,4],"end":[1697,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4269:771":{"id":"0:4269:771","crate_id":0,"name":"kind","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[74,4],"end":[76,5]},"visibility":"public","docs":"Details about the allocation that caused the error","links":{},"attrs":["#[inline]","#[must_use]","#[unstable(feature = \"try_reserve_kind\", reason =\n\"Uncertain how much info should be exposed\", issue = \"48043\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:885":{"id":"0:885","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1375,0],"end":[1379,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:887:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3639:702":{"id":"0:3639:702","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1946,4],"end":[1951,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"H"}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Hasher","id":"1:8805:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:4016:238":{"id":"b:1:2499-0:4016:238","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5413:670":{"id":"0:5413:670","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/string.rs","begin":[2826,4],"end":[2828,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["it",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3920:6108":{"id":"0:3920:6108","crate_id":0,"name":"advance_by","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[58,4],"end":[65,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:238:224":{"id":"0:238:224","crate_id":0,"name":"Target","span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[110,4],"end":[110,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:3823":{"id":"0:3823","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[103,0],"end":[146,1]},"visibility":{"restricted":{"parent":"0:3783:4093","path":"::collections::vec_deque::iter_mut"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3826:2759","0:3827:6115","0:3829:6116","0:3832:6117"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1287:3294":{"id":"0:1287:3294","crate_id":0,"name":"get","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[445,4],"end":[447,5]},"visibility":"public","docs":"Gets a reference to the value in the entry.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nif let Entry::Occupied(o) = map.entry(\"poneyland\") {\n    assert_eq!(o.get(), &12);\n}\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:703:416":{"id":"0:703:416","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/borrow.rs","begin":[355,4],"end":[357,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6683:307":{"id":"0:6683:307","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3094,4],"end":[3096,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:6991:8288":{"id":"a:1:7710:3767-0:6991:8288","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:11154-0:276:1792":{"id":"b:1:11154-0:276:1792","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/str/pattern.rs","begin":[906,0],"end":[906,29]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"primitive","inner":"char"}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["strip_prefix_of","strip_suffix_of","is_prefix_of","is_suffix_of","is_contained_in"],"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:50504:7920","1:50505:8572","1:50506:8710","1:50507:8711","1:50508:8712","1:50509:8713","1:50510:8714"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"F"}}},"b:1:2510-0:3004:4940":{"id":"b:1:2510-0:3004:4940","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Union","id":"0:3004:4940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6030":{"id":"0:6030","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[255,0],"end":[255,58]},"visibility":{"restricted":{"parent":"0:5946:3448","path":"::vec::drain"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5424:3449":{"id":"0:5424:3449","crate_id":0,"name":"Drain","span":{"filename":"library/alloc/src/string.rs","begin":[2883,0],"end":[2892,1]},"visibility":"public","docs":"A draining iterator for `String`.\n\nThis struct is created by the [`drain`] method on [`String`]. See its\ndocumentation for more.\n\n[`drain`]: String::drain","links":{"String::drain":"0:5218:3448","`String`":"0:6980:218"},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"impls":["0:5436","a:1:2708:2329-0:5424:3449","a:1:7709:3766-0:5424:3449","a:1:7710:3767-0:5424:3449","b:1:7020-0:5424:3449","b:1:2510-0:5424:3449","b:1:2505-0:5424:3449","b:1:2216-0:5424:3449","b:1:3303-0:5424:3449","b:1:2219-0:5424:3449","b:1:2499-0:5424:3449","b:1:2495-0:5424:3449","0:5430","0:5432","0:5433","0:5434","0:5439","0:5442","0:5445","0:5450","0:5452"]}},"0:6787:192":{"id":"0:6787:192","crate_id":0,"name":"Range","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[174,0],"end":[176,1]},"visibility":"public","docs":"An iterator over a sub-range of items in a `BTreeSet`.\n\nThis `struct` is created by the [`range`] method on [`BTreeSet`].\nSee its documentation for more.\n\n[`range`]: BTreeSet::range","links":{"`BTreeSet`":"0:2908:95","BTreeSet::range":"0:3020:3801"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:6787:192","a:1:2644:214-0:6787:192","a:1:2708:2329-0:6787:192","a:1:7709:3766-0:6787:192","a:1:7710:3767-0:6787:192","b:0:671-0:6787:192","b:1:7020-0:6787:192","b:1:2510-0:6787:192","b:1:2505-0:6787:192","b:1:2216-0:6787:192","b:1:3303-0:6787:192","b:1:2219-0:6787:192","b:1:2499-0:6787:192","b:1:2495-0:6787:192","0:6791","0:3210","0:3213","0:3222","0:3227"]}},"0:5272":{"id":"0:5272","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2120,0],"end":[2129,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7025:3507","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5274:2885","0:5277:1746"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4337:6401":{"id":"0:4337:6401","crate_id":0,"name":"into_bytes_with_nul","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[518,4],"end":[520,5]},"visibility":"public","docs":"Equivalent to [`CString::into_bytes()`] except that the\nreturned vector includes the trailing nul terminator.\n\n# Examples\n\n```\nuse std::ffi::CString;\n\nlet c_string = CString::new(\"foo\").expect(\"CString::new failed\");\nlet bytes = c_string.into_bytes_with_nul();\nassert_eq!(bytes, vec![b'f', b'o', b'o', b'\\0']);\n```","links":{"`CString::into_bytes()`":"0:4336:6299"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"cstring_into\", since = \"1.7.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5360:226":{"id":"0:5360:226","crate_id":0,"name":"ToString","span":{"filename":"library/alloc/src/string.rs","begin":[2500,0],"end":[2516,1]},"visibility":"public","docs":"A trait for converting a value to a `String`.\n\nThis trait is automatically implemented for any type which implements the\n[`Display`] trait. As such, `ToString` shouldn't be implemented directly:\n[`Display`] should be implemented instead, and you get the `ToString`\nimplementation for free.\n\n[`Display`]: fmt::Display","links":{"fmt::Display":"1:8573:118"},"attrs":["#[rustc_diagnostic_item = \"ToString\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"trait","inner":{"is_auto":false,"is_unsafe":false,"items":["0:5361:1398"],"generics":{"params":[],"where_predicates":[]},"bounds":[],"implementations":["0:5362","0:5365","0:5368","0:5370","0:5372","0:5374","0:5376"]}},"0:1746:2753":{"id":"0:1746:2753","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1960,4],"end":[1962,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5997:2750":{"id":"0:5997:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[155,4],"end":[155,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:1477:3521":{"id":"0:1477:3521","crate_id":0,"name":"remove","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1021,4],"end":[1027,5]},"visibility":"public","docs":"Removes a key from the map, returning the value at the key if the key\nwas previously in the map.\n\nThe key may be any borrowed form of the map's key type, but the ordering\non the borrowed form *must* match the ordering on the key type.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.remove(&1), Some(\"a\"));\nassert_eq!(map.remove(&1), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7239:895":{"id":"0:7239:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[26,0],"end":[26,122]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1516:921":{"id":"0:1516:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1485,4],"end":[1492,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1781:782":{"id":"0:1781:782","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2016,4],"end":[2018,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1322:409":{"id":"0:1322:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[207,4],"end":[288,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:1404:3833":{"id":"b:1:2219-0:1404:3833","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:1404:3833","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5410":{"id":"0:5410","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2825,0],"end":[2829,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"cow_str_from_iter\", since = \"1.12.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7012:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:5413:670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3177:921":{"id":"0:3177:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1499,4],"end":[1501,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3645:668":{"id":"0:3645:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1965,4],"end":[1967,5]},"visibility":"default","docs":"Converts a `[T; N]` into a `LinkedList<T>`.\n\n```\nuse std::collections::LinkedList;\n\nlet list1 = LinkedList::from([1, 2, 3, 4]);\nlet list2: LinkedList<_> = [1, 2, 3, 4].into();\nassert_eq!(list1, list2);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["arr",{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2658:222-0:1394:3826":{"id":"a:1:2658:222-0:1394:3826","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:1394:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4587:3929":{"id":"0:4587:3929","crate_id":0,"name":"get_mut","span":{"filename":"library/alloc/src/rc.rs","begin":[1081,4],"end":[1083,5]},"visibility":"public","docs":"Returns a mutable reference into the given `Rc`, if there are\nno other `Rc` or [`Weak`] pointers to the same allocation.\n\nReturns [`None`] otherwise, because it is not safe to\nmutate a shared value.\n\nSee also [`make_mut`][make_mut], which will [`clone`][clone]\nthe inner value when there are other `Rc` pointers.\n\n[make_mut]: Rc::make_mut\n[clone]: Clone::clone\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet mut x = Rc::new(3);\n*Rc::get_mut(&mut x).unwrap() = 4;\nassert_eq!(*x, 4);\n\nlet _y = Rc::clone(&x);\nassert!(Rc::get_mut(&mut x).is_none());\n```","links":{"`Weak`":"0:4737:7157","Rc::make_mut":"0:4592:7357","`None`":"1:47999:173","Clone::clone":"1:2234:409"},"attrs":["#[inline]","#[stable(feature = \"rc_unique\", since = \"1.4.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["this",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:866":{"id":"0:866","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1317,0],"end":[1321,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:868:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2658:222-0:6757:3337":{"id":"a:1:2658:222-0:6757:3337","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainSorted","id":"0:6757:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2495-0:676:109":{"id":"b:1:2495-0:676:109","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1236:2481":{"id":"0:1236:2481","crate_id":0,"name":"value","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[107,4],"end":[107,16]},"visibility":"public","docs":"The value which was not inserted, because the entry was already occupied.","links":{},"attrs":[],"deprecation":null,"kind":"struct_field","inner":{"kind":"generic","inner":"V"}},"0:3195:921":{"id":"0:3195:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1539,4],"end":[1541,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6829:409":{"id":"0:6829:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[15,9],"end":[15,14]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:0:671-0:276:1792":{"id":"b:0:671-0:276:1792","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5330":{"id":"0:5330","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2384,0],"end":[2391,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Index","id":"1:2969:3662","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"RangeFull","id":"1:46305:194","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5331:180","0:5332:742"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6440:9784":{"id":"0:6440:9784","crate_id":0,"name":"swap_remove","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1401,4],"end":[1422,5]},"visibility":"public","docs":"Removes an element from the vector and returns it.\n\nThe removed element is replaced by the last element of the vector.\n\nThis does not preserve ordering, but is *O*(1).\nIf you need to preserve the element order, use [`remove`] instead.\n\n[`remove`]: Vec::remove\n\n# Panics\n\nPanics if `index` is out of bounds.\n\n# Examples\n\n```\nlet mut v = vec![\"foo\", \"bar\", \"baz\", \"qux\"];\n\nassert_eq!(v.swap_remove(1), \"bar\");\nassert_eq!(v, [\"foo\", \"qux\", \"baz\"]);\n\nassert_eq!(v.swap_remove(0), \"foo\");\nassert_eq!(v, [\"baz\", \"qux\"]);\n```","links":{"Vec::remove":"0:6444:3521"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1496:3974":{"id":"0:1496:3974","crate_id":0,"name":"drain_filter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1378,4],"end":[1385,5]},"visibility":"public","docs":"Creates an iterator that visits all elements (key-value pairs) in\nascending key order and uses a closure to determine if an element should\nbe removed. If the closure returns `true`, the element is removed from\nthe map and yielded. If the closure returns `false`, or panics, the\nelement remains in the map and will not be yielded.\n\nThe iterator also lets you mutate the value of each element in the\nclosure, regardless of whether you choose to keep or remove it.\n\nIf the iterator is only partially consumed or not consumed at all, each\nof the remaining elements is still subjected to the closure, which may\nchange its value and, by returning `true`, have the element removed and\ndropped.\n\nIt is unspecified how many more elements will be subjected to the\nclosure if a panic occurs in the closure, or a panic occurs while\ndropping an element, or if the `DrainFilter` value is leaked.\n\n# Examples\n\nSplitting a map into even and odd keys, reusing the original map:\n\n```\n#![feature(btree_drain_filter)]\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<i32, i32> = (0..8).map(|x| (x, x)).collect();\nlet evens: BTreeMap<_, _> = map.drain_filter(|k, _v| k % 2 == 0).collect();\nlet odds = map;\nassert_eq!(evens.keys().copied().collect::<Vec<_>>(), [0, 2, 4, 6]);\nassert_eq!(odds.keys().copied().collect::<Vec<_>>(), [1, 3, 5, 7]);\n```","links":{},"attrs":["#[unstable(feature = \"btree_drain_filter\", issue = \"70530\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["pred",{"kind":"generic","inner":"F"}]],"output":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:1680:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}],"output":{"kind":"primitive","inner":"bool"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:795:409":{"id":"0:795:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[334,4],"end":[336,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11357:11402":{"id":"1:11357:11402","crate_id":1,"name":"rfind","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1219,4],"end":[1221,54]},"visibility":"public","docs":"Returns the byte index for the first character of the last match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```","links":{"self::pattern":"1:11013:1760","prim@char":"1:58430:10458","`None`":"1:47999:173"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11033:7919","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6049":{"id":"0:6049","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/cow.rs","begin":[46,0],"end":[53,1]},"visibility":{"restricted":{"parent":"0:6033:2675","path":"::vec::cow"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7012:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"items":["0:6052:670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4380":{"id":"0:4380","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[856,0],"end":[862,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"cow_from_cstr\", since = \"1.28.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4382:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6157:571":{"id":"0:6157:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[386,4],"end":[406,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11385:40316":{"id":"1:11385:40316","crate_id":1,"name":"rsplit_once","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1675,4],"end":[1677,54]},"visibility":"public","docs":"Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["delimiter",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11033:7919","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:240":{"id":"0:240","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[121,0],"end":[128,1]},"visibility":{"restricted":{"parent":"0:194:2340","path":"::boxed::thin"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:2899:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:242:538"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:990:2885":{"id":"0:990:2885","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1660,4],"end":[1662,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5303":{"id":"0:5303","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2211,0],"end":[2220,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5304:595","0:5305:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2216-0:4016:238":{"id":"b:1:2216-0:4016:238","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2495-0:1404:3833":{"id":"b:1:2495-0:1404:3833","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:1404:3833","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:2504:668":{"id":"1:2504:668","crate_id":1,"name":"from","span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[752,4],"end":[752,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["t",{"kind":"primitive","inner":"never"}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4769:7324":{"id":"0:4769:7324","crate_id":0,"name":"ptr_eq","span":{"filename":"library/alloc/src/rc.rs","begin":[2496,4],"end":[2498,5]},"visibility":"public","docs":"Returns `true` if the two `Weak`s point to the same allocation similar to [`ptr::eq`], or if\nboth don't point to any allocation (because they were created with `Weak::new()`). See [that\nfunction][`ptr::eq`] for caveats when comparing `dyn Trait` pointers.\n\n# Notes\n\nSince this compares pointers it means that `Weak::new()` will equal each\nother, even though they don't point to any allocation.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet first_rc = Rc::new(5);\nlet first = Rc::downgrade(&first_rc);\nlet second = Rc::downgrade(&first_rc);\n\nassert!(first.ptr_eq(&second));\n\nlet third_rc = Rc::new(5);\nlet third = Rc::downgrade(&third_rc);\n\nassert!(!first.ptr_eq(&third));\n```\n\nComparing `Weak::new`.\n\n```\nuse std::rc::{Rc, Weak};\n\nlet first = Weak::new();\nlet second = Weak::new();\nassert!(first.ptr_eq(&second));\n\nlet third_rc = Rc::new(());\nlet third = Rc::downgrade(&third_rc);\nassert!(!first.ptr_eq(&third));\n```","links":{"`ptr::eq`":"1:2198:595"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"weak_ptr_eq\", since = \"1.39.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11353:11422":{"id":"1:11353:11422","crate_id":1,"name":"find","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1173,4],"end":[1173,70]},"visibility":"public","docs":"Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```","links":{"`None`":"1:47999:173","self::pattern":"1:11013:1760","prim@char":"1:58430:10458"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:793":{"id":"0:793","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[333,0],"end":[341,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:795:409","0:796:411"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:370:682":{"id":"0:370:682","crate_id":0,"name":"ge","span":{"filename":"library/alloc/src/boxed.rs","begin":[1361,4],"end":[1363,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:768:96":{"id":"b:1:2495-0:768:96","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1622":{"id":"0:1622","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1720,0],"end":[1720,71]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1359:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2510-0:2908:95":{"id":"b:1:2510-0:2908:95","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:7027":{"id":"0:7027","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2255,0],"end":[2255,30]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(unused_lifetimes)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:7030:595","0:7031:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6905":{"id":"0:6905","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[109,32],"end":[109,34]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:7274":{"id":"0:7274","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[36,0],"end":[36,117]},"visibility":{"restricted":{"parent":"0:6257:9314","path":"::vec::partial_eq"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"U"},"len":"N"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:7280:595","0:7282:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3303-0:3900:3356":{"id":"b:1:3303-0:3900:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3266:921":{"id":"0:3266:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1723,4],"end":[1744,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:3794:3805":{"id":"a:1:2708:2329-0:3794:3805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2505-0:6822:3475":{"id":"b:1:2505-0:6822:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1253":{"id":"0:1253","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[146,0],"end":[272,1]},"visibility":{"restricted":{"parent":"0:1169:3668","path":"::collections::btree::map::entry"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:1185:3669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1258:4194","0:1259:4202","0:1261:4210","0:1263:3528","0:1264:4223"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6907":{"id":"0:6907","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[109,36],"end":[109,39]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["max","clamp","min"],"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6908:416"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4836":{"id":"0:4836","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[46,22],"end":[46,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"slice_from_ptr_range\", issue = \"89792\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::from_mut_ptr_range","name":"from_mut_ptr_range","id":"1:10154:7678","glob":false}},"1:11397:13997":{"id":"1:11397:13997","crate_id":1,"name":"rmatch_indices","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1841,4],"end":[1843,54]},"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```","links":{"`DoubleEndedIterator`":"1:7053:119","prim@char":"1:58430:10458","str::match_indices":"1:11394:7989","self::pattern":"1:11013:1760"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatchIndices","id":"1:50133:7943","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11033:7919","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:221":{"id":"0:221","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[47,0],"end":[47,52]},"visibility":{"restricted":{"parent":"0:194:2340","path":"::boxed::thin"}},"docs":"`ThinBox<T>` is `Sync` if `T` is `Sync` because the data is owned.","links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ThinBox","id":"0:215:2341","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:2927:995":{"id":"0:2927:995","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[107,4],"end":[109,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7710:3767-0:4016:238":{"id":"a:1:7710:3767-0:4016:238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4804:307":{"id":"0:4804:307","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/rc.rs","begin":[2704,4],"end":[2706,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:6749:3449":{"id":"b:1:2499-0:6749:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:6749:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5801:9224":{"id":"0:5801:9224","crate_id":0,"name":"provide","span":{"filename":"library/alloc/src/sync.rs","begin":[2817,4],"end":[2819,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["req",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"core::any::Demand","id":"1:3364:9226","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6119:2750":{"id":"0:6119:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[184,4],"end":[184,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:4030:571":{"id":"0:4030:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[124,4],"end":[144,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:390:2635":{"id":"0:390:2635","crate_id":0,"name":"write_u16","span":{"filename":"library/alloc/src/boxed.rs","begin":[1397,4],"end":[1399,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"u16"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:2970:4926":{"id":"b:1:2219-0:2970:4926","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:2970:4926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1375:650":{"id":"0:1375:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[419,4],"end":[421,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:895:2759":{"id":"0:895:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1399,4],"end":[1401,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4274":{"id":"0:4274","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[131,0],"end":[147,1]},"visibility":{"restricted":{"parent":"0:744:1794","path":"::collections"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4275:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4389":{"id":"0:4389","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[900,0],"end":[908,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4390:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3521:5461":{"id":"0:3521:5461","crate_id":0,"name":"split_after","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1547,4],"end":[1554,5]},"visibility":"public","docs":"Splits the list into two after the current element. This will return a\nnew list consisting of everything after the cursor, with the original\nlist retaining everything before.\n\nIf the cursor is pointing at the \"ghost\" non-element then the entire contents\nof the `LinkedList` are moved.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6703:668":{"id":"0:6703:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3189,4],"end":[3191,5]},"visibility":"default","docs":"Convert a clone-on-write slice into a vector.\n\nIf `s` already owns a `Vec<T>`, it will be returned directly.\nIf `s` is borrowing a slice, a new `Vec<T>` will be allocated and\nfilled by cloning `s`'s items into it.\n\n# Examples\n\n```\n# use std::borrow::Cow;\nlet o: Cow<[i32]> = Cow::Owned(vec![1, 2, 3]);\nlet b: Cow<[i32]> = Cow::Borrowed(&[1, 2, 3]);\nassert_eq!(Vec::from(o), Vec::from(b));\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3569:2750":{"id":"0:3569:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1784,4],"end":[1784,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"a:1:2644:214-0:6757:3337":{"id":"a:1:2644:214-0:6757:3337","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainSorted","id":"0:6757:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3945":{"id":"0:3945","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[157,0],"end":[165,1]},"visibility":{"restricted":{"parent":"0:3889:768","path":"::collections::vec_deque::iter"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3947:782","0:3948:2762"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:697:224":{"id":"0:697:224","crate_id":0,"name":"Target","span":{"filename":"library/alloc/src/borrow.rs","begin":[336,4],"end":[336,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"B"}}},"a:1:7709:3766-0:4016:238":{"id":"a:1:7709:3766-0:4016:238","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2219-0:6914:6204":{"id":"b:1:2219-0:6914:6204","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1314":{"id":"0:1314","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[197,0],"end":[203,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"btree_unwindsafe\", since = \"1.64.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"core::panic::UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"core::panic::RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"core::panic::RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:7055:595":{"id":"0:7055:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[2259,0],"end":[2259,33]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4830":{"id":"0:4830","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[40,0],"end":[40,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"inherent_ascii_escape\", since = \"1.60.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::EscapeAscii","name":"EscapeAscii","id":"1:49524:7673","glob":false}},"a:1:7709:3766-0:1230:3671":{"id":"a:1:7709:3766-0:1230:3671","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"OccupiedError","id":"0:1230:3671","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"a:1:2644:214-0:2978:4931":{"id":"a:1:2644:214-0:2978:4931","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:2978:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3328:157":{"id":"0:3328:157","crate_id":0,"name":"LinkedList","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[50,0],"end":[55,1]},"visibility":"public","docs":"A doubly-linked list with owned nodes.\n\nThe `LinkedList` allows pushing and popping elements at either end\nin constant time.\n\nA `LinkedList` with a known list of items can be initialized from an array:\n```\nuse std::collections::LinkedList;\n\nlet list = LinkedList::from([1, 2, 3]);\n```\n\nNOTE: It is almost always better to use [`Vec`] or [`VecDeque`] because\narray-based containers are generally faster,\nmore memory efficient, and make better use of CPU cache.\n\n[`Vec`]: crate::vec::Vec\n[`VecDeque`]: super::vec_deque::VecDeque","links":{"crate::vec::Vec":"0:6407:237","super::vec_deque::VecDeque":"0:4016:238"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"LinkedList\"]","#[rustc_insignificant_dtor]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"impls":["0:3385","a:1:2708:2329-0:3328:157","a:1:7709:3766-0:3328:157","a:1:7710:3767-0:3328:157","b:0:671-0:3328:157","b:1:2510-0:3328:157","b:1:2505-0:3328:157","b:1:2216-0:3328:157","b:1:3303-0:3328:157","b:1:2219-0:3328:157","b:1:2499-0:3328:157","b:1:2495-0:3328:157","0:3382","0:3416","0:3579","0:3583","0:3588","0:3594","0:3600","0:3612","0:3618","0:3622","0:3624","0:3627","0:3630","0:3634","0:3637","0:3641","0:3655","0:3657"]}},"0:6910:702":{"id":"0:6910:702","crate_id":0,"name":"hash","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[109,41],"end":[109,45]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["state",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"__H"}}}]],"output":{"kind":"tuple","inner":[]},"c_variadic":false},"generics":{"params":[{"name":"__H","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::hash::Hasher","id":"1:8805:142","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6764:650":{"id":"0:6764:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1523,9],"end":[1523,14]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5286:1746":{"id":"0:5286:1746","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/string.rs","begin":[2147,4],"end":[2149,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["s",{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:3900:3356":{"id":"b:1:2219-0:3900:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5709":{"id":"0:5709","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2294,0],"end":[2337,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5711:595","0:5712:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2495-0:7002:8296":{"id":"b:1:2495-0:7002:8296","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf16Error","id":"0:7002:8296","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11391:14004":{"id":"1:11391:14004","crate_id":1,"name":"rmatches","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1753,4],"end":[1755,54]},"visibility":"public","docs":"An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```","links":{"self::pattern":"1:11013:1760","str::matches":"1:11388:10484","prim@char":"1:58430:10458","`DoubleEndedIterator`":"1:7053:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RMatches","id":"1:50187:7945","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11033:7919","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:1185:3669":{"id":"b:1:2499-0:1185:3669","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:1185:3669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2510-0:1348:3805":{"id":"b:1:2510-0:1348:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:1348:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:50504:7920":{"id":"1:50504:7920","crate_id":1,"name":"Searcher","span":{"filename":"/rust-lang-rust/library/core/src/str/pattern.rs","begin":[910,4],"end":[910,93]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"CharPredicateSearcher","id":"1:50488:10935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}}}},"0:394:2639":{"id":"0:394:2639","crate_id":0,"name":"write_usize","span":{"filename":"library/alloc/src/boxed.rs","begin":[1409,4],"end":[1411,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11404:40319":{"id":"1:11404:40319","crate_id":1,"name":"trim_end","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1945,4],"end":[1945,34]},"visibility":"public","docs":"Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`, which includes newlines.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\\n Hello\\tworld\\t\\n\";\nassert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```","links":{},"attrs":["#[must_use =\n\"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]","#[rustc_diagnostic_item = \"str_trim_end\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3813:2751":{"id":"0:3813:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[60,4],"end":[63,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:2944:4916":{"id":"b:1:3303-0:2944:4916","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:2944:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:808:3231":{"id":"0:808:3231","crate_id":0,"name":"pop","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[452,4],"end":[461,5]},"visibility":"public","docs":"Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::from([1, 3]);\n\nassert_eq!(heap.pop(), Some(3));\nassert_eq!(heap.pop(), Some(1));\nassert_eq!(heap.pop(), None);\n```\n\n# Time complexity\n\nThe worst case cost of `pop` on a heap containing *n* elements is *O*(log(*n*)).","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:6914:6204":{"id":"b:1:2499-0:6914:6204","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:372":{"id":"0:372","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1370,0],"end":[1375,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["max","clamp","min"],"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:375:416"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4042:59":{"id":"0:4042:59","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[151,4],"end":[153,5]},"visibility":"default","docs":"Creates an empty deque.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4590":{"id":"0:4590","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1175,0],"end":[1295,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4592:7357","0:4593:7378"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5442":{"id":"0:5442","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2947,0],"end":[2951,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"string_drain_as_str\", since = \"1.55.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2463:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["0:5444:307"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5365":{"id":"0:5365","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2544,0],"end":[2549,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"char_to_string_specialization\", since = \"1.46.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5360:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"primitive","inner":"char"},"items":["0:5366:1398"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3460":{"id":"0:3460","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1130,0],"end":[1130,43]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3352:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3836":{"id":"0:3836","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[149,0],"end":[157,1]},"visibility":{"restricted":{"parent":"0:3783:4093","path":"::collections::vec_deque::iter_mut"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3838:782","0:3839:2762"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5988":{"id":"0:5988","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[149,0],"end":[149,69]},"visibility":{"restricted":{"parent":"0:5946:3448","path":"::vec::drain"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6920":{"id":"0:6920","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[134,16],"end":[134,25]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]","#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2654:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1830:2120":{"id":"0:1830:2120","crate_id":0,"name":"max","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2091,4],"end":[2093,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:1201:3672":{"id":"a:1:2708:2329-0:1201:3672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:1201:3672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:449:2731":{"id":"0:449:2731","crate_id":0,"name":"downcast","span":{"filename":"library/alloc/src/boxed.rs","begin":[1715,4],"end":[1717,5]},"visibility":"public","docs":"Attempt to downcast the box to a concrete type.\n\n# Examples\n\n```\nuse std::any::Any;\n\nfn print_if_string(value: Box<dyn Any>) {\n    if let Ok(string) = value.downcast::<String>() {\n        println!(\"String ({}): {}\", string.len(), string);\n    }\n}\n\nlet my_string = \"Hello World\".to_string();\nprint_if_string(Box::new(my_string));\nprint_if_string(Box::new(0i8));\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6540:10045":{"id":"0:6540:10045","crate_id":0,"name":"dedup","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2544,4],"end":[2546,5]},"visibility":"public","docs":"Removes consecutive repeated elements in the vector according to the\n[`PartialEq`] trait implementation.\n\nIf the vector is sorted, this removes all duplicates.\n\n# Examples\n\n```\nlet mut vec = vec![1, 2, 2, 3, 2];\n\nvec.dedup();\n\nassert_eq!(vec, [1, 2, 3, 2]);\n```","links":{"`PartialEq`":"1:2263:182"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4964":{"id":"0:4964","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[774,0],"end":[778,1]},"visibility":{"restricted":{"parent":"0:4810:1314","path":"::slice"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:4967:2781"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3585:2750":{"id":"0:3585:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1822,4],"end":[1822,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:5438:308":{"id":"0:5438:308","crate_id":0,"name":"as_str","span":{"filename":"library/alloc/src/string.rs","begin":[2934,4],"end":[2936,5]},"visibility":"public","docs":"Returns the remaining (sub)string of this iterator as a slice.\n\n# Examples\n\n```\nlet mut s = String::from(\"abc\");\nlet mut drain = s.drain(..);\nassert_eq!(drain.as_str(), \"abc\");\nlet _ = drain.next().unwrap();\nassert_eq!(drain.as_str(), \"bc\");\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"string_drain_as_str\", since = \"1.55.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6676":{"id":"0:6676","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3086,0],"end":[3090,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"vec_as_mut\", since = \"1.5.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsMut","id":"1:2466:74","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6679:2784"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2505-0:768:96":{"id":"b:1:2505-0:768:96","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4740":{"id":"0:4740","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[2189,0],"end":[2189,44]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rc_weak\", since = \"1.4.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":false,"blanket_impl":null}},"b:1:3303-0:6779:3475":{"id":"b:1:3303-0:6779:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6779:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3348:650":{"id":"0:3348:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[78,4],"end":[88,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:859:3356":{"id":"b:1:2499-0:859:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3888":{"id":"0:3888","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[50,0],"end":[50,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"self::iter::Iter","name":"Iter","id":"0:3900:3356","glob":false}},"0:3251:2750":{"id":"0:3251:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1676,4],"end":[1676,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"0:115":{"id":"0:115","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/alloc.rs","begin":[234,0],"end":[318,1]},"visibility":{"restricted":{"parent":"0:92:279","path":"::alloc"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["allocate_zeroed","grow","shrink","by_ref","grow_zeroed"],"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:116:2055","0:117:2056","0:118:2130","0:119:2128","0:120:2193","0:121:2112"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4701":{"id":"0:4701","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1952,0],"end":[1967,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_slice\", since = \"1.21.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:4702:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6407:237":{"id":"0:6407:237","crate_id":0,"name":"Vec","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[400,0],"end":[403,1]},"visibility":"public","docs":"A contiguous growable array type, written as `Vec<T>`, short for 'vector'.\n\n# Examples\n\n```\nlet mut vec = Vec::new();\nvec.push(1);\nvec.push(2);\n\nassert_eq!(vec.len(), 2);\nassert_eq!(vec[0], 1);\n\nassert_eq!(vec.pop(), Some(2));\nassert_eq!(vec.len(), 1);\n\nvec[0] = 7;\nassert_eq!(vec[0], 7);\n\nvec.extend([1, 2, 3]);\n\nfor x in &vec {\n    println!(\"{x}\");\n}\nassert_eq!(vec, [7, 1, 2, 3]);\n```\n\nThe [`vec!`] macro is provided for convenient initialization:\n\n```\nlet mut vec1 = vec![1, 2, 3];\nvec1.push(4);\nlet vec2 = Vec::from([1, 2, 3, 4]);\nassert_eq!(vec1, vec2);\n```\n\nIt can also initialize each element of a `Vec<T>` with a given value.\nThis may be more efficient than performing allocation and initialization\nin separate steps, especially when initializing a vector of zeros:\n\n```\nlet vec = vec![0; 5];\nassert_eq!(vec, [0, 0, 0, 0, 0]);\n\n// The following is equivalent, but potentially slower:\nlet mut vec = Vec::with_capacity(5);\nvec.resize(5, 0);\nassert_eq!(vec, [0, 0, 0, 0, 0]);\n```\n\nFor more information, see\n[Capacity and Reallocation](#capacity-and-reallocation).\n\nUse a `Vec<T>` as an efficient stack:\n\n```\nlet mut stack = Vec::new();\n\nstack.push(1);\nstack.push(2);\nstack.push(3);\n\nwhile let Some(top) = stack.pop() {\n    // Prints 3, 2, 1\n    println!(\"{top}\");\n}\n```\n\n# Indexing\n\nThe `Vec` type allows to access values by index, because it implements the\n[`Index`] trait. An example will be more explicit:\n\n```\nlet v = vec![0, 2, 4, 6];\nprintln!(\"{}\", v[1]); // it will display '2'\n```\n\nHowever be careful: if you try to access an index which isn't in the `Vec`,\nyour software will panic! You cannot do this:\n\n```should_panic\nlet v = vec![0, 2, 4, 6];\nprintln!(\"{}\", v[6]); // it will panic!\n```\n\nUse [`get`] and [`get_mut`] if you want to check whether the index is in\nthe `Vec`.\n\n# Slicing\n\nA `Vec` can be mutable. On the other hand, slices are read-only objects.\nTo get a [slice][prim@slice], use [`&`]. Example:\n\n```\nfn read_slice(slice: &[usize]) {\n    // ...\n}\n\nlet v = vec![0, 1];\nread_slice(&v);\n\n// ... and that's all!\n// you can also do it like this:\nlet u: &[usize] = &v;\n// or like this:\nlet u: &[_] = &v;\n```\n\nIn Rust, it's more common to pass slices as arguments rather than vectors\nwhen you just want to provide read access. The same goes for [`String`] and\n[`&str`].\n\n# Capacity and reallocation\n\nThe capacity of a vector is the amount of space allocated for any future\nelements that will be added onto the vector. This is not to be confused with\nthe *length* of a vector, which specifies the number of actual elements\nwithin the vector. If a vector's length exceeds its capacity, its capacity\nwill automatically be increased, but its elements will have to be\nreallocated.\n\nFor example, a vector with capacity 10 and length 0 would be an empty vector\nwith space for 10 more elements. Pushing 10 or fewer elements onto the\nvector will not change its capacity or cause reallocation to occur. However,\nif the vector's length is increased to 11, it will have to reallocate, which\ncan be slow. For this reason, it is recommended to use [`Vec::with_capacity`]\nwhenever possible to specify how big the vector is expected to get.\n\n# Guarantees\n\nDue to its incredibly fundamental nature, `Vec` makes a lot of guarantees\nabout its design. This ensures that it's as low-overhead as possible in\nthe general case, and can be correctly manipulated in primitive ways\nby unsafe code. Note that these guarantees refer to an unqualified `Vec<T>`.\nIf additional type parameters are added (e.g., to support custom allocators),\noverriding their defaults may change the behavior.\n\nMost fundamentally, `Vec` is and always will be a (pointer, capacity, length)\ntriplet. No more, no less. The order of these fields is completely\nunspecified, and you should use the appropriate methods to modify these.\nThe pointer will never be null, so this type is null-pointer-optimized.\n\nHowever, the pointer might not actually point to allocated memory. In particular,\nif you construct a `Vec` with capacity 0 via [`Vec::new`], [`vec![]`][`vec!`],\n[`Vec::with_capacity(0)`][`Vec::with_capacity`], or by calling [`shrink_to_fit`]\non an empty Vec, it will not allocate memory. Similarly, if you store zero-sized\ntypes inside a `Vec`, it will not allocate space for them. *Note that in this case\nthe `Vec` might not report a [`capacity`] of 0*. `Vec` will allocate if and only\nif <code>[mem::size_of::\\<T>]\\() * [capacity]\\() > 0</code>. In general, `Vec`'s allocation\ndetails are very subtle --- if you intend to allocate memory using a `Vec`\nand use it for something else (either to pass to unsafe code, or to build your\nown memory-backed collection), be sure to deallocate this memory by using\n`from_raw_parts` to recover the `Vec` and then dropping it.\n\nIf a `Vec` *has* allocated memory, then the memory it points to is on the heap\n(as defined by the allocator Rust is configured to use by default), and its\npointer points to [`len`] initialized, contiguous elements in order (what\nyou would see if you coerced it to a slice), followed by <code>[capacity] - [len]</code>\nlogically uninitialized, contiguous elements.\n\nA vector containing the elements `'a'` and `'b'` with capacity 4 can be\nvisualized as below. The top part is the `Vec` struct, it contains a\npointer to the head of the allocation in the heap, length and capacity.\nThe bottom part is the allocation on the heap, a contiguous memory block.\n\n```text\n            ptr      len  capacity\n       +--------+--------+--------+\n       | 0x0123 |      2 |      4 |\n       +--------+--------+--------+\n            |\n            v\nHeap   +--------+--------+--------+--------+\n       |    'a' |    'b' | uninit | uninit |\n       +--------+--------+--------+--------+\n```\n\n- **uninit** represents memory that is not initialized, see [`MaybeUninit`].\n- Note: the ABI is not stable and `Vec` makes no guarantees about its memory\n  layout (including the order of fields).\n\n`Vec` will never perform a \"small optimization\" where elements are actually\nstored on the stack for two reasons:\n\n* It would make it more difficult for unsafe code to correctly manipulate\n  a `Vec`. The contents of a `Vec` wouldn't have a stable address if it were\n  only moved, and it would be more difficult to determine if a `Vec` had\n  actually allocated memory.\n\n* It would penalize the general case, incurring an additional branch\n  on every access.\n\n`Vec` will never automatically shrink itself, even if completely empty. This\nensures no unnecessary allocations or deallocations occur. Emptying a `Vec`\nand then filling it back up to the same [`len`] should incur no calls to\nthe allocator. If you wish to free up unused memory, use\n[`shrink_to_fit`] or [`shrink_to`].\n\n[`push`] and [`insert`] will never (re)allocate if the reported capacity is\nsufficient. [`push`] and [`insert`] *will* (re)allocate if\n<code>[len] == [capacity]</code>. That is, the reported capacity is completely\naccurate, and can be relied on. It can even be used to manually free the memory\nallocated by a `Vec` if desired. Bulk insertion methods *may* reallocate, even\nwhen not necessary.\n\n`Vec` does not guarantee any particular growth strategy when reallocating\nwhen full, nor when [`reserve`] is called. The current strategy is basic\nand it may prove desirable to use a non-constant growth factor. Whatever\nstrategy is used will of course guarantee *O*(1) amortized [`push`].\n\n`vec![x; n]`, `vec![a, b, c, d]`, and\n[`Vec::with_capacity(n)`][`Vec::with_capacity`], will all produce a `Vec`\nwith exactly the requested capacity. If <code>[len] == [capacity]</code>,\n(as is the case for the [`vec!`] macro), then a `Vec<T>` can be converted to\nand from a [`Box<[T]>`][owned slice] without reallocating or moving the elements.\n\n`Vec` will not specifically overwrite any data that is removed from it,\nbut also won't specifically preserve it. Its uninitialized memory is\nscratch space that it may use however it wants. It will generally just do\nwhatever is most efficient or otherwise easy to implement. Do not rely on\nremoved data to be erased for security purposes. Even if you drop a `Vec`, its\nbuffer may simply be reused by another allocation. Even if you zero a `Vec`'s memory\nfirst, that might not actually happen because the optimizer does not consider\nthis a side-effect that must be preserved. There is one case which we will\nnot break, however: using `unsafe` code to write to the excess capacity,\nand then increasing the length to match, is always valid.\n\nCurrently, `Vec` does not guarantee the order in which elements are dropped.\nThe order has changed in the past and may change again.\n\n[`get`]: ../../std/vec/struct.Vec.html#method.get\n[`get_mut`]: ../../std/vec/struct.Vec.html#method.get_mut\n[`String`]: crate::string::String\n[`&str`]: type@str\n[`shrink_to_fit`]: Vec::shrink_to_fit\n[`shrink_to`]: Vec::shrink_to\n[capacity]: Vec::capacity\n[`capacity`]: Vec::capacity\n[mem::size_of::\\<T>]: core::mem::size_of\n[len]: Vec::len\n[`len`]: Vec::len\n[`push`]: Vec::push\n[`insert`]: Vec::insert\n[`reserve`]: Vec::reserve\n[`MaybeUninit`]: core::mem::MaybeUninit\n[owned slice]: Box","links":{"core::mem::MaybeUninit":"1:29486:1963","type@str":"1:58436:10463","prim@slice":"1:58435:10462","Vec::shrink_to":"0:6431:3422","`&`":"1:58454:10479","core::mem::size_of":"1:1596:1310","`vec!`":"0:5:1505","Vec::push":"0:6488:3275","Box":"0:276:1792","Vec::len":"0:6496:782","Vec::shrink_to_fit":"0:6430:2111","`Vec::with_capacity`":"0:6415:2019","`Vec::new`":"0:6414:908","crate::string::String":"0:6980:218","`Index`":"1:2969:3662","Vec::insert":"0:6442:3797","Vec::capacity":"0:6425:2020","Vec::reserve":"0:6426:2086"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"Vec\"]","#[rustc_insignificant_dtor]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:6412","0:6417","0:6507","0:6514","0:6537","0:6630","a:1:2658:222-0:6407:237","a:1:2644:214-0:6407:237","a:1:2708:2329-0:6407:237","a:1:7709:3766-0:6407:237","a:1:7710:3767-0:6407:237","b:0:671-0:6407:237","b:1:2510-0:6407:237","b:1:2505-0:6407:237","b:1:2216-0:6407:237","b:1:3303-0:6407:237","b:1:2219-0:6407:237","b:1:2499-0:6407:237","b:1:2495-0:6407:237","0:441","0:961","0:970","0:6830","0:4241","0:4245","0:4353","0:4368","0:4706","0:4960","0:4964","0:5419","0:5754","0:6041","0:6045","0:7215","0:7222","0:7228","0:7234","0:7240","0:7246","0:7252","0:7258","0:7274","0:7284","0:6559","0:6564","0:6578","0:6583","0:6588","0:6594","0:6599","0:6603","0:6609","0:6616","0:6623","0:6642","0:6650","0:6654","0:6657","0:6661","0:6665","0:6668","0:6672","0:6676","0:6680","0:6684","0:6688","0:6691","0:6694","0:6700","0:6704","0:6708","0:6712","0:6714"]}},"0:5803:1797":{"id":"0:5803:1797","crate_id":0,"name":"task","span":{"filename":"library/alloc/src/task.rs","begin":[1,0],"end":[153,1]},"visibility":"public","docs":"Types and Traits for working with asynchronous tasks.\n\n**Note**: This module is only available on platforms that support atomic\nloads and stores of pointers. This may be detected at compile time using\n`#[cfg(target_has_atomic = \"ptr\")]`.","links":{},"attrs":["#[cfg(all(not(no_global_oom_handling), not(no_rc), not(no_sync),\ntarget_has_atomic = \"ptr\"))]","#![stable(feature = \"wake_trait\", since = \"1.51.0\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:5810:9270"],"is_stripped":false}},"0:961":{"id":"0:961","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1574,0],"end":[1583,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:963:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:963:668":{"id":"0:963:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1578,4],"end":[1582,5]},"visibility":"default","docs":"Converts a `Vec<T>` into a `BinaryHeap<T>`.\n\nThis conversion happens in-place, and has *O*(*n*) time complexity.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["vec",{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5982:10185":{"id":"0:5982:10185","crate_id":0,"name":"keep_rest","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[89,4],"end":[138,5]},"visibility":"public","docs":"Keep unyielded elements in the source `Vec`.\n\n# Examples\n\n```\n#![feature(drain_keep_rest)]\n\nlet mut vec = vec!['a', 'b', 'c'];\nlet mut drain = vec.drain(..);\n\nassert_eq!(drain.next().unwrap(), 'a');\n\n// This call keeps 'b' and 'c' in the vec.\ndrain.keep_rest();\n\n// If we wouldn't call `keep_rest()`,\n// `vec` would be empty.\nassert_eq!(vec, ['b', 'c']);\n```","links":{},"attrs":["#[unstable(feature = \"drain_keep_rest\", issue = \"101122\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:0:671-0:6881:1972":{"id":"b:0:671-0:6881:1972","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:387:2633":{"id":"0:387:2633","crate_id":0,"name":"finish","span":{"filename":"library/alloc/src/boxed.rs","begin":[1388,4],"end":[1390,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"u64"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5661":{"id":"0:5661","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[1750,0],"end":[1824,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}}},"items":["0:5662:2731","0:5664:2733"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6628:1746":{"id":"0:6628:1746","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2826,4],"end":[2828,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["item",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:530":{"id":"0:530","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1993,0],"end":[1997,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"boxed_closure_impls\", since = \"1.35.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"Args","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Tuple","id":"1:2721:2328","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FnMut","id":"1:2917:2770","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:534:379"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4527":{"id":"0:4527","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[332,0],"end":[332,42]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":false,"blanket_impl":null}},"0:5234":{"id":"0:5234","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[1981,0],"end":[1986,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["type_id","provide","cause","source","description"],"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf16Error","id":"0:7002:8296","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5235:2822"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6000:2751":{"id":"0:6000:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[162,4],"end":[164,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5339":{"id":"0:5339","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2412,0],"end":[2417,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IndexMut","id":"1:2973:5511","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Range","id":"1:46321:192","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5340:743"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:446:1418":{"id":"0:446:1418","crate_id":0,"name":"try_from","span":{"filename":"library/alloc/src/boxed.rs","begin":[1685,4],"end":[1692,5]},"visibility":"default","docs":"Attempts to convert a `Vec<T>` into a `Box<[T; N]>`.\n\nLike [`Vec::into_boxed_slice`], this is in-place if `vec.capacity() == N`,\nbut will require a reallocation otherwise.\n\n# Errors\n\nReturns the original `Vec<T>` in the `Err` variant if\n`boxed_slice.len()` does not equal `N`.\n\n# Examples\n\nThis can be used with [`vec!`] to create an array on the heap:\n\n```\nlet state: Box<[f32; 100]> = vec![1.0; 100].try_into().unwrap();\nassert_eq!(state.len(), 100);\n```","links":{"`vec!`":"0:5:1505","`Vec::into_boxed_slice`":"0:6432:2419"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["vec",{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Self"}},{"type":{"kind":"qualified_path","inner":{"name":"Error","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:2479:230","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4544":{"id":"0:4544","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[362,0],"end":[684,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4546:908","0:4547:7155","0:4549:1758","0:4552:2366","0:4555:2380","0:4556:2386","0:4559:2391","0:4562:1003","0:4563:7193"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:692:2978":{"id":"0:692:2978","crate_id":0,"name":"is_owned","span":{"filename":"library/alloc/src/borrow.rs","begin":[252,4],"end":[254,5]},"visibility":"public","docs":"Returns true if the data is owned, i.e. if `to_mut` would be a no-op.\n\n# Examples\n\n```\n#![feature(cow_is_borrowed)]\nuse std::borrow::Cow;\n\nlet cow: Cow<'_, str> = Cow::Owned(\"moo\".to_string());\nassert!(cow.is_owned());\n\nlet bull = Cow::Borrowed(\"...moo?\");\nassert!(!bull.is_owned());\n```","links":{},"attrs":["#[unstable(feature = \"cow_is_borrowed\", issue = \"65143\")]","#[rustc_const_unstable(feature = \"const_cow_is_borrowed\", issue = \"65143\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:2970:4926":{"id":"b:1:2505-0:2970:4926","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:2970:4926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3530:5327":{"id":"0:3530:5327","crate_id":0,"name":"back_mut","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1698,4],"end":[1700,5]},"visibility":"public","docs":"Provides a mutable reference to back element of the cursor's parent\nlist, or `None` if the list is empty.\n\n# Examples\nBuilding and mutating a list with a cursor, then getting the back element:\n```\n#![feature(linked_list_cursors)]\nuse std::collections::LinkedList;\nlet mut dl = LinkedList::new();\ndl.push_front(3);\ndl.push_front(2);\ndl.push_front(1);\nlet mut cursor = dl.cursor_front_mut();\n*cursor.current().unwrap() = 99;\n*cursor.back_mut().unwrap() = 0;\nlet mut contents = dl.into_iter();\nassert_eq!(contents.next(), Some(99));\nassert_eq!(contents.next(), Some(2));\nassert_eq!(contents.next(), Some(0));\nassert_eq!(contents.next(), None);\n```","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4142:5929":{"id":"0:4142:5929","crate_id":0,"name":"make_contiguous","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2142,4],"end":[2266,5]},"visibility":"public","docs":"Rearranges the internal storage of this deque so it is one contiguous\nslice, which is then returned.\n\nThis method does not allocate and does not change the order of the\ninserted elements. As it returns a mutable slice, this can be used to\nsort a deque.\n\nOnce the internal storage is contiguous, the [`as_slices`] and\n[`as_mut_slices`] methods will return the entire contents of the\ndeque in a single slice.\n\n[`as_slices`]: VecDeque::as_slices\n[`as_mut_slices`]: VecDeque::as_mut_slices\n\n# Examples\n\nSorting the content of a deque.\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::with_capacity(15);\n\nbuf.push_back(2);\nbuf.push_back(1);\nbuf.push_front(3);\n\n// sorting the deque\nbuf.make_contiguous().sort();\nassert_eq!(buf.as_slices(), (&[1, 2, 3] as &[_], &[] as &[_]));\n\n// sorting it in reverse order\nbuf.make_contiguous().sort_by(|a, b| b.cmp(a));\nassert_eq!(buf.as_slices(), (&[3, 2, 1] as &[_], &[] as &[_]));\n```\n\nGetting immutable access to the contiguous slice.\n\n```rust\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\n\nbuf.push_back(2);\nbuf.push_back(1);\nbuf.push_front(3);\n\nbuf.make_contiguous();\nif let (slice, &[]) = buf.as_slices() {\n    // we can now be sure that `slice` contains all elements of the deque,\n    // while still having immutable access to `buf`.\n    assert_eq!(buf.len(), slice.len());\n    assert_eq!(slice, &[3, 2, 1] as &[_]);\n}\n```","links":{"VecDeque::as_mut_slices":"0:4107:5536","VecDeque::as_slices":"0:4106:5704"},"attrs":["#[stable(feature = \"deque_make_contiguous\", since = \"1.48.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:6083:3475":{"id":"b:1:2219-0:6083:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5981:283":{"id":"0:5981:283","crate_id":0,"name":"allocator","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[65,4],"end":[67,5]},"visibility":"public","docs":"Returns a reference to the underlying allocator.","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[must_use]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"A"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5296:7920":{"id":"0:5296:7920","crate_id":0,"name":"Searcher","span":{"filename":"library/alloc/src/string.rs","begin":[2178,4],"end":[2178,55]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}}}},"0:5890:2751":{"id":"0:5890:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/vec/drain_filter.rs","begin":[148,4],"end":[150,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4871":{"id":"0:4871","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[66,22],"end":[66,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::SplitInclusive","name":"SplitInclusive","id":"1:9349:7706","glob":false}},"0:6609":{"id":"0:6609","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2798,0],"end":[2805,1]},"visibility":{"restricted":{"parent":"0:5829:1505","path":"::vec"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"items":["0:6613:2750","0:6614:3475","0:6615:757"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2658:222-0:1376:3816":{"id":"a:1:2658:222-0:1376:3816","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:1376:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:2644:214-0:1201:3672":{"id":"a:1:2644:214-0:1201:3672","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VacantEntry","id":"0:1201:3672","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1415:3837":{"id":"0:1415:3837","crate_id":0,"name":"IntoValues","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[508,0],"end":[514,1]},"visibility":"public","docs":"An owning iterator over the values of a `BTreeMap`.\n\nThis `struct` is created by the [`into_values`] method on [`BTreeMap`].\nSee its documentation for more.\n\n[`into_values`]: BTreeMap::into_values","links":{"`BTreeMap`":"0:1301:94","BTreeMap::into_values":"0:1500:4087"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:1415:3837","a:1:2644:214-0:1415:3837","a:1:2708:2329-0:1415:3837","a:1:7709:3766-0:1415:3837","a:1:7710:3767-0:1415:3837","b:1:7020-0:1415:3837","b:1:2510-0:1415:3837","b:1:2505-0:1415:3837","b:1:2216-0:1415:3837","b:1:3303-0:1415:3837","b:1:2219-0:1415:3837","b:1:2499-0:1415:3837","b:1:2495-0:1415:3837","0:1420","0:1786","0:1795","0:1801","0:1806"]}},"0:5025":{"id":"0:5025","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[24,0],"end":[24,27]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::pattern","name":"pattern","id":"1:11013:1760","glob":false}},"0:6511:7876":{"id":"0:6511:7876","crate_id":0,"name":"extend_from_slice","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2392,4],"end":[2394,5]},"visibility":"public","docs":"Clones and appends all elements in a slice to the `Vec`.\n\nIterates over the slice `other`, clones each element, and then appends\nit to this `Vec`. The `other` slice is traversed in-order.\n\nNote that this function is same as [`extend`] except that it is\nspecialized to work with slices instead. If and when Rust gets\nspecialization this function will likely be deprecated (but still\navailable).\n\n# Examples\n\n```\nlet mut vec = vec![1];\nvec.extend_from_slice(&[2, 3, 4]);\nassert_eq!(vec, [1, 2, 3, 4]);\n```\n\n[`extend`]: Vec::extend","links":{"Vec::extend":"0:6626:2885"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"vec_extend_from_slice\", since = \"1.6.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1402:650":{"id":"0:1402:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[476,4],"end":[478,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:0:5362-0:6991:8288":{"id":"b:0:5362-0:6991:8288","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2526,0],"end":[2540,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5360:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5364:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2708:2329-0:6757:3337":{"id":"a:1:2708:2329-0:6757:3337","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainSorted","id":"0:6757:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2505-0:6991:8288":{"id":"b:1:2505-0:6991:8288","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3938:6116":{"id":"0:3938:6116","crate_id":0,"name":"rfold","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[138,4],"end":[144,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["accum",{"kind":"generic","inner":"Acc"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"Acc"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7130:154","args":null}}}],"output":{"kind":"generic","inner":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:819:3320":{"id":"0:819:3320","crate_id":0,"name":"append","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[742,4],"end":[752,5]},"visibility":"public","docs":"Moves all the elements of `other` into `self`, leaving `other` empty.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\n\nlet mut a = BinaryHeap::from([-10, 1, 2, 3, 3]);\nlet mut b = BinaryHeap::from([-20, 5, 43]);\n\na.append(&mut b);\n\nassert_eq!(a.into_sorted_vec(), [-20, -10, 1, 2, 3, 3, 5, 43]);\nassert!(b.is_empty());\n```","links":{},"attrs":["#[stable(feature = \"binary_heap_append\", since = \"1.11.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1560":{"id":"0:1560","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1593,0],"end":[1597,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:1348:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1563:782"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5888:2750":{"id":"0:5888:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/vec/drain_filter.rs","begin":[120,4],"end":[120,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:5576:2391":{"id":"0:5576:2391","crate_id":0,"name":"try_new_zeroed","span":{"filename":"library/alloc/src/sync.rs","begin":[641,4],"end":[649,5]},"visibility":"public","docs":"Constructs a new `Arc` with uninitialized contents, with the memory\nbeing filled with `0` bytes, returning an error if allocation fails.\n\nSee [`MaybeUninit::zeroed`][zeroed] for examples of correct and incorrect usage\nof this method.\n\n# Examples\n\n```\n#![feature(new_uninit, allocator_api)]\n\nuse std::sync::Arc;\n\nlet zero = Arc::<u32>::try_new_zeroed()?;\nlet zero = unsafe { zero.assume_init() };\n\nassert_eq!(*zero, 0);\n# Ok::<(), std::alloc::AllocError>(())\n```\n\n[zeroed]: mem::MaybeUninit::zeroed","links":{"mem::MaybeUninit::zeroed":"1:1519:2186"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50972:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5358:125":{"id":"0:5358:125","crate_id":0,"name":"Err","span":{"filename":"library/alloc/src/string.rs","begin":[2483,4],"end":[2483,41]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Infallible","id":"1:39242:8747","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:1818":{"id":"0:1818","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2069,0],"end":[2073,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"btree_range\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:1426:192","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1821:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5998:921":{"id":"0:5998:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[158,4],"end":[160,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7226:595":{"id":"0:7226:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[24,0],"end":[24,99]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"U"}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1404:3833":{"id":"0:1404:3833","crate_id":0,"name":"IntoKeys","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[489,0],"end":[491,1]},"visibility":"public","docs":"An owning iterator over the keys of a `BTreeMap`.\n\nThis `struct` is created by the [`into_keys`] method on [`BTreeMap`].\nSee its documentation for more.\n\n[`into_keys`]: BTreeMap::into_keys","links":{"BTreeMap::into_keys":"0:1499:4080","`BTreeMap`":"0:1301:94"},"attrs":["#[must_use = \"iterators are lazy and do nothing unless consumed\"]","#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:1404:3833","a:1:2644:214-0:1404:3833","a:1:2708:2329-0:1404:3833","a:1:7709:3766-0:1404:3833","a:1:7710:3767-0:1404:3833","b:1:7020-0:1404:3833","b:1:2510-0:1404:3833","b:1:2505-0:1404:3833","b:1:2216-0:1404:3833","b:1:3303-0:1404:3833","b:1:2219-0:1404:3833","b:1:2499-0:1404:3833","b:1:2495-0:1404:3833","0:1409","0:1760","0:1771","0:1777","0:1782"]}},"0:6563:536":{"id":"0:6563:536","crate_id":0,"name":"deref","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2631,4],"end":[2633,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:528:180":{"id":"0:528:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/boxed.rs","begin":[1985,4],"end":[1985,46]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FnOnce","id":"1:2920:2768","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Args"}}],"bindings":[]}}}}}}},"0:3936:6115":{"id":"0:3936:6115","crate_id":0,"name":"advance_back_by","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[128,4],"end":[136,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4863":{"id":"0:4863","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[62,22],"end":[62,28]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::RSplit","name":"RSplit","id":"1:9461:7699","glob":false}},"a:1:2708:2329-0:2970:4926":{"id":"a:1:2708:2329-0:2970:4926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:2970:4926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4438":{"id":"0:4438","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[563,28],"end":[563,33]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::Octal","name":"Octal","id":"1:8575:6922","glob":false}},"b:1:3303-0:1338:3356":{"id":"b:1:3303-0:1338:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6969:650":{"id":"0:6969:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[225,31],"end":[225,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6439:7494":{"id":"0:6439:7494","crate_id":0,"name":"set_len","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1369,4],"end":[1373,5]},"visibility":"public","docs":"Forces the length of the vector to `new_len`.\n\nThis is a low-level operation that maintains none of the normal\ninvariants of the type. Normally changing the length of a vector\nis done using one of the safe operations instead, such as\n[`truncate`], [`resize`], [`extend`], or [`clear`].\n\n[`truncate`]: Vec::truncate\n[`resize`]: Vec::resize\n[`extend`]: Extend::extend\n[`clear`]: Vec::clear\n\n# Safety\n\n- `new_len` must be less than or equal to [`capacity()`].\n- The elements at `old_len..new_len` must be initialized.\n\n[`capacity()`]: Vec::capacity\n\n# Examples\n\nThis method can be useful for situations in which the vector\nis serving as a buffer for other code, particularly over FFI:\n\n```no_run\n# #![allow(dead_code)]\n# // This is just a minimal skeleton for the doc example;\n# // don't use this as a starting point for a real library.\n# pub struct StreamWrapper { strm: *mut std::ffi::c_void }\n# const Z_OK: i32 = 0;\n# extern \"C\" {\n#     fn deflateGetDictionary(\n#         strm: *mut std::ffi::c_void,\n#         dictionary: *mut u8,\n#         dictLength: *mut usize,\n#     ) -> i32;\n# }\n# impl StreamWrapper {\npub fn get_dictionary(&self) -> Option<Vec<u8>> {\n    // Per the FFI method's docs, \"32768 bytes is always enough\".\n    let mut dict = Vec::with_capacity(32_768);\n    let mut dict_length = 0;\n    // SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:\n    // 1. `dict_length` elements were initialized.\n    // 2. `dict_length` <= the capacity (32_768)\n    // which makes `set_len` safe to call.\n    unsafe {\n        // Make the FFI call...\n        let r = deflateGetDictionary(self.strm, dict.as_mut_ptr(), &mut dict_length);\n        if r == Z_OK {\n            // ...and update the length to what was initialized.\n            dict.set_len(dict_length);\n            Some(dict)\n        } else {\n            None\n        }\n    }\n}\n# }\n```\n\nWhile the following example is sound, there is a memory leak since\nthe inner vectors were not freed prior to the `set_len` call:\n\n```\nlet mut vec = vec![vec![1, 0, 0],\n                   vec![0, 1, 0],\n                   vec![0, 0, 1]];\n// SAFETY:\n// 1. `old_len..0` is empty so no elements need to be initialized.\n// 2. `0 <= capacity` always holds whatever `capacity` is.\nunsafe {\n    vec.set_len(0);\n}\n```\n\nNormally, here, one would use [`clear`] instead to correctly drop\nthe contents and thus not leak memory.","links":{"Extend::extend":"1:7027:2885","Vec::truncate":"0:6433:5696","Vec::resize":"0:6510:6045","Vec::clear":"0:6495:3451","Vec::capacity":"0:6425:2020"},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["new_len",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:3040:4969":{"id":"0:3040:4969","crate_id":0,"name":"first","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[800,4],"end":[805,5]},"visibility":"public","docs":"Returns a reference to the first element in the set, if any.\nThis element is always the minimum of all elements in the set.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::new();\nassert_eq!(set.first(), None);\nset.insert(1);\nassert_eq!(set.first(), Some(&1));\nset.insert(2);\nassert_eq!(set.first(), Some(&1));\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"map_first_last\", since = \"1.66.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:7020-0:3352:3805":{"id":"b:1:7020-0:3352:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3352:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"b:1:2505-0:5513:69":{"id":"b:1:2505-0:5513:69","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1701:571":{"id":"0:1701:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1847,4],"end":[1849,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:7074:9310":{"id":"a:1:7709:3766-0:7074:9310","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Splice","id":"0:7074:9310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:7710:3767-0:3794:3805":{"id":"a:1:7710:3767-0:3794:3805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6671:650":{"id":"0:6671:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3073,4],"end":[3075,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:3474:5281":{"id":"a:1:7709:3766-0:3474:5281","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CursorMut","id":"0:3474:5281","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"0:193":{"id":"0:193","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[185,0],"end":[185,22]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"thin_box\", issue = \"92791\")]"],"deprecation":null,"kind":"import","inner":{"source":"thin::ThinBox","name":"ThinBox","id":"0:215:2341","glob":false}},"a:1:2708:2329-0:6897:102":{"id":"a:1:2708:2329-0:6897:102","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:6761":{"id":"0:6761","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1523,9],"end":[1523,14]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[unstable(feature = \"binary_heap_drain_sorted\", issue = \"59278\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"$crate::fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainSorted","id":"0:6757:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:6764:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:7020-0:1394:3826":{"id":"b:1:7020-0:1394:3826","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:1394:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"b:1:2216-0:6881:1972":{"id":"b:1:2216-0:6881:1972","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6779:3475":{"id":"0:6779:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[158,0],"end":[163,1]},"visibility":"public","docs":"An owning iterator over the items of a `BTreeSet`.\n\nThis `struct` is created by the [`into_iter`] method on [`BTreeSet`]\n(provided by the [`IntoIterator`] trait). See its documentation for more.\n\n[`into_iter`]: BTreeSet#method.into_iter\n[`IntoIterator`]: core::iter::IntoIterator","links":{"BTreeSet#method.into_iter":"0:2908:95","`BTreeSet`":"0:2908:95","core::iter::IntoIterator":"1:7016:147"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["a:1:2658:222-0:6779:3475","a:1:2644:214-0:6779:3475","a:1:2708:2329-0:6779:3475","a:1:7709:3766-0:6779:3475","a:1:7710:3767-0:6779:3475","b:1:7020-0:6779:3475","b:1:2510-0:6779:3475","b:1:2505-0:6779:3475","b:1:2216-0:6779:3475","b:1:3303-0:6779:3475","b:1:2219-0:6779:3475","b:1:2499-0:6779:3475","b:1:2495-0:6779:3475","0:6783","0:3191","0:3198","0:3203","0:3207"]}},"0:4225:2885":{"id":"0:4225:2885","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2778,4],"end":[2780,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"T"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5813":{"id":"0:5813","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/task.rs","begin":[95,0],"end":[104,1]},"visibility":{"restricted":{"parent":"0:5803:1797","path":"::task"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"wake_trait\", since = \"1.51.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"W","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Wake","id":"0:5810:9270","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'static"}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Waker","id":"1:11834:9231","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5815:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4362":{"id":"0:4362","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[765,0],"end":[772,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]","#[stable(feature = \"box_from_c_str\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4363:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5770":{"id":"0:5770","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2679,0],"end":[2721,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"shared_from_iter\", since = \"1.37.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FromIterator","id":"1:7012:132","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}},"items":["0:5772:670"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6997":{"id":"0:6997","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[406,16],"end":[406,25]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6998:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:0:671-0:6980:218":{"id":"b:0:671-0:6980:218","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6433:5696":{"id":"0:6433:5696","crate_id":0,"name":"truncate","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[1151,4],"end":[1171,5]},"visibility":"public","docs":"Shortens the vector, keeping the first `len` elements and dropping\nthe rest.\n\nIf `len` is greater than the vector's current length, this has no\neffect.\n\nThe [`drain`] method can emulate `truncate`, but causes the excess\nelements to be returned instead of dropped.\n\nNote that this method has no effect on the allocated capacity\nof the vector.\n\n# Examples\n\nTruncating a five element vector to two elements:\n\n```\nlet mut vec = vec![1, 2, 3, 4, 5];\nvec.truncate(2);\nassert_eq!(vec, [1, 2]);\n```\n\nNo truncation occurs when `len` is greater than the vector's current\nlength:\n\n```\nlet mut vec = vec![1, 2, 3];\nvec.truncate(8);\nassert_eq!(vec, [1, 2, 3]);\n```\n\nTruncating when `len == 0` is equivalent to calling the [`clear`]\nmethod.\n\n```\nlet mut vec = vec![1, 2, 3];\nvec.truncate(0);\nassert_eq!(vec, []);\n```\n\n[`clear`]: Vec::clear\n[`drain`]: Vec::drain","links":{"Vec::drain":"0:6493:3448","Vec::clear":"0:6495:3451"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["len",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:6757:3337":{"id":"b:1:2216-0:6757:3337","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainSorted","id":"0:6757:3337","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5712:895":{"id":"0:5712:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/sync.rs","begin":[2334,4],"end":[2336,5]},"visibility":"default","docs":"Inequality for two `Arc`s.\n\nTwo `Arc`s are unequal if their inner values are unequal.\n\nIf `T` also implements `Eq` (implying reflexivity of equality),\ntwo `Arc`s that point to the same value are never unequal.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nassert!(five != Arc::new(6));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:476:650":{"id":"0:476:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/boxed.rs","begin":[1889,4],"end":[1894,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:1385:3820":{"id":"b:1:2499-0:1385:3820","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:1385:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:7002:8296":{"id":"0:7002:8296","crate_id":0,"name":"FromUtf16Error","span":{"filename":"library/alloc/src/string.rs","begin":[430,0],"end":[430,30]},"visibility":"public","docs":"A possible error value when converting a `String` from a UTF-16 byte slice.\n\nThis type is the error type for the [`from_utf16`] method on [`String`].\n\n[`from_utf16`]: String::from_utf16\n# Examples\n\nBasic usage:\n\n```\n// 𝄞mu<invalid>ic\nlet v = &[0xD834, 0xDD1E, 0x006d, 0x0075,\n          0xD800, 0x0069, 0x0063];\n\nassert!(String::from_utf16(v).is_err());\n```","links":{"`String`":"0:6980:218","String::from_utf16":"0:5168:8387"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"tuple":[null]},"generics":{"params":[],"where_predicates":[]},"impls":["a:1:2658:222-0:7002:8296","a:1:2644:214-0:7002:8296","a:1:2708:2329-0:7002:8296","a:1:7709:3766-0:7002:8296","a:1:7710:3767-0:7002:8296","b:0:5362-0:7002:8296","b:1:2567-0:7002:8296","b:1:2510-0:7002:8296","b:1:2505-0:7002:8296","b:1:2216-0:7002:8296","b:1:3303-0:7002:8296","b:1:2219-0:7002:8296","b:1:2499-0:7002:8296","b:1:2495-0:7002:8296","0:7005","0:5230","0:5234"]}},"0:2975":{"id":"0:2975","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[246,0],"end":[250,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:2970:4926","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:2977:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2708:2329-0:3328:157":{"id":"a:1:2708:2329-0:3328:157","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5760:668":{"id":"0:5760:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/sync.rs","begin":[2637,4],"end":[2642,5]},"visibility":"default","docs":"Create an atomically reference-counted pointer from\na clone-on-write pointer by copying its content.\n\n# Example\n\n```rust\n# use std::sync::Arc;\n# use std::borrow::Cow;\nlet cow: Cow<str> = Cow::Borrowed(\"eggplant\");\nlet shared: Arc<str> = Arc::from(cow);\nassert_eq!(\"eggplant\", &shared[..]);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["cow",{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:120:2193":{"id":"0:120:2193","crate_id":0,"name":"grow_zeroed","span":{"filename":"library/alloc/src/alloc.rs","begin":[266,4],"end":[274,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:1815:1966","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}],["old_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50943:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["new_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50943:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:1815:1966","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50972:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:6621:3475":{"id":"0:6621:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2810,4],"end":[2810,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IterMut","id":"1:9281:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"b:1:2499-0:6957:6203":{"id":"b:1:2499-0:6957:6203","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5723":{"id":"0:5723","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2448,0],"end":[2448,37]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4668":{"id":"0:4668","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1745,0],"end":[1745,36]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"1:11429:13949":{"id":"1:11429:13949","crate_id":1,"name":"parse","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[2352,4],"end":[2352,56]},"visibility":"public","docs":"Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```","links":{"FromStr::Err":"1:10975:125","`FromStr`":"1:10974:7939"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"qualified_path","inner":{"name":"Err","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"F"},"trait":{"name":"FromStr","id":"1:10974:7939","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FromStr","id":"1:10974:7939","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1503":{"id":"0:1503","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1472,0],"end":[1479,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"items":["0:1508:2750","0:1509:3475","0:1510:757"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5063":{"id":"0:5063","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[53,20],"end":[53,36]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::RSplitTerminator","name":"RSplitTerminator","id":"1:50033:7946","glob":false}},"0:117:2056":{"id":"0:117:2056","crate_id":0,"name":"allocate_zeroed","span":{"filename":"library/alloc/src/alloc.rs","begin":[241,4],"end":[243,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50943:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:1815:1966","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50972:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2567-0:7002:8296":{"id":"b:1:2567-0:7002:8296","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/error.rs","begin":[198,0],"end":[198,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"E","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"E"},"bounds":[{"trait_bound":{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Provider","id":"1:3352:10680","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf16Error","id":"0:7002:8296","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2569:9224"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"E"}}},"b:0:5362-0:6957:6203":{"id":"b:0:5362-0:6957:6203","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2526,0],"end":[2540,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Display","id":"1:8573:118","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5360:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5364:1398"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3169:650":{"id":"0:3169:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1484,4],"end":[1486,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3864":{"id":"0:3864","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[35,0],"end":[39,1]},"visibility":{"restricted":{"parent":"0:3850:757","path":"::collections::vec_deque::into_iter"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3867:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5938:571":{"id":"0:5938:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/vec/splice.rs","begin":[55,4],"end":[91,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2658:222-0:771:3221":{"id":"a:1:2658:222-0:771:3221","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PeekMut","id":"0:771:3221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4364":{"id":"0:4364","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[775,0],"end":[785,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"box_from_cow\", since = \"1.45.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4365:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5642":{"id":"0:5642","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[1386,0],"end":[1393,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2886:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5644:224","0:5645:536"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:0:671-0:4737:7157":{"id":"b:0:671-0:4737:7157","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2505-0:6787:192":{"id":"b:1:2505-0:6787:192","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:6787:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5236":{"id":"0:5236","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[1990,0],"end":[1998,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5237:409","0:5238:411"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:308:2446":{"id":"0:308:2446","crate_id":0,"name":"try_new_uninit_slice","span":{"filename":"library/alloc/src/boxed.rs","begin":[694,4],"end":[703,5]},"visibility":"public","docs":"Constructs a new boxed slice with uninitialized contents. Returns an error if\nthe allocation fails\n\n# Examples\n\n```\n#![feature(allocator_api, new_uninit)]\n\nlet mut values = Box::<[u32]>::try_new_uninit_slice(3)?;\nlet values = unsafe {\n    // Deferred initialization:\n    values[0].as_mut_ptr().write(1);\n    values[1].as_mut_ptr().write(2);\n    values[2].as_mut_ptr().write(3);\n    values.assume_init()\n};\n\nassert_eq!(*values, [1, 2, 3]);\n# Ok::<(), std::alloc::AllocError>(())\n```","links":{},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["len",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50972:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:7020-0:859:3356":{"id":"b:1:7020-0:859:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:332:2420":{"id":"0:332:2420","crate_id":0,"name":"into_raw_with_allocator","span":{"filename":"library/alloc/src/boxed.rs","begin":[1111,4],"end":[1114,5]},"visibility":"public","docs":"Consumes the `Box`, returning a wrapped raw pointer and the allocator.\n\nThe pointer will be properly aligned and non-null.\n\nAfter calling this function, the caller is responsible for the\nmemory previously managed by the `Box`. In particular, the\ncaller should properly destroy `T` and release the memory, taking\ninto account the [memory layout] used by `Box`. The easiest way to\ndo this is to convert the raw pointer back into a `Box` with the\n[`Box::from_raw_in`] function, allowing the `Box` destructor to perform\nthe cleanup.\n\nNote: this is an associated function, which means that you have\nto call it as `Box::into_raw_with_allocator(b)` instead of `b.into_raw_with_allocator()`. This\nis so that there is no conflict with a method on the inner type.\n\n# Examples\nConverting the raw pointer back into a `Box` with [`Box::from_raw_in`]\nfor automatic cleanup:\n```\n#![feature(allocator_api)]\n\nuse std::alloc::System;\n\nlet x = Box::new_in(String::from(\"Hello\"), System);\nlet (ptr, alloc) = Box::into_raw_with_allocator(x);\nlet x = unsafe { Box::from_raw_in(ptr, alloc) };\n```\nManual cleanup by explicitly running the destructor and deallocating\nthe memory:\n```\n#![feature(allocator_api)]\n\nuse std::alloc::{Allocator, Layout, System};\nuse std::ptr::{self, NonNull};\n\nlet x = Box::new_in(String::from(\"Hello\"), System);\nlet (ptr, alloc) = Box::into_raw_with_allocator(x);\nunsafe {\n    ptr::drop_in_place(ptr);\n    let non_null = NonNull::new_unchecked(ptr);\n    alloc.deallocate(non_null.cast(), Layout::new::<String>());\n}\n```\n\n[memory layout]: self#memory-layout","links":{"`Box::from_raw_in`":"0:330:2048","self#memory-layout":"0:141:1791"},"attrs":["#[unstable(feature = \"allocator_api\", issue = \"32838\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["b",{"kind":"generic","inner":"Self"}]],"output":{"kind":"tuple","inner":[{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"generic","inner":"T"}}},{"kind":"generic","inner":"A"}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5271:3508":{"id":"0:5271:3508","crate_id":0,"name":"extend_reserve","span":{"filename":"library/alloc/src/string.rs","begin":[2113,4],"end":[2115,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:6822:3475":{"id":"b:1:2216-0:6822:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:3303-0:3096:4069":{"id":"b:1:3303-0:3096:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3096:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4259":{"id":"0:4259","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[33,0],"end":[33,32]},"visibility":"public","docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[doc(no_inline)]"],"deprecation":null,"kind":"import","inner":{"source":"binary_heap::BinaryHeap","name":"BinaryHeap","id":"0:768:96","glob":false}},"0:5217:3451":{"id":"0:5217:3451","crate_id":0,"name":"clear","span":{"filename":"library/alloc/src/string.rs","begin":[1713,4],"end":[1715,5]},"visibility":"public","docs":"Truncates this `String`, removing all contents.\n\nWhile this means the `String` will have a length of zero, it does not\ntouch its capacity.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"foo\");\n\ns.clear();\n\nassert!(s.is_empty());\nassert_eq!(0, s.len());\nassert_eq!(3, s.capacity());\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:679:2676":{"id":"0:679:2676","crate_id":0,"name":"Borrowed","span":{"filename":"library/alloc/src/borrow.rs","begin":[185,4],"end":[185,65]},"visibility":"default","docs":"Borrowed data.","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"variant","inner":{"variant_kind":"tuple","variant_inner":["0:681:1545"]}},"0:938:571":{"id":"0:938:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1531,4],"end":[1545,5]},"visibility":"default","docs":"Removes heap elements in heap order.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2658:222-0:7074:9310":{"id":"a:1:2658:222-0:7074:9310","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Splice","id":"0:7074:9310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:5408:670":{"id":"0:5408:670","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/string.rs","begin":[2818,4],"end":[2820,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["it",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"char"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:571:2784":{"id":"0:571:2784","crate_id":0,"name":"as_mut","span":{"filename":"library/alloc/src/boxed.rs","begin":[2060,4],"end":[2062,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4240:650":{"id":"0:4240:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2812,4],"end":[2814,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:1394:3826":{"id":"b:1:2495-0:1394:3826","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:1394:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3203":{"id":"0:3203","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1554,0],"end":[1558,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6779:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3206:782"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:7710:3767-0:2944:4916":{"id":"a:1:7710:3767-0:2944:4916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:2944:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4680":{"id":"0:4680","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1864,0],"end":[1868,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Hash","id":"1:8791:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["hash_slice"],"trait":{"name":"Hash","id":"1:8791:138","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:4682:702"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1667:2759":{"id":"0:1667:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1790,4],"end":[1792,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:6787:192":{"id":"b:1:2219-0:6787:192","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Range","id":"0:6787:192","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:7020-0:2937:3356":{"id":"b:1:7020-0:2937:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:1765:921":{"id":"0:1765:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1986,4],"end":[1988,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4257:3013":{"id":"0:4257:3013","crate_id":0,"name":"btree_set","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[24,0],"end":[24,17]},"visibility":"public","docs":"An ordered set based on a B-Tree.","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:4258"],"is_stripped":false}},"0:619:668":{"id":"0:619:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/boxed.rs","begin":[2275,4],"end":[2299,5]},"visibility":"default","docs":"Converts a [`String`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n\n# Examples\n\n```\nuse std::error::Error;\nuse std::mem;\n\nlet a_string_error = \"a string error\".to_string();\nlet a_boxed_error = Box::<dyn Error + Send + Sync>::from(a_string_error);\nassert!(\n    mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n```","links":{"`Sync`":"1:2658:222","`Error`":"1:2560:126","`Send`":"1:2644:214","`String`":"0:6980:218"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["err",{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:6822:3475":{"id":"b:1:3303-0:6822:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4595":{"id":"0:4595","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/rc.rs","begin":[1297,0],"end":[1365,1]},"visibility":{"restricted":{"parent":"0:4463:1795","path":"::rc"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}}},"items":["0:4596:2731","0:4598:2733"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2510-0:6749:3449":{"id":"b:1:2510-0:6749:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:6749:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3501:742":{"id":"0:3501:742","crate_id":0,"name":"index","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1311,4],"end":[1314,5]},"visibility":"public","docs":"Returns the cursor position index within the `LinkedList`.\n\nThis returns `None` if the cursor is currently pointing to the\n\"ghost\" non-element.","links":{},"attrs":["#[must_use]","#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6496:782":{"id":"0:6496:782","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2056,4],"end":[2058,5]},"visibility":"public","docs":"Returns the number of elements in the vector, also referred to\nas its 'length'.\n\n# Examples\n\n```\nlet a = vec![1, 2, 3];\nassert_eq!(a.len(), 3);\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3840":{"id":"0:3840","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[160,0],"end":[160,43]},"visibility":{"restricted":{"parent":"0:3783:4093","path":"::collections::vec_deque::iter_mut"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:554:409":{"id":"0:554:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/boxed.rs","begin":[2023,4],"end":[2026,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1842:670":{"id":"0:1842:670","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2108,4],"end":[2118,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"tuple","inner":[{"kind":"generic","inner":"K"},{"kind":"generic","inner":"V"}]}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4667:895":{"id":"0:4667:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/rc.rs","begin":[1739,4],"end":[1741,5]},"visibility":"default","docs":"Inequality for two `Rc`s.\n\nTwo `Rc`s are unequal if their inner values are unequal.\n\nIf `T` also implements `Eq` (implying reflexivity of equality),\ntwo `Rc`s that point to the same allocation are\nnever unequal.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nassert!(five != Rc::new(6));\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:108:279":{"id":"0:108:279","crate_id":0,"name":"alloc","span":{"filename":"library/alloc/src/alloc.rs","begin":[94,0],"end":[96,1]},"visibility":"public","docs":"Allocate memory with the global allocator.\n\nThis function forwards calls to the [`GlobalAlloc::alloc`] method\nof the allocator registered with the `#[global_allocator]` attribute\nif there is one, or the `std` crate’s default.\n\nThis function is expected to be deprecated in favor of the `alloc` method\nof the [`Global`] type when it and the [`Allocator`] trait become stable.\n\n# Safety\n\nSee [`GlobalAlloc::alloc`].\n\n# Examples\n\n```\nuse std::alloc::{alloc, dealloc, handle_alloc_error, Layout};\n\nunsafe {\n    let layout = Layout::new::<u16>();\n    let ptr = alloc(layout);\n    if ptr.is_null() {\n        handle_alloc_error(layout);\n    }\n\n    *(ptr as *mut u16) = 42;\n    assert_eq!(*(ptr as *mut u16), 42);\n\n    dealloc(ptr, layout);\n}\n```","links":{"`Global`":"0:6725:1970","`Allocator`":"1:11946:1969","`GlobalAlloc::alloc`":"1:11892:279"},"attrs":["#[stable(feature = \"global_alloc\", since = \"1.28.0\")]","#[must_use = \"losing the pointer will leak memory\"]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50943:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:7002:8296":{"id":"b:1:2510-0:7002:8296","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf16Error","id":"0:7002:8296","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5364:1398":{"id":"0:5364:1398","crate_id":0,"name":"to_string","span":{"filename":"library/alloc/src/string.rs","begin":[2532,4],"end":[2539,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3821:2753":{"id":"0:3821:2753","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[83,4],"end":[85,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7250:595":{"id":"0:7250:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[28,0],"end":[28,118]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"U"}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5400":{"id":"0:5400","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2772,0],"end":[2791,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:5402:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4866":{"id":"0:4866","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[64,22],"end":[64,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::RSplitN","name":"RSplitN","id":"1:9554:7701","glob":false}},"0:7292:895":{"id":"0:7292:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[37,0],"end":[37,118]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"U"},"len":"N"}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:993:3508":{"id":"0:993:3508","crate_id":0,"name":"extend_reserve","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1670,4],"end":[1672,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:1404:3833":{"id":"a:1:2644:214-0:1404:3833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:1404:3833","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:7709:3766-0:1348:3805":{"id":"a:1:7709:3766-0:1348:3805","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:1348:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":true,"synthetic":true,"blanket_impl":null}},"b:1:2495-0:3352:3805":{"id":"b:1:2495-0:3352:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3352:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6996":{"id":"0:6996","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[406,16],"end":[406,25]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[automatically_derived]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"StructuralPartialEq","id":"1:2654:220","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1390":{"id":"0:1390","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[456,0],"end":[460,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Values","id":"0:1385:3820","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1393:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5261:2885":{"id":"0:5261:2885","crate_id":0,"name":"extend","span":{"filename":"library/alloc/src/string.rs","begin":[2082,4],"end":[2087,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["iter",{"kind":"generic","inner":"I"}]],"output":null,"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"primitive","inner":"char"}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:2908:95":{"id":"a:1:2644:214-0:2908:95","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:7709:3766-0:6944:6202":{"id":"a:1:7709:3766-0:6944:6202","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1309":{"id":"0:1309","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[186,0],"end":[190,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"btree_drop\", since = \"1.7.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1313:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6519:10034":{"id":"0:6519:10034","crate_id":0,"name":"into_flattened","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2457,4],"end":[2476,5]},"visibility":"public","docs":"Takes a `Vec<[T; N]>` and flattens it into a `Vec<T>`.\n\n# Panics\n\nPanics if the length of the resulting vector would overflow a `usize`.\n\nThis is only possible when flattening a vector of arrays of zero-sized\ntypes, and thus tends to be irrelevant in practice. If\n`size_of::<T>() > 0`, this will never panic.\n\n# Examples\n\n```\n#![feature(slice_flatten)]\n\nlet mut vec = vec![[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nassert_eq!(vec.pop(), Some([7, 8, 9]));\n\nlet mut flattened = vec.into_flattened();\nassert_eq!(flattened.pop(), Some(6));\n```","links":{},"attrs":["#[unstable(feature = \"slice_flatten\", issue = \"95629\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:782":{"id":"0:782","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[303,0],"end":[310,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Deref","id":"1:2886:115","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PeekMut","id":"0:771:3221","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:784:224","0:785:536"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:3303-0:6944:6202":{"id":"b:1:3303-0:6944:6202","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2495-0:6944:6202":{"id":"b:1:2495-0:6944:6202","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5644:224":{"id":"0:5644:224","crate_id":0,"name":"Target","span":{"filename":"library/alloc/src/sync.rs","begin":[1387,4],"end":[1387,20]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:5376":{"id":"0:5376","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2614,0],"end":[2619,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"string_to_string_specialization\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"ToString","id":"0:5360:226","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5377:1398"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:235:650":{"id":"0:235:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[103,4],"end":[105,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:7074:9310":{"id":"b:1:2510-0:7074:9310","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Splice","id":"0:7074:9310","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2499-0:6816:3475":{"id":"b:1:2499-0:6816:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1277:3528":{"id":"0:1277:3528","crate_id":0,"name":"key","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[310,4],"end":[312,5]},"visibility":"public","docs":"Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nassert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");\n```","links":{},"attrs":["#[stable(feature = \"map_entry_keys\", since = \"1.10.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3019:2010":{"id":"0:3019:2010","crate_id":0,"name":"new_in","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[368,4],"end":[370,5]},"visibility":"public","docs":"Makes a new `BTreeSet` with a reasonable choice of B.\n\n# Examples\n\n```\n# #![allow(unused_mut)]\n# #![feature(allocator_api)]\n# #![feature(btreemap_alloc)]\nuse std::collections::BTreeSet;\nuse std::alloc::Global;\n\nlet mut set: BTreeSet<i32> = BTreeSet::new_in(Global);\n```","links":{},"attrs":["#[unstable(feature = \"btreemap_alloc\", issue = \"32838\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:6734:3475":{"id":"b:1:2495-0:6734:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5423:8822":{"id":"0:5423:8822","crate_id":0,"name":"write_char","span":{"filename":"library/alloc/src/string.rs","begin":[2870,4],"end":[2873,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["c",{"kind":"primitive","inner":"char"}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:865:650":{"id":"0:865:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1310,4],"end":[1312,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:2970:4926":{"id":"b:1:2510-0:2970:4926","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:2970:4926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1871:59":{"id":"0:1871:59","crate_id":0,"name":"default","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2163,4],"end":[2165,5]},"visibility":"default","docs":"Creates an empty `BTreeMap`.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:291":{"id":"0:291","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[364,0],"end":[617,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:294:2010","0:295:2381","0:296:2357","0:297:2387","0:298:2367","0:299:2392","0:300:2413","0:301:2419","0:303:2427"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4166:6045":{"id":"0:4166:6045","crate_id":0,"name":"resize","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2620,4],"end":[2627,5]},"visibility":"public","docs":"Modifies the deque in-place so that `len()` is equal to new_len,\neither by removing excess elements from the back or by appending clones of `value`\nto the back.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(5);\nbuf.push_back(10);\nbuf.push_back(15);\nassert_eq!(buf, [5, 10, 15]);\n\nbuf.resize(2, 0);\nassert_eq!(buf, [5, 10]);\n\nbuf.resize(5, 20);\nassert_eq!(buf, [5, 10, 20, 20, 20]);\n```","links":{},"attrs":["#[stable(feature = \"deque_extras\", since = \"1.16.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["new_len",{"kind":"primitive","inner":"usize"}],["value",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3025:4976":{"id":"0:3025:4976","crate_id":0,"name":"symmetric_difference","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[491,4],"end":[499,5]},"visibility":"public","docs":"Visits the elements representing the symmetric difference,\ni.e., the elements that are in `self` or in `other` but not in both,\nin ascending order.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut a = BTreeSet::new();\na.insert(1);\na.insert(2);\n\nlet mut b = BTreeSet::new();\nb.insert(2);\nb.insert(3);\n\nlet sym_diff: Vec<_> = a.symmetric_difference(&b).cloned().collect();\nassert_eq!(sym_diff, [1, 3]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:2970:4926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3526:5349":{"id":"0:3526:5349","crate_id":0,"name":"pop_back","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1635,4],"end":[1649,5]},"visibility":"public","docs":"Removes the last element from the cursor's parent list and returns it,\nor None if the list is empty. The element the cursor points to remains\nunchanged, unless it was pointing to the back element. In that case, it\npoints to the \"ghost\" element.\n\nThis operation should compute in *O*(1) time.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4131:3797":{"id":"0:4131:3797","crate_id":0,"name":"insert","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1748,4],"end":[1774,5]},"visibility":"public","docs":"Inserts an element at `index` within the deque, shifting all elements\nwith indices greater than or equal to `index` towards the back.\n\nElement at index 0 is the front of the queue.\n\n# Panics\n\nPanics if `index` is greater than deque's length\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut vec_deque = VecDeque::new();\nvec_deque.push_back('a');\nvec_deque.push_back('b');\nvec_deque.push_back('c');\nassert_eq!(vec_deque, &['a', 'b', 'c']);\n\nvec_deque.insert(1, 'd');\nassert_eq!(vec_deque, &['a', 'd', 'b', 'c']);\n```","links":{},"attrs":["#[stable(feature = \"deque_extras_15\", since = \"1.5.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["index",{"kind":"primitive","inner":"usize"}],["value",{"kind":"generic","inner":"T"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2219-0:1435:3845":{"id":"b:1:2219-0:1435:3845","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangeMut","id":"0:1435:3845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5980:3433":{"id":"0:5980:3433","crate_id":0,"name":"as_slice","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[57,4],"end":[59,5]},"visibility":"public","docs":"Returns the remaining items of this iterator as a slice.\n\n# Examples\n\n```\nlet mut vec = vec!['a', 'b', 'c'];\nlet mut drain = vec.drain(..);\nassert_eq!(drain.as_slice(), &['a', 'b', 'c']);\nlet _ = drain.next().unwrap();\nassert_eq!(drain.as_slice(), &['b', 'c']);\n```","links":{},"attrs":["#[must_use]","#[stable(feature = \"vec_drain_as_slice\", since = \"1.46.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6133":{"id":"0:6133","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[338,0],"end":[342,1]},"visibility":{"restricted":{"parent":"0:6056:757","path":"::vec::into_iter"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6083:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:6136:2762"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6912":{"id":"0:6912","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[109,47],"end":[109,52]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6913:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:968:668":{"id":"0:968:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1596,4],"end":[1598,5]},"visibility":"default","docs":"```\nuse std::collections::BinaryHeap;\n\nlet mut h1 = BinaryHeap::from([1, 4, 2, 3]);\nlet mut h2: BinaryHeap<_> = [1, 4, 2, 3].into();\nwhile let Some((a, b)) = h1.pop().zip(h2.pop()) {\n    assert_eq!(a, b);\n}\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["arr",{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2644:214-0:2970:4926":{"id":"a:1:2644:214-0:2970:4926","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:2970:4926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4905":{"id":"0:4905","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[171,0],"end":[597,1]},"visibility":{"restricted":{"parent":"0:4810:1314","path":"::slice"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"slice","inner":{"kind":"generic","inner":"T"}},"items":["0:4907:5121","0:4908:4127","0:4911:7759","0:4915:7781","0:4919:1399","0:4920:2777","0:4922:1928","0:4924:7809","0:4925:431","0:4927:7823","0:4929:7831"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1509:3475":{"id":"0:1509:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1474,4],"end":[1474,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}}}},"0:232:650":{"id":"0:232:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[96,4],"end":[98,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:1435:3845":{"id":"b:1:2495-0:1435:3845","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangeMut","id":"0:1435:3845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:50505:8572":{"id":"1:50505:8572","crate_id":1,"name":"into_searcher","span":{"filename":"/rust-lang-rust/library/core/src/str/pattern.rs","begin":[910,4],"end":[910,93]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"CharPredicateSearcher","id":"1:50488:10935","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"F"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4867":{"id":"0:4867","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[64,31],"end":[64,41]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::RSplitNMut","name":"RSplitNMut","id":"1:9582:7702","glob":false}},"0:4385":{"id":"0:4385","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[878,0],"end":[886,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[cfg(target_has_atomic = \"ptr\")]","#[stable(feature = \"shared_from_slice2\", since = \"1.24.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:4386:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3359":{"id":"0:3359","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[113,0],"end":[125,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"collection_debug\", since = \"1.17.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3352:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3361:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3806":{"id":"0:3806","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[31,0],"end":[100,1]},"visibility":{"restricted":{"parent":"0:3783:4093","path":"::collections::vec_deque::iter_mut"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3809:2750","0:3810:921","0:3811:6108","0:3813:2751","0:3814:2756","0:3817:6111","0:3821:2753"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4765:7194":{"id":"0:4765:7194","crate_id":0,"name":"strong_count","span":{"filename":"library/alloc/src/rc.rs","begin":[2416,4],"end":[2418,5]},"visibility":"public","docs":"Gets the number of strong (`Rc`) pointers pointing to this allocation.\n\nIf `self` was created using [`Weak::new`], this will return 0.","links":{"`Weak::new`":"0:4752:908"},"attrs":["#[must_use]","#[stable(feature = \"weak_counts\", since = \"1.41.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:529:380":{"id":"0:529:380","crate_id":0,"name":"call_once","span":{"filename":"library/alloc/src/boxed.rs","begin":[1987,4],"end":[1989,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["args",{"kind":"generic","inner":"Args"}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:2920:2768","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":{"Other":"\"rust-call\""}},"has_body":true}},"a:1:7710:3767-0:3339:3356":{"id":"a:1:7710:3767-0:3339:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:4350:536":{"id":"0:4350:536","crate_id":0,"name":"deref","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[713,4],"end":[715,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4361:668":{"id":"0:4361:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[758,4],"end":[760,5]},"visibility":"default","docs":"Converts a `Cow<'a, CStr>` into a `CString`, by copying the contents if they are\nborrowed.","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11326:3929":{"id":"1:11326:3929","crate_id":1,"name":"get_mut","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[474,4],"end":[474,94]},"visibility":"public","docs":"Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```","links":{"`None`":"1:47999:173"},"attrs":["#[rustc_const_unstable(feature = \"const_slice_index\", issue = \"none\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"I"},"trait":{"name":"SliceIndex","id":"1:9110:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"SliceIndex","id":"1:9110:216","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:768:96":{"id":"b:1:2216-0:768:96","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"b:1:2510-0:6944:6202":{"id":"b:1:2510-0:6944:6202","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:398:2643":{"id":"0:398:2643","crate_id":0,"name":"write_i64","span":{"filename":"library/alloc/src/boxed.rs","begin":[1421,4],"end":[1423,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"i64"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6004:2759":{"id":"0:6004:2759","crate_id":0,"name":"next_back","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[170,4],"end":[172,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3873:2751":{"id":"0:3873:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[51,4],"end":[54,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5895:571":{"id":"0:5895:571","crate_id":0,"name":"drop","span":{"filename":"library/alloc/src/vec/drain_filter.rs","begin":[158,4],"end":[198,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:7020-0:3723:3449":{"id":"b:1:7020-0:3723:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/iter/traits/collect.rs","begin":[267,0],"end":[267,42]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"I"},"bounds":[{"trait_bound":{"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:3723:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:7022:2750","1:7023:3475","1:7024:757"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"I"}}},"0:5818:668":{"id":"0:5818:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/task.rs","begin":[111,4],"end":[113,5]},"visibility":"default","docs":"Use a `Wake`-able type as a `RawWaker`.\n\nNo heap allocations or atomic operations are used for this conversion.","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["waker",{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"W"}}],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"RawWaker","id":"1:50922:9229","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:927":{"id":"0:927","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1499,0],"end":[1504,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:6749:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:929:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:7222":{"id":"0:7222","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[24,0],"end":[24,99]},"visibility":{"restricted":{"parent":"0:6257:9314","path":"::vec::partial_eq"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"U"}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:7226:595","0:7227:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1449":{"id":"0:1449","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[590,0],"end":[637,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1453:3451","0:1454:2010"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2658:222-0:6914:6204":{"id":"a:1:2658:222-0:6914:6204","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"NulError","id":"0:6914:6204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:1544:757":{"id":"0:1544:757","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1545,4],"end":[1547,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:1348:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:7057:4069":{"id":"b:1:3303-0:7057:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:7057:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1679:409":{"id":"0:1679:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1807,4],"end":[1809,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:5964:3449":{"id":"a:1:7709:3766-0:5964:3449","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:3015:908":{"id":"0:3015:908","crate_id":0,"name":"new","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[348,4],"end":[350,5]},"visibility":"public","docs":"Makes a new, empty `BTreeSet`.\n\nDoes not allocate anything on its own.\n\n# Examples\n\n```\n# #![allow(unused_mut)]\nuse std::collections::BTreeSet;\n\nlet mut set: BTreeSet<i32> = BTreeSet::new();\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_stable(feature = \"const_btree_new\", since = \"1.66.0\")]","#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[],"output":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4104:768":{"id":"0:4104:768","crate_id":0,"name":"iter","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1093,4],"end":[1096,5]},"visibility":"public","docs":"Returns a front-to-back iterator.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(5);\nbuf.push_back(3);\nbuf.push_back(4);\nlet b: &[_] = &[&5, &3, &4];\nlet c: Vec<&i32> = buf.iter().collect();\nassert_eq!(&c[..], b);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5767:126":{"id":"0:5767:126","crate_id":0,"name":"Error","span":{"filename":"library/alloc/src/sync.rs","begin":[2666,4],"end":[2666,26]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}],"bindings":[]}}}}}},"0:5277:1746":{"id":"0:5277:1746","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/string.rs","begin":[2126,4],"end":[2128,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["s",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5741":{"id":"0:5741","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2498,0],"end":[2516,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"from_for_ptrs\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5743:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2219-0:6881:1972":{"id":"b:1:2219-0:6881:1972","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6153:409":{"id":"0:6153:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[375,4],"end":[377,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:663":{"id":"0:663","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[21,0],"end":[28,1]},"visibility":{"restricted":{"parent":"0:648:1793","path":"::borrow"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"B"},"bounds":[{"trait_bound":{"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["0:666:1793"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3406:5327":{"id":"0:3406:5327","crate_id":0,"name":"back_mut","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[771,4],"end":[773,5]},"visibility":"public","docs":"Provides a mutable reference to the back element, or `None` if the list\nis empty.\n\nThis operation should compute in *O*(1) time.\n\n# Examples\n\n```\nuse std::collections::LinkedList;\n\nlet mut dl = LinkedList::new();\nassert_eq!(dl.back(), None);\n\ndl.push_back(1);\nassert_eq!(dl.back(), Some(&1));\n\nmatch dl.back_mut() {\n    None => {},\n    Some(x) => *x = 5,\n}\nassert_eq!(dl.back(), Some(&5));\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5302:8714":{"id":"0:5302:8714","crate_id":0,"name":"strip_suffix_of","span":{"filename":"library/alloc/src/string.rs","begin":[2205,4],"end":[2207,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["haystack",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:2221:2781":{"id":"1:2221:2781","crate_id":1,"name":"borrow_mut","span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[221,4],"end":[221,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:1680:4069":{"id":"b:1:2495-0:1680:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:1680:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5067":{"id":"0:5067","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[55,31],"end":[55,41]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"utf8_chunks\", issue = \"99543\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::Utf8Chunks","name":"Utf8Chunks","id":"1:50593:7950","glob":false}},"b:1:2499-0:6881:1972":{"id":"b:1:2499-0:6881:1972","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"1:11437:13908":{"id":"1:11437:13908","crate_id":1,"name":"escape_default","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[2533,4],"end":[2533,53]},"visibility":"public","docs":"Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{c}\");\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```","links":{"`char::escape_default`":"1:4450:13908"},"attrs":["#[must_use =\n\"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"EscapeDefault","id":"1:50273:7937","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5592":{"id":"0:5592","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[836,0],"end":[1152,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5594:2546","0:5595:306","0:5596:2513","0:5597:7249","0:5598:7257","0:5599:7194","0:5600:7271","0:5601:7279","0:5604:7324"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2505-0:7057:4069":{"id":"b:1:2505-0:7057:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:7057:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6903:995":{"id":"0:6903:995","crate_id":0,"name":"partial_cmp","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[109,20],"end":[109,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::option::Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4925:431":{"id":"0:4925:431","crate_id":0,"name":"concat","span":{"filename":"library/alloc/src/slice.rs","begin":[552,4],"end":[557,5]},"visibility":"public","docs":"Flattens a slice of `T` into a single value `Self::Output`.\n\n# Examples\n\n```\nassert_eq!([\"hello\", \"world\"].concat(), \"helloworld\");\nassert_eq!([[1, 2], [3, 4]].concat(), [1, 2, 3, 4]);\n```","links":{},"attrs":["#[rustc_allow_incoherent_impl]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"qualified_path","inner":{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"Concat","id":"0:4934:7816","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Item"}}],"bindings":[]}}}}},"c_variadic":false},"generics":{"params":[{"name":"Item","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"Self"},"bounds":[{"trait_bound":{"trait":{"name":"Concat","id":"0:4934:7816","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Item"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5790:307":{"id":"0:5790:307","crate_id":0,"name":"as_ref","span":{"filename":"library/alloc/src/sync.rs","begin":[2771,4],"end":[2773,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2505-0:5424:3449":{"id":"b:1:2505-0:5424:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4312:6299":{"id":"0:4312:6299","crate_id":0,"name":"into_bytes","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[212,4],"end":[214,5]},"visibility":"public","docs":"Returns the bytes that were attempted to convert to a [`CString`].\n\nThis method is carefully constructed to avoid allocation. It will\nconsume the error, moving out the bytes, so that a copy of the bytes\ndoes not need to be made.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::ffi::CString;\n\n// Some invalid bytes in a vector\nlet bytes = b\"f\\0oo\".to_vec();\n\nlet value = CString::from_vec_with_nul(bytes.clone());\n\nassert_eq!(bytes, value.unwrap_err().into_bytes());\n```","links":{"`CString`":"0:6897:102"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"cstring_from_vec_with_nul\", since = \"1.58.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:109:512":{"id":"0:109:512","crate_id":0,"name":"dealloc","span":{"filename":"library/alloc/src/alloc.rs","begin":[112,0],"end":[114,1]},"visibility":"public","docs":"Deallocate memory with the global allocator.\n\nThis function forwards calls to the [`GlobalAlloc::dealloc`] method\nof the allocator registered with the `#[global_allocator]` attribute\nif there is one, or the `std` crate’s default.\n\nThis function is expected to be deprecated in favor of the `dealloc` method\nof the [`Global`] type when it and the [`Allocator`] trait become stable.\n\n# Safety\n\nSee [`GlobalAlloc::dealloc`].","links":{"`GlobalAlloc::dealloc`":"1:11893:512","`Allocator`":"1:11946:1969","`Global`":"0:6725:1970"},"attrs":["#[stable(feature = \"global_alloc\", since = \"1.28.0\")]","#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["ptr",{"kind":"raw_pointer","inner":{"mutable":true,"type":{"kind":"primitive","inner":"u8"}}}],["layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50943:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:1289:4195":{"id":"0:1289:4195","crate_id":0,"name":"into_mut","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[503,4],"end":[505,5]},"visibility":"public","docs":"Converts the entry into a mutable reference to its value.\n\nIf you need multiple references to the `OccupiedEntry`, see [`get_mut`].\n\n[`get_mut`]: OccupiedEntry::get_mut\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\nuse std::collections::btree_map::Entry;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\nmap.entry(\"poneyland\").or_insert(12);\n\nassert_eq!(map[\"poneyland\"], 12);\nif let Entry::Occupied(o) = map.entry(\"poneyland\") {\n    *o.into_mut() += 10;\n}\nassert_eq!(map[\"poneyland\"], 22);\n```","links":{"OccupiedEntry::get_mut":"0:1288:3929"},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5121:1796":{"id":"0:5121:1796","crate_id":0,"name":"string","span":{"filename":"library/alloc/src/string.rs","begin":[1,0],"end":[2998,1]},"visibility":"public","docs":"A UTF-8–encoded, growable string.\n\nThis module contains the [`String`] type, the [`ToString`] trait for\nconverting to strings, and several error types that may result from\nworking with [`String`]s.\n\n# Examples\n\nThere are multiple ways to create a new [`String`] from a string literal:\n\n```\nlet s = \"Hello\".to_string();\n\nlet s = String::from(\"world\");\nlet s: String = \"also this\".into();\n```\n\nYou can create a new [`String`] from an existing one by concatenating with\n`+`:\n\n```\nlet s = \"Hello\".to_string();\n\nlet message = s + \" world!\";\n```\n\nIf you have a vector of valid UTF-8 bytes, you can make a [`String`] out of\nit. You can do the reverse too.\n\n```\nlet sparkle_heart = vec![240, 159, 146, 150];\n\n// We know these bytes are valid, so we'll use `unwrap()`.\nlet sparkle_heart = String::from_utf8(sparkle_heart).unwrap();\n\nassert_eq!(\"💖\", sparkle_heart);\n\nlet bytes = sparkle_heart.into_bytes();\n\nassert_eq!(bytes, [240, 159, 146, 150]);\n```","links":{"`String`":"0:6980:218","`ToString`":"0:5360:226"},"attrs":["#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:6980:218","0:6991:8288","0:7002:8296","0:5356:8746","0:5360:226","0:5424:3449"],"is_stripped":false}},"0:6927:650":{"id":"0:6927:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[134,31],"end":[134,36]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4673:815":{"id":"0:4673:815","crate_id":0,"name":"lt","span":{"filename":"library/alloc/src/rc.rs","begin":[1782,4],"end":[1784,5]},"visibility":"default","docs":"Less-than comparison for two `Rc`s.\n\nThe two are compared by calling `<` on their inner values.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nassert!(five < Rc::new(6));\n```","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:1301:94":{"id":"b:1:2510-0:1301:94","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1756:782":{"id":"0:1756:782","crate_id":0,"name":"len","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1974,4],"end":[1976,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"usize"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3770:921":{"id":"0:3770:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/vec_deque/drain.rs","begin":[197,4],"end":[205,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:3303-0:6740:3364":{"id":"b:1:3303-0:6740:3364","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/any.rs","begin":[200,0],"end":[200,35]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"outlives":"'static"},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:3305:1432"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:987:757":{"id":"0:987:757","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1652,4],"end":[1654,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:915:2751":{"id":"0:915:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1456,4],"end":[1459,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1735:2753":{"id":"0:1735:2753","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1935,4],"end":[1937,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6897:102":{"id":"0:6897:102","crate_id":0,"name":"CString","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[112,0],"end":[117,1]},"visibility":"public","docs":"A type representing an owned, C-compatible, nul-terminated string with no nul bytes in the\nmiddle.\n\nThis type serves the purpose of being able to safely generate a\nC-compatible string from a Rust byte slice or vector. An instance of this\ntype is a static guarantee that the underlying bytes contain no interior 0\nbytes (\"nul characters\") and that the final byte is 0 (\"nul terminator\").\n\n`CString` is to <code>&[CStr]</code> as [`String`] is to <code>&[str]</code>: the former\nin each pair are owned strings; the latter are borrowed\nreferences.\n\n# Creating a `CString`\n\nA `CString` is created from either a byte slice or a byte vector,\nor anything that implements <code>[Into]<[Vec]<[u8]>></code> (for\nexample, you can build a `CString` straight out of a [`String`] or\na <code>&[str]</code>, since both implement that trait).\n\nThe [`CString::new`] method will actually check that the provided <code>&[[u8]]</code>\ndoes not have 0 bytes in the middle, and return an error if it\nfinds one.\n\n# Extracting a raw pointer to the whole C string\n\n`CString` implements an [`as_ptr`][`CStr::as_ptr`] method through the [`Deref`]\ntrait. This method will give you a `*const c_char` which you can\nfeed directly to extern functions that expect a nul-terminated\nstring, like C's `strdup()`. Notice that [`as_ptr`][`CStr::as_ptr`] returns a\nread-only pointer; if the C code writes to it, that causes\nundefined behavior.\n\n# Extracting a slice of the whole C string\n\nAlternatively, you can obtain a <code>&[[u8]]</code> slice from a\n`CString` with the [`CString::as_bytes`] method. Slices produced in this\nway do *not* contain the trailing nul terminator. This is useful\nwhen you will be calling an extern function that takes a `*const\nu8` argument which is not necessarily nul-terminated, plus another\nargument with the length of the string — like C's `strndup()`.\nYou can of course get the slice's length with its\n[`len`][slice::len] method.\n\nIf you need a <code>&[[u8]]</code> slice *with* the nul terminator, you\ncan use [`CString::as_bytes_with_nul`] instead.\n\nOnce you have the kind of slice you need (with or without a nul\nterminator), you can call the slice's own\n[`as_ptr`][slice::as_ptr] method to get a read-only raw pointer to pass to\nextern functions. See the documentation for that function for a\ndiscussion on ensuring the lifetime of the raw pointer.\n\n[str]: prim@str \"str\"\n[`Deref`]: ops::Deref\n\n# Examples\n\n```ignore (extern-declaration)\n# fn main() {\nuse std::ffi::CString;\nuse std::os::raw::c_char;\n\nextern \"C\" {\n    fn my_printer(s: *const c_char);\n}\n\n// We are certain that our string doesn't have 0 bytes in the middle,\n// so we can .expect()\nlet c_to_print = CString::new(\"Hello, world!\").expect(\"CString::new failed\");\nunsafe {\n    my_printer(c_to_print.as_ptr());\n}\n# }\n```\n\n# Safety\n\n`CString` is intended for working with traditional C-style strings\n(a sequence of non-nul bytes terminated by a single nul byte); the\nprimary use case for these kinds of strings is interoperating with C-like\ncode. Often you will need to transfer ownership to/from that external\ncode. It is strongly recommended that you thoroughly read through the\ndocumentation of `CString` before use, as improper ownership management\nof `CString` instances can lead to invalid memory accesses, memory leaks,\nand other memory errors.","links":{"slice::as_ptr":"1:10335:306","ops::Deref":"1:2886:115","`CString::new`":"0:4314:908","Into":"1:2469:145","u8":"1:58447:10472","CStr":"1:46902:101","Vec":"0:6407:237","`CString::as_bytes`":"0:4338:2629","slice::len":"1:10317:782","`CString::as_bytes_with_nul`":"0:4339:6412","`String`":"0:6980:218","prim@str":"1:58436:10463","`CStr::as_ptr`":"1:4629:306"},"attrs":["#[rustc_diagnostic_item = \"cstring_type\"]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[],"where_predicates":[]},"impls":["0:4313","a:1:2658:222-0:6897:102","a:1:2644:214-0:6897:102","a:1:2708:2329-0:6897:102","a:1:7709:3766-0:6897:102","a:1:7710:3767-0:6897:102","b:0:671-0:6897:102","b:1:2510-0:6897:102","b:1:2505-0:6897:102","b:1:2216-0:6897:102","b:1:3303-0:6897:102","b:1:2219-0:6897:102","b:1:2499-0:6897:102","b:1:2495-0:6897:102","0:6899","0:6900","0:6902","0:6904","0:6905","0:6907","0:6909","0:6912","0:4346","0:4348","0:4351","0:4353","0:4355","0:4357","0:4359","0:4366","0:4368","0:4372","0:4374","0:4380","0:4383","0:4387","0:4412","0:4414","0:4417"]}},"0:830:2104":{"id":"0:830:2104","crate_id":0,"name":"reserve_exact","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[937,4],"end":[939,5]},"visibility":"public","docs":"Reserves the minimum capacity for at least `additional` elements more than\nthe current length. Unlike [`reserve`], this will not\ndeliberately over-allocate to speculatively avoid frequent allocations.\nAfter calling `reserve_exact`, capacity will be greater than or equal to\n`self.len() + additional`. Does nothing if the capacity is already\nsufficient.\n\n[`reserve`]: BinaryHeap::reserve\n\n# Panics\n\nPanics if the new capacity overflows [`usize`].\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet mut heap = BinaryHeap::new();\nheap.reserve_exact(100);\nassert!(heap.capacity() >= 100);\nheap.push(4);\n```\n\n[`reserve`]: BinaryHeap::reserve","links":{"`usize`":"1:58453:10478","BinaryHeap::reserve":"0:831:2086"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1791:921":{"id":"0:1791:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2028,4],"end":[2030,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3832:6117":{"id":"0:3832:6117","crate_id":0,"name":"try_rfold","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[138,4],"end":[145,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["init",{"kind":"generic","inner":"B"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"R"},"c_variadic":false},"generics":{"params":[{"name":"B","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"B"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7130:154","args":null}}}],"output":{"kind":"generic","inner":"R"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"Try","id":"1:3139:227","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Output","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"generic","inner":"B"}}}}]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1459:3294":{"id":"0:1459:3294","crate_id":0,"name":"get","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[658,4],"end":[668,5]},"visibility":"public","docs":"Returns a reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map's key type, but the ordering\non the borrowed form *must* match the ordering on the key type.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get(&1), Some(&\"a\"));\nassert_eq!(map.get(&2), None);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3241:4091":{"id":"0:3241:4091","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1660,4],"end":[1662,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:3096:4069":{"id":"b:1:2510-0:3096:4069","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"DrainFilter","id":"0:3096:4069","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"F"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3814:2756":{"id":"0:3814:2756","crate_id":0,"name":"fold","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[65,4],"end":[71,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["accum",{"kind":"generic","inner":"Acc"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Acc"},"c_variadic":false},"generics":{"params":[{"name":"Acc","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnMut","id":"1:2917:2770","args":{"parenthesized":{"inputs":[{"kind":"generic","inner":"Acc"},{"kind":"qualified_path","inner":{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7130:154","args":null}}}],"output":{"kind":"generic","inner":"Acc"}}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:1348:3805":{"id":"b:1:2495-0:1348:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:1348:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:375:416":{"id":"0:375:416","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/boxed.rs","begin":[1372,4],"end":[1374,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11367:13642":{"id":"1:11367:13642","crate_id":1,"name":"rsplit","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[1436,4],"end":[1438,54]},"visibility":"public","docs":"An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```","links":{"str::split":"1:11361:3524","self::pattern":"1:11013:1760","prim@char":"1:58430:10458","`DoubleEndedIterator`":"1:7053:119"},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["pat",{"kind":"generic","inner":"P"}]],"output":{"kind":"resolved_path","inner":{"name":"RSplit","id":"1:49983:7699","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"P"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"P","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"P"},"bounds":[{"trait_bound":{"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"qualified_path","inner":{"name":"Searcher","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"P"},"trait":{"name":"Pattern","id":"1:11018:7918","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}}}},"bounds":[{"trait_bound":{"trait":{"name":"ReverseSearcher","id":"1:11033:7919","args":{"angle_bracketed":{"args":[{"lifetime":"'a"}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4237":{"id":"0:4237","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2811,0],"end":[2815,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:4240:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:675:2911":{"id":"0:675:2911","crate_id":0,"name":"clone_into","span":{"filename":"library/alloc/src/borrow.rs","begin":[91,4],"end":[93,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["target",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"T"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2216-0:1435:3845":{"id":"b:1:2216-0:1435:3845","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangeMut","id":"0:1435:3845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:658":{"id":"0:658","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[12,23],"end":[12,29]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::borrow::Borrow","name":"Borrow","id":"1:2210:97","glob":false}},"0:5964:3449":{"id":"0:5964:3449","crate_id":0,"name":"Drain","span":{"filename":"library/alloc/src/vec/drain.rs","begin":[22,0],"end":[34,1]},"visibility":"public","docs":"A draining iterator for `Vec<T>`.\n\nThis `struct` is created by [`Vec::drain`].\nSee its documentation for more.\n\n# Example\n\n```\nlet mut v = vec![0, 1, 2];\nlet iter: std::vec::Drain<_> = v.drain(..);\n```","links":{"`Vec::drain`":"0:6493:3448"},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[{"outlives":"'a"}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"outlives":"'a"}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:5976","a:1:2708:2329-0:5964:3449","a:1:7709:3766-0:5964:3449","a:1:7710:3767-0:5964:3449","b:1:7020-0:5964:3449","b:1:2510-0:5964:3449","b:1:2505-0:5964:3449","b:1:2216-0:5964:3449","b:1:3303-0:5964:3449","b:1:2219-0:5964:3449","b:1:2499-0:5964:3449","b:1:2495-0:5964:3449","0:5972","0:5983","0:5988","0:5991","0:5994","0:6001","0:6006","0:6023","0:6027","0:6030"]}},"0:5251:670":{"id":"0:5251:670","crate_id":0,"name":"from_iter","span":{"filename":"library/alloc/src/string.rs","begin":[2033,4],"end":[2046,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["iter",{"kind":"generic","inner":"I"}]],"output":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[{"name":"Item","args":{"angle_bracketed":{"args":[],"bindings":[]}},"binding":{"equality":{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}}]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4077":{"id":"0:4077","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[564,0],"end":[2595,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:4080:2010","0:4081:2021","0:4083:3294","0:4084:3929","0:4085:3147","0:4086:2020","0:4087:2104","0:4088:2086","0:4089:2105","0:4090:2097","0:4091:2111","0:4092:3422","0:4093:5696","0:4103:283","0:4104:768","0:4105:4093","0:4106:5704","0:4107:5536","0:4108:782","0:4109:2762","0:4112:3801","0:4114:4017","0:4116:3448","0:4118:3451","0:4119:4997","0:4120:4073","0:4121:5319","0:4122:4312","0:4123:5327","0:4124:5339","0:4125:5349","0:4126:5331","0:4127:5344","0:4129:5820","0:4130:5825","0:4131:3797","0:4132:3521","0:4133:4039","0:4134:3320","0:4135:3348","0:4138:5879","0:4141:5901","0:4142:5929","0:4143:1118","0:4144:1119","0:4147:5991","0:4149:5992","0:4155:6020","0:4160:6037"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:327":{"id":"0:327","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[962,0],"end":[1232,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:330:2048","0:331:2546","0:332:2420","0:334:283","0:335:1585","0:337:2414"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5432":{"id":"0:5432","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2902,0],"end":[2902,33]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5424:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:802:650":{"id":"0:802:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[354,4],"end":[356,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:6822:3475":{"id":"b:1:2510-0:6822:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5991":{"id":"0:5991","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/drain.rs","begin":[151,0],"end":[151,69]},"visibility":{"restricted":{"parent":"0:5946:3448","path":"::vec::drain"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:5964:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1714:2751":{"id":"0:1714:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1875,4],"end":[1877,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2499-0:3723:3449":{"id":"b:1:2499-0:3723:3449","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:3723:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"a:1:2658:222-0:2937:3356":{"id":"a:1:2658:222-0:2937:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:2937:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2505-0:6957:6203":{"id":"b:1:2505-0:6957:6203","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:640":{"id":"0:640","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2394,0],"end":[2411,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"cow_box_error\", since = \"1.22.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}}},"items":["0:642:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2219-0:1185:3669":{"id":"b:1:2219-0:1185:3669","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[220,0],"end":[220,40]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"BorrowMut","id":"1:2213:98","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:1185:3669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2221:2781"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6908:416":{"id":"0:6908:416","crate_id":0,"name":"cmp","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[109,36],"end":[109,39]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"$crate::cmp::Ordering","id":"1:38069:177","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11313:2762":{"id":"1:11313:2762","crate_id":1,"name":"is_empty","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[180,4],"end":[180,40]},"visibility":"public","docs":"Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```","links":{},"attrs":["#[must_use]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":true,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:880":{"id":"0:880","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1352,0],"end":[1356,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:882:2762"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2495-0:1185:3669":{"id":"b:1:2495-0:1185:3669","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Entry","id":"0:1185:3669","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:3154:180":{"id":"0:3154:180","crate_id":0,"name":"Output","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1409,4],"end":[1409,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"b:1:2505-0:3900:3356":{"id":"b:1:2505-0:3900:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[760,0],"end":[760,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryInto","id":"1:2475:231","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2508:126","1:2509:1419"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5090:2677":{"id":"0:5090:2677","crate_id":0,"name":"Owned","span":{"filename":"library/alloc/src/str.rs","begin":[206,4],"end":[206,24]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"0:4085:3147":{"id":"0:4085:3147","crate_id":0,"name":"swap","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[704,4],"end":[710,5]},"visibility":"public","docs":"Swaps elements at indices `i` and `j`.\n\n`i` and `j` may be equal.\n\nElement at index 0 is the front of the queue.\n\n# Panics\n\nPanics if either index is out of bounds.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut buf = VecDeque::new();\nbuf.push_back(3);\nbuf.push_back(4);\nbuf.push_back(5);\nassert_eq!(buf, [3, 4, 5]);\nbuf.swap(0, 2);\nassert_eq!(buf, [5, 4, 3]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["i",{"kind":"primitive","inner":"usize"}],["j",{"kind":"primitive","inner":"usize"}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7042":{"id":"0:7042","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2257,0],"end":[2257,34]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(unused_lifetimes)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'b","mutable":false,"type":{"kind":"primitive","inner":"str"}}},"items":["0:7045:595","0:7046:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:461:2731":{"id":"0:461:2731","crate_id":0,"name":"downcast","span":{"filename":"library/alloc/src/boxed.rs","begin":[1833,4],"end":[1835,5]},"visibility":"public","docs":"Attempt to downcast the box to a concrete type.\n\n# Examples\n\n```\nuse std::any::Any;\n\nfn print_if_string(value: Box<dyn Any + Send + Sync>) {\n    if let Ok(string) = value.downcast::<String>() {\n        println!(\"String ({}): {}\", string.len(), string);\n    }\n}\n\nlet my_string = \"Hello World\".to_string();\nprint_if_string(Box::new(my_string));\nprint_if_string(Box::new(0i8));\n```","links":{},"attrs":["#[inline]","#[stable(feature = \"box_send_sync_any_downcast\", since = \"1.51.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}},{"type":{"kind":"generic","inner":"Self"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6687:2784":{"id":"0:6687:2784","crate_id":0,"name":"as_mut","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[3101,4],"end":[3103,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5183:2097":{"id":"0:5183:2097","crate_id":0,"name":"try_reserve","span":{"filename":"library/alloc/src/string.rs","begin":[1111,4],"end":[1113,5]},"visibility":"public","docs":"Tries to reserve capacity for at least `additional` bytes more than the\ncurrent length. The allocator may reserve more space to speculatively\navoid frequent allocations. After calling `try_reserve`, capacity will be\ngreater than or equal to `self.len() + additional` if it returns\n`Ok(())`. Does nothing if capacity is already sufficient. This method\npreserves the contents even if an error occurs.\n\n# Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse std::collections::TryReserveError;\n\nfn process_data(data: &str) -> Result<String, TryReserveError> {\n    let mut output = String::new();\n\n    // Pre-reserve the memory, exiting if we can't\n    output.try_reserve(data.len())?;\n\n    // Now we know this can't OOM in the middle of our complex work\n    output.push_str(data);\n\n    Ok(output)\n}\n# process_data(\"rust\").expect(\"why is the test harness OOMing on 4 bytes?\");\n```","links":{},"attrs":["#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5521":{"id":"0:5521","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[255,0],"end":[255,56]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"catch_unwind\", since = \"1.9.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3034:3294":{"id":"0:3034:3294","crate_id":0,"name":"get","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[641,4],"end":[647,5]},"visibility":"public","docs":"Returns a reference to the element in the set, if any, that is equal to\nthe value.\n\nThe value may be any borrowed form of the set's element type,\nbut the ordering on the borrowed form *must* match the\nordering on the element type.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet set = BTreeSet::from([1, 2, 3]);\nassert_eq!(set.get(&2), Some(&2));\nassert_eq!(set.get(&4), None);\n```","links":{},"attrs":["#[stable(feature = \"set_recovery\", since = \"1.9.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1434:650":{"id":"0:1434:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[537,4],"end":[539,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:2708:2329-0:1301:94":{"id":"a:1:2708:2329-0:1301:94","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"b:1:2510-0:6816:3475":{"id":"b:1:2510-0:6816:3475","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5184:2105":{"id":"0:5184:2105","crate_id":0,"name":"try_reserve_exact","span":{"filename":"library/alloc/src/string.rs","begin":[1152,4],"end":[1154,5]},"visibility":"public","docs":"Tries to reserve the minimum capacity for at least `additional` bytes\nmore than the current length. Unlike [`try_reserve`], this will not\ndeliberately over-allocate to speculatively avoid frequent allocations.\nAfter calling `try_reserve_exact`, capacity will be greater than or\nequal to `self.len() + additional` if it returns `Ok(())`.\nDoes nothing if the capacity is already sufficient.\n\nNote that the allocator may give the collection more space than it\nrequests. Therefore, capacity can not be relied upon to be precisely\nminimal. Prefer [`try_reserve`] if future insertions are expected.\n\n[`try_reserve`]: String::try_reserve\n\n# Errors\n\nIf the capacity overflows, or the allocator reports a failure, then an error\nis returned.\n\n# Examples\n\n```\nuse std::collections::TryReserveError;\n\nfn process_data(data: &str) -> Result<String, TryReserveError> {\n    let mut output = String::new();\n\n    // Pre-reserve the memory, exiting if we can't\n    output.try_reserve_exact(data.len())?;\n\n    // Now we know this can't OOM in the middle of our complex work\n    output.push_str(data);\n\n    Ok(output)\n}\n# process_data(\"rust\").expect(\"why is the test harness OOMing on 4 bytes?\");\n```","links":{"String::try_reserve":"0:5183:2097"},"attrs":["#[stable(feature = \"try_reserve\", since = \"1.57.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["additional",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3029:62":{"id":"0:3029:62","crate_id":0,"name":"union","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[573,4],"end":[578,5]},"visibility":"public","docs":"Visits the elements representing the union,\ni.e., all the elements in `self` or `other`, without duplicates,\nin ascending order.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut a = BTreeSet::new();\na.insert(1);\n\nlet mut b = BTreeSet::new();\nb.insert(2);\n\nlet union: Vec<_> = a.union(&b).cloned().collect();\nassert_eq!(union, [1, 2]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Union","id":"0:3004:4940","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3915":{"id":"0:3915","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[39,0],"end":[108,1]},"visibility":{"restricted":{"parent":"0:3889:768","path":"::collections::vec_deque::iter"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3918:2750","0:3919:921","0:3920:6108","0:3922:2751","0:3923:2756","0:3926:6111","0:3930:2753"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5316":{"id":"0:5316","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2334,0],"end":[2342,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":"Implements the `+` operator for concatenating two strings.\n\nThis consumes the `String` on the left-hand side and re-uses its buffer (growing it if\nnecessary). This is done to avoid allocating a new `String` and copying the entire contents on\nevery operation, which would lead to *O*(*n*^2) running time when building an *n*-byte string by\nrepeated concatenation.\n\nThe string on the right-hand side is only borrowed; its contents are copied into the returned\n`String`.\n\n# Examples\n\nConcatenating two `String`s takes the first by value and borrows the second:\n\n```\nlet a = String::from(\"hello\");\nlet b = String::from(\" world\");\nlet c = a + &b;\n// `a` is moved and can no longer be used here.\n```\n\nIf you want to keep using the first `String`, you can clone it and append to the clone instead:\n\n```\nlet a = String::from(\"hello\");\nlet b = String::from(\" world\");\nlet c = a.clone() + &b;\n// `a` is still valid here.\n```\n\nConcatenating `&str` slices can be done by converting the first to a `String`:\n\n```\nlet a = \"hello\";\nlet b = \" world\";\nlet c = a.to_string() + b;\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Add","id":"1:2735:2887","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5317:180","0:5318:267"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5543":{"id":"0:5543","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[312,0],"end":[312,78]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"Unsize","id":"1:2652:2330","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DispatchFromDyn","id":"1:3218:2333","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6998:595":{"id":"0:6998:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[406,16],"end":[406,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"FromUtf8Error","id":"0:6991:8288","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5292:1746":{"id":"0:5292:1746","crate_id":0,"name":"extend_one","span":{"filename":"library/alloc/src/string.rs","begin":[2160,4],"end":[2162,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["s",{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:647:2625":{"id":"0:647:2625","crate_id":0,"name":"source","span":{"filename":"library/alloc/src/boxed.rs","begin":[2425,4],"end":[2427,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"core::error::Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":"'static"}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5694":{"id":"0:5694","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2212,0],"end":[2253,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"arc_weak\", since = \"1.4.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:5533:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5696:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1454:2010":{"id":"0:1454:2010","crate_id":0,"name":"new_in","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[634,4],"end":[636,5]},"visibility":"public","docs":"Makes a new empty BTreeMap with a reasonable choice for B.\n\n# Examples\n\nBasic usage:\n\n```\n# #![feature(allocator_api)]\n# #![feature(btreemap_alloc)]\nuse std::collections::BTreeMap;\nuse std::alloc::Global;\n\nlet mut map = BTreeMap::new_in(Global);\n\n// entries can now be inserted into the empty map\nmap.insert(1, \"a\");\n```","links":{},"attrs":["#[unstable(feature = \"btreemap_alloc\", issue = \"32838\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["alloc",{"kind":"generic","inner":"A"}]],"output":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1828:2753":{"id":"0:1828:2753","crate_id":0,"name":"last","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2083,4],"end":[2085,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:119:2128":{"id":"0:119:2128","crate_id":0,"name":"grow","span":{"filename":"library/alloc/src/alloc.rs","begin":[255,4],"end":[263,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["ptr",{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:1815:1966","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"u8"}}],"bindings":[]}}}}],["old_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50943:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}],["new_layout",{"kind":"resolved_path","inner":{"name":"Layout","id":"1:50943:155","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"NonNull","id":"1:1815:1966","args":{"angle_bracketed":{"args":[{"type":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}}}],"bindings":[]}}}}},{"type":{"kind":"resolved_path","inner":{"name":"AllocError","id":"1:50972:2125","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:4764:7614":{"id":"0:4764:7614","crate_id":0,"name":"upgrade","span":{"filename":"library/alloc/src/rc.rs","begin":[2398,4],"end":[2409,5]},"visibility":"public","docs":"Attempts to upgrade the `Weak` pointer to an [`Rc`], delaying\ndropping of the inner value if successful.\n\nReturns [`None`] if the inner value has since been dropped.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nlet weak_five = Rc::downgrade(&five);\n\nlet strong_five: Option<Rc<_>> = weak_five.upgrade();\nassert!(strong_five.is_some());\n\n// Destroy all strong pointers.\ndrop(strong_five);\ndrop(five);\n\nassert!(weak_five.upgrade().is_none());\n```","links":{"`Rc`":"0:4521:198","`None`":"1:47999:173"},"attrs":["#[must_use =\n\"this returns a new `Rc`, \\\n                  without modifying the original weak pointer\"]","#[stable(feature = \"rc_weak\", since = \"1.4.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:954:2751":{"id":"0:954:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1558,4],"end":[1561,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:3339:3356":{"id":"b:1:2510-0:3339:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3339:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1461:3874":{"id":"0:1461:3874","crate_id":0,"name":"get_key_value","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[686,4],"end":[696,5]},"visibility":"public","docs":"Returns the key-value pair corresponding to the supplied key.\n\nThe supplied key may be any borrowed form of the map's key type, but the ordering\non the borrowed form *must* match the ordering on the key type.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nassert_eq!(map.get_key_value(&1), Some((&1, &\"a\")));\nassert_eq!(map.get_key_value(&2), None);\n```","links":{},"attrs":["#[stable(feature = \"map_get_key_value\", since = \"1.40.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["k",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:876":{"id":"0:876","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1344,0],"end":[1349,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:859:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:879:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1467:3906":{"id":"0:1467:3906","crate_id":0,"name":"last_key_value","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[800,4],"end":[806,5]},"visibility":"public","docs":"Returns the last key-value pair in the map.\nThe key in this pair is the maximum key in the map.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"b\");\nmap.insert(2, \"a\");\nassert_eq!(map.last_key_value(), Some((&2, &\"a\")));\n```","links":{},"attrs":["#[stable(feature = \"map_first_last\", since = \"1.66.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"K"}}},{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"V"}}}]}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:228:2864":{"id":"0:228:2864","crate_id":0,"name":"new_unsize","span":{"filename":"library/alloc/src/boxed/thin.rs","begin":[84,4],"end":[91,5]},"visibility":"public","docs":"Moves a type to the heap with its `Metadata` stored in the heap allocation instead of on\nthe stack.\n\n# Examples\n\n```\n#![feature(thin_box)]\nuse std::boxed::ThinBox;\n\nlet thin_slice = ThinBox::<[i32]>::new_unsize([1, 2, 3, 4]);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Unsize","id":"1:2652:2330","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Dyn"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1872":{"id":"0:1872","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[2169,0],"end":[2173,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"BTreeMap","id":"0:1301:94","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1876:595"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2708:2329-0:1404:3833":{"id":"a:1:2708:2329-0:1404:3833","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoKeys","id":"0:1404:3833","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:674:2903":{"id":"0:674:2903","crate_id":0,"name":"to_owned","span":{"filename":"library/alloc/src/borrow.rs","begin":[87,4],"end":[89,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"T"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:982":{"id":"0:982","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1648,0],"end":[1655,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BinaryHeap","id":"0:768:96","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}},"items":["0:985:2750","0:986:3475","0:987:757"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:364":{"id":"0:364","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1347,0],"end":[1368,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2305:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["le","ge","lt","gt"],"trait":{"name":"PartialOrd","id":"1:2305:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:367:995","0:368:815","0:369:781","0:370:682","0:371:699"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:7245:895":{"id":"0:7245:895","crate_id":0,"name":"ne","span":{"filename":"library/alloc/src/vec/partial_eq.rs","begin":[27,0],"end":[27,126]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"a:1:7709:3766-0:2944:4916":{"id":"a:1:7709:3766-0:2944:4916","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"UnwindSafe","id":"1:7709:3766","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:2944:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:482":{"id":"0:482","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1909,0],"end":[1913,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_const_unstable(feature = \"const_box\", issue = \"92521\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"DerefMut","id":"1:2899:2332","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:485:538"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1577:3475":{"id":"0:1577:3475","crate_id":0,"name":"IntoIter","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1613,4],"end":[1613,38]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1359:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"0:6124:10274":{"id":"0:6124:10274","crate_id":0,"name":"next_chunk","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[242,4],"end":[276,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"array","inner":{"type":{"kind":"generic","inner":"T"},"len":"N"}}},{"type":{"kind":"resolved_path","inner":{"name":"core::array::IntoIter","id":"1:3598:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"const":{"type":{"kind":"primitive","inner":"usize"},"expr":"N","value":null,"is_literal":false}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"N","kind":{"const":{"type":{"kind":"primitive","inner":"usize"},"default":null}}}],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1637":{"id":"0:1637","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1748,0],"end":[1752,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:1376:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1641:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4676:682":{"id":"0:4676:682","crate_id":0,"name":"ge","span":{"filename":"library/alloc/src/rc.rs","begin":[1836,4],"end":[1838,5]},"visibility":"default","docs":"'Greater than or equal to' comparison for two `Rc`s.\n\nThe two are compared by calling `>=` on their inner values.\n\n# Examples\n\n```\nuse std::rc::Rc;\n\nlet five = Rc::new(5);\n\nassert!(five >= Rc::new(5));\n```","links":{},"attrs":["#[inline(always)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3868":{"id":"0:3868","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[42,0],"end":[55,1]},"visibility":{"restricted":{"parent":"0:3850:757","path":"::collections::vec_deque::into_iter"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6822:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:3871:2750","0:3872:921","0:3873:2751"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2708:2329-0:1338:3356":{"id":"a:1:2708:2329-0:1338:3356","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Unpin","id":"1:2708:2329","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:1338:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:837:1928":{"id":"0:837:1928","crate_id":0,"name":"into_vec","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1128,4],"end":[1130,5]},"visibility":"public","docs":"Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BinaryHeap;\nlet heap = BinaryHeap::from([1, 2, 3, 4, 5, 6, 7]);\nlet vec = heap.into_vec();\n\n// Will print in some order\nfor x in vec {\n    println!(\"{x}\");\n}\n```","links":{},"attrs":["#[must_use = \"`self` will be dropped if the result is not used\"]","#[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1617":{"id":"0:1617","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1713,0],"end":[1717,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:1359:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:1621:782"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2499-0:1394:3826":{"id":"b:1:2499-0:1394:3826","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[733,0],"end":[733,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"ValuesMut","id":"0:1394:3826","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["1:2501:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1264:4223":{"id":"0:1264:4223","crate_id":0,"name":"and_modify","span":{"filename":"library/alloc/src/collections/btree/map/entry.rs","begin":[260,4],"end":[271,5]},"visibility":"public","docs":"Provides in-place mutable access to an occupied entry before any\npotential inserts into the map.\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map: BTreeMap<&str, usize> = BTreeMap::new();\n\nmap.entry(\"poneyland\")\n   .and_modify(|e| { *e += 1 })\n   .or_insert(42);\nassert_eq!(map[\"poneyland\"], 42);\n\nmap.entry(\"poneyland\")\n   .and_modify(|e| { *e += 1 })\n   .or_insert(42);\nassert_eq!(map[\"poneyland\"], 43);\n```","links":{},"attrs":["#[stable(feature = \"entry_and_modify\", since = \"1.26.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}],["f",{"kind":"generic","inner":"F"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[{"name":"F","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"F"},"bounds":[{"trait_bound":{"trait":{"name":"FnOnce","id":"1:2920:2768","args":{"parenthesized":{"inputs":[{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}],"output":null}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5378":{"id":"0:5378","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2622,0],"end":[2627,1]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AsRef","id":"1:2463:75","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:5379:307"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4270":{"id":"0:4270","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/mod.rs","begin":[114,0],"end":[119,1]},"visibility":{"restricted":{"parent":"0:744:1794","path":"::collections"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"try_reserve_kind\", reason =\n\"Uncertain how much info should be exposed\", issue = \"48043\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"TryReserveErrorKind","id":"0:6881:1972","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"TryReserveError","id":"0:6869:1971","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4271:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4222":{"id":"0:4222","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[2777,0],"end":[2791,1]},"visibility":{"restricted":{"parent":"0:3675:3010","path":"::collections::vec_deque"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["extend_reserve","extend_one"],"trait":{"name":"Extend","id":"1:7025:3507","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"VecDeque","id":"0:4016:238","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["0:4225:2885","0:4227:1746","0:4228:3508"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2216-0:3794:3805":{"id":"b:1:2216-0:3794:3805","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IterMut","id":"0:3794:3805","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:5586":{"id":"0:5586","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[757,0],"end":[793,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"mem::MaybeUninit","id":"1:29486:1963","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"items":["0:5588:329"],"negative":false,"synthetic":false,"blanket_impl":null}},"a:1:2644:214-0:1435:3845":{"id":"a:1:2644:214-0:1435:3845","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"V"},"bounds":[{"trait_bound":{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"RangeMut","id":"0:1435:3845","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"a:1:7710:3767-0:6816:3475":{"id":"a:1:7710:3767-0:6816:3475","crate_id":0,"name":null,"span":null,"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"RefUnwindSafe","id":"1:7710:3767","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6816:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":true,"blanket_impl":null}},"0:598:2751":{"id":"0:598:2751","crate_id":0,"name":"size_hint","span":{"filename":"library/alloc/src/boxed.rs","begin":[2136,4],"end":[2138,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"tuple","inner":[{"kind":"primitive","inner":"usize"},{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}}]},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2495-0:2970:4926":{"id":"b:1:2495-0:2970:4926","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"SymmetricDifference","id":"0:2970:4926","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4340:6419":{"id":"0:4340:6419","crate_id":0,"name":"as_c_str","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[580,4],"end":[582,5]},"visibility":"public","docs":"Extracts a [`CStr`] slice containing the entire string.\n\n# Examples\n\n```\nuse std::ffi::{CString, CStr};\n\nlet c_string = CString::new(b\"foo\".to_vec()).expect(\"CString::new failed\");\nlet cstr = c_string.as_c_str();\nassert_eq!(cstr,\n           CStr::from_bytes_with_nul(b\"foo\\0\").expect(\"CStr::from_bytes_with_nul failed\"));\n```","links":{"`CStr`":"1:46902:101"},"attrs":["#[inline]","#[must_use]","#[stable(feature = \"as_c_str\", since = \"1.20.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"CStr","id":"1:46902:101","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5026":{"id":"0:5026","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/str.rs","begin":[26,0],"end":[26,31]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::str::EncodeUtf16","name":"EncodeUtf16","id":"1:50257:7924","glob":false}},"0:3089":{"id":"0:3089","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1276,0],"end":[1283,1]},"visibility":{"restricted":{"parent":"0:2871:3015","path":"::collections::btree::set"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"IntoIterator","id":"1:7016:147","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}},"items":["0:3093:2750","0:3094:3475","0:3095:757"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4775:409":{"id":"0:4775:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/rc.rs","begin":[2555,4],"end":[2560,5]},"visibility":"default","docs":"Makes a clone of the `Weak` pointer that points to the same allocation.\n\n# Examples\n\n```\nuse std::rc::{Rc, Weak};\n\nlet weak_five = Rc::downgrade(&Rc::new(5));\n\nlet _ = Weak::clone(&weak_five);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Weak","id":"0:4737:7157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4116:3448":{"id":"0:4116:3448","crate_id":0,"name":"drain","span":{"filename":"library/alloc/src/collections/vec_deque/mod.rs","begin":[1369,4],"end":[1407,5]},"visibility":"public","docs":"Removes the specified range from the deque in bulk, returning all\nremoved elements as an iterator. If the iterator is dropped before\nbeing fully consumed, it drops the remaining removed elements.\n\nThe returned iterator keeps a mutable borrow on the queue to optimize\nits implementation.\n\n\n# Panics\n\nPanics if the starting point is greater than the end point or if\nthe end point is greater than the length of the deque.\n\n# Leaking\n\nIf the returned iterator goes out of scope without being dropped (due to\n[`mem::forget`], for example), the deque may have lost and leaked\nelements arbitrarily, including elements outside the range.\n\n# Examples\n\n```\nuse std::collections::VecDeque;\n\nlet mut deque: VecDeque<_> = [1, 2, 3].into();\nlet drained = deque.drain(2..).collect::<VecDeque<_>>();\nassert_eq!(drained, [3]);\nassert_eq!(deque, [1, 2]);\n\n// A full range clears all contents, like `clear()` does\ndeque.drain(..);\nassert!(deque.is_empty());\n```","links":{"`mem::forget`":"1:1592:658"},"attrs":["#[inline]","#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["range",{"kind":"generic","inner":"R"}]],"output":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:3723:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"R","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"R"},"bounds":[{"trait_bound":{"trait":{"name":"RangeBounds","id":"1:3066:3663","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3488:5371":{"id":"0:3488:5371","crate_id":0,"name":"move_prev","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1227,4],"end":[1240,5]},"visibility":"public","docs":"Moves the cursor to the previous element of the `LinkedList`.\n\nIf the cursor is pointing to the \"ghost\" non-element then this will move it to\nthe last element of the `LinkedList`. If it is pointing to the first\nelement of the `LinkedList` then this will move it to the \"ghost\" non-element.","links":{},"attrs":["#[unstable(feature = \"linked_list_cursors\", issue = \"58533\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2510-0:771:3221":{"id":"b:1:2510-0:771:3221","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"PeekMut","id":"0:771:3221","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:324":{"id":"0:324","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[912,0],"end":[960,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:326:2513"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5730:650":{"id":"0:5730:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/sync.rs","begin":[2459,4],"end":[2461,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:0:671-0:676:109":{"id":"b:0:671-0:676:109","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"B"}}],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:6622:757":{"id":"0:6622:757","crate_id":0,"name":"into_iter","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2812,4],"end":[2814,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"qualified_path","inner":{"name":"IntoIter","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:7016:147","args":null}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5237:409":{"id":"0:5237:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/string.rs","begin":[1991,4],"end":[1993,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:741":{"id":"0:741","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[481,0],"end":[494,1]},"visibility":{"restricted":{"parent":"0:648:1793","path":"::borrow"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"cow_add\", since = \"1.14.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"AddAssign","id":"1:2766:2888","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"items":["0:743:268"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4431":{"id":"0:4431","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[559,0],"end":[559,25]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::Error","name":"Error","id":"1:49039:126","glob":false}},"0:7052":{"id":"0:7052","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2259,0],"end":[2259,33]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(unused_lifetimes)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:7055:595","0:7056:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:581:2788":{"id":"0:581:2788","crate_id":0,"name":"resume","span":{"filename":"library/alloc/src/boxed.rs","begin":[2098,4],"end":[2100,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"resolved_path","inner":{"name":"Pin","id":"1:48133:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}}],"bindings":[]}}}}],["arg",{"kind":"generic","inner":"R"}]],"output":{"kind":"resolved_path","inner":{"name":"GeneratorState","id":"1:46243:2335","args":{"angle_bracketed":{"args":[{"type":{"kind":"qualified_path","inner":{"name":"Yield","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:2951:2334","args":null}}}},{"type":{"kind":"qualified_path","inner":{"name":"Return","args":{"angle_bracketed":{"args":[],"bindings":[]}},"self_type":{"kind":"generic","inner":"Self"},"trait":{"name":"","id":"1:2951:2334","args":null}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3023:4966":{"id":"0:3023:4966","crate_id":0,"name":"difference","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[430,4],"end":[468,5]},"visibility":"public","docs":"Visits the elements representing the difference,\ni.e., the elements that are in `self` but not in `other`,\nin ascending order.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut a = BTreeSet::new();\na.insert(1);\na.insert(2);\n\nlet mut b = BTreeSet::new();\nb.insert(2);\nb.insert(3);\n\nlet diff: Vec<_> = a.difference(&b).cloned().collect();\nassert_eq!(diff, [1]);\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"resolved_path","inner":{"name":"BTreeSet","id":"0:2908:95","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Difference","id":"0:2944:4916","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"1:11615:10704":{"id":"1:11615:10704","crate_id":1,"name":"IntoFuture","span":{"filename":"/rust-lang-rust/library/core/src/future/into_future.rs","begin":[134,4],"end":[134,19]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"F"}}},"0:3912":{"id":"0:3912","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[32,0],"end":[36,1]},"visibility":{"restricted":{"parent":"0:3889:768","path":"::collections::vec_deque::iter"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["clone_from"],"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3914:409"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:1473:3929":{"id":"0:1473:3929","crate_id":0,"name":"get_mut","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[916,4],"end":[926,5]},"visibility":"public","docs":"Returns a mutable reference to the value corresponding to the key.\n\nThe key may be any borrowed form of the map's key type, but the ordering\non the borrowed form *must* match the ordering on the key type.\n\n# Examples\n\nBasic usage:\n\n```\nuse std::collections::BTreeMap;\n\nlet mut map = BTreeMap::new();\nmap.insert(1, \"a\");\nif let Some(x) = map.get_mut(&1) {\n    *x = \"b\";\n}\nassert_eq!(map[&1], \"b\");\n```","links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["key",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Q"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"V"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"Q","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"K"},"bounds":[{"trait_bound":{"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"Q"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}},{"bound_predicate":{"type":{"kind":"generic","inner":"Q"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:913:2750":{"id":"0:913:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1448,4],"end":[1448,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"0:618":{"id":"0:618","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[2260,0],"end":[2300,1]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"String","id":"0:6980:218","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"dyn_trait","inner":{"traits":[{"trait":{"name":"Error","id":"1:2560:126","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Send","id":"1:2644:214","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]},{"trait":{"name":"Sync","id":"1:2658:222","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[]}],"lifetime":null}}}],"bindings":[]}}}},"items":["0:619:668"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6132:6115":{"id":"0:6132:6115","crate_id":0,"name":"advance_back_by","span":{"filename":"library/alloc/src/vec/into_iter.rs","begin":[316,4],"end":[334,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["n",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"resolved_path","inner":{"name":"Result","id":"1:48141:204","args":{"angle_bracketed":{"args":[{"type":{"kind":"tuple","inner":[]}},{"type":{"kind":"primitive","inner":"usize"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5728":{"id":"0:5728","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/sync.rs","begin":[2458,0],"end":[2462,1]},"visibility":{"restricted":{"parent":"0:5455:1364","path":"::sync"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}},{"trait_bound":{"trait":{"name":"fmt::Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:5730:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3810:921":{"id":"0:3810:921","crate_id":0,"name":"next","span":{"filename":"library/alloc/src/collections/vec_deque/iter_mut.rs","begin":[35,4],"end":[48,5]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":true,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3918:2750":{"id":"0:3918:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/vec_deque/iter.rs","begin":[40,4],"end":[40,22]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}},"1:11434:7849":{"id":"1:11434:7849","crate_id":1,"name":"make_ascii_lowercase","span":{"filename":"/rust-lang-rust/library/core/src/str/mod.rs","begin":[2444,4],"end":[2444,42]},"visibility":"public","docs":"Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```","links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}]],"output":null,"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:287:1003":{"id":"0:287:1003","crate_id":0,"name":"pin","span":{"filename":"library/alloc/src/boxed.rs","begin":[285,4],"end":[289,5]},"visibility":"public","docs":"Constructs a new `Pin<Box<T>>`. If `T` does not implement [`Unpin`], then\n`x` will be pinned in memory and unable to be moved.\n\nConstructing and pinning of the `Box` can also be done in two steps: `Box::pin(x)`\ndoes the same as <code>[Box::into_pin]\\([Box::new]\\(x))</code>. Consider using\n[`into_pin`](Box::into_pin) if you already have a `Box<T>`, or if you want to\nconstruct a (pinned) `Box` in a different way than with [`Box::new`].","links":{"Box::new":"0:284:908","`Unpin`":"1:2708:2329","`Box::new`":"0:284:908","Box::into_pin":"0:337:2414"},"attrs":["#[cfg(not(no_global_oom_handling))]","#[stable(feature = \"pin\", since = \"1.33.0\")]","#[must_use]","#[inline(always)]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["x",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Pin","id":"1:48133:187","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7030:595":{"id":"0:7030:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/string.rs","begin":[2255,0],"end":[2255,30]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:6955":{"id":"0:6955","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[159,31],"end":[159,36]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[automatically_derived]","#[stable(feature = \"alloc_c_string\", since = \"1.64.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Debug","id":"1:8568:110","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"FromVecWithNulError","id":"0:6944:6202","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:6956:650"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:5641:409":{"id":"0:5641:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/sync.rs","begin":[1353,4],"end":[1382,5]},"visibility":"default","docs":"Makes a clone of the `Arc` pointer.\n\nThis creates another pointer to the same allocation, increasing the\nstrong reference count.\n\n# Examples\n\n```\nuse std::sync::Arc;\n\nlet five = Arc::new(5);\n\nlet _ = Arc::clone(&five);\n```","links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Arc","id":"0:5513:69","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"b:1:2502-0:4521:198":{"id":"b:1:2502-0:4521:198","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[751,0],"end":[751,27]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"primitive","inner":"never"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2504:668"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:930":{"id":"0:930","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1507,0],"end":[1511,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"drain\", since = \"1.6.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Drain","id":"0:6749:3449","args":{"angle_bracketed":{"args":[{"lifetime":"'_"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:932:2762"],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2510-0:2978:4931":{"id":"b:1:2510-0:2978:4931","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[775,0],"end":[775,33]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"TryFrom","id":"1:2479:230","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Intersection","id":"0:2978:4931","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":["1:2513:126","1:2514:1418"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4446":{"id":"0:4446","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[567,51],"end":[567,62]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::DebugStruct","name":"DebugStruct","id":"1:8314:6926","glob":false}},"0:3281:4091":{"id":"0:3281:4091","crate_id":0,"name":"min","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[1784,4],"end":[1786,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"generic","inner":"T"}}}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:2935:409":{"id":"0:2935:409","crate_id":0,"name":"clone","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[121,4],"end":[123,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:7032":{"id":"0:7032","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/string.rs","begin":[2255,0],"end":[2255,30]},"visibility":{"restricted":{"parent":"0:5121:1796","path":"::string"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[allow(unused_lifetimes)]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"'b","kind":{"lifetime":{"outlives":[]}}}],"where_predicates":[]},"provided_trait_methods":["ne"],"trait":{"name":"PartialEq","id":"1:2263:182","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"primitive","inner":"str"},"items":["0:7035:595","0:7036:895"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4346":{"id":"0:4346","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[699,0],"end":[706,1]},"visibility":{"restricted":{"parent":"0:4286:375","path":"::ffi::c_str"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"cstring_drop\", since = \"1.13.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"Drop","id":"1:2910:1965","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:4347:571"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3049:3530":{"id":"0:3049:3530","crate_id":0,"name":"replace","span":{"filename":"library/alloc/src/collections/btree/set.rs","begin":[929,4],"end":[934,5]},"visibility":"public","docs":"Adds a value to the set, replacing the existing element, if any, that is\nequal to the value. Returns the replaced element.\n\n# Examples\n\n```\nuse std::collections::BTreeSet;\n\nlet mut set = BTreeSet::new();\nset.insert(Vec::<i32>::new());\n\nassert_eq!(set.get(&[][..]).unwrap().capacity(), 0);\nset.replace(Vec::with_capacity(10));\nassert_eq!(set.get(&[][..]).unwrap().capacity(), 10);\n```","links":{},"attrs":["#[stable(feature = \"set_recovery\", since = \"1.9.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["value",{"kind":"generic","inner":"T"}]],"output":{"kind":"resolved_path","inner":{"name":"Option","id":"1:47997:175","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:3624":{"id":"0:3624","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1903,0],"end":[1907,1]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"PartialOrd","id":"1:2305:183","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["le","ge","lt","gt"],"trait":{"name":"PartialOrd","id":"1:2305:183","args":{"angle_bracketed":{"args":[{"type":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:3626:995"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:744:1794":{"id":"0:744:1794","crate_id":0,"name":"collections","span":{"filename":"library/alloc/src/collections/mod.rs","begin":[1,0],"end":[157,46]},"visibility":"public","docs":"Collection types.","links":{},"attrs":["#![stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"module","inner":{"is_crate":false,"items":["0:745:3007","0:3314:3009","0:3675:3010","0:4255:3011","0:4257:3013","0:4259","0:4260","0:4261","0:4262","0:4263","0:6869:1971","0:6881:1972"],"is_stripped":false}},"0:3622":{"id":"0:3622","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[1900,0],"end":[1900,35]},"visibility":{"restricted":{"parent":"0:3314:3009","path":"::collections::linked_list"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["assert_receiver_is_total_eq"],"trait":{"name":"Eq","id":"1:2268:123","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"LinkedList","id":"0:3328:157","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"b:1:2495-0:3900:3356":{"id":"b:1:2495-0:3900:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/convert/mod.rs","begin":[717,0],"end":[717,30]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"U","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"U"},"bounds":[{"trait_bound":{"trait":{"name":"From","id":"1:2472:131","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Into","id":"1:2469:145","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"U"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2498:2075"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:916":{"id":"0:916","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1463,0],"end":[1463,55]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[unstable(feature = \"binary_heap_into_iter_sorted\", issue = \"59278\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Ord","id":"1:2299:176","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["len","is_empty"],"trait":{"name":"ExactSizeIterator","id":"1:7076:2761","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIterSorted","id":"0:6740:3364","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}},"0:4958:7823":{"id":"0:4958:7823","crate_id":0,"name":"join","span":{"filename":"library/alloc/src/slice.rs","begin":[743,4],"end":[759,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["slice",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["sep",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"slice","inner":{"kind":"generic","inner":"T"}}}}]],"output":{"kind":"resolved_path","inner":{"name":"Vec","id":"0:6407:237","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4931":{"id":"0:4931","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[600,0],"end":[642,1]},"visibility":{"restricted":{"parent":"0:4810:1314","path":"::slice"}},"docs":null,"links":{},"attrs":["#[cfg(not(test))]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[],"where_predicates":[]},"provided_trait_methods":[],"trait":null,"for":{"kind":"slice","inner":{"kind":"primitive","inner":"u8"}},"items":["0:4932:7841","0:4933:7848"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:6498:4039":{"id":"0:6498:4039","crate_id":0,"name":"split_off","span":{"filename":"library/alloc/src/vec/mod.rs","begin":[2098,4],"end":[2131,5]},"visibility":"public","docs":"Splits the collection into two at the given index.\n\nReturns a newly allocated vector containing the elements in the range\n`[at, len)`. After the call, the original vector will be left containing\nthe elements `[0, at)` with its previous capacity unchanged.\n\n# Panics\n\nPanics if `at > len`.\n\n# Examples\n\n```\nlet mut vec = vec![1, 2, 3];\nlet vec2 = vec.split_off(1);\nassert_eq!(vec, [1]);\nassert_eq!(vec2, [2, 3]);\n```","links":{},"attrs":["#[cfg(not(no_global_oom_handling))]","#[inline]","#[must_use = \"use `.truncate()` if you don't need the other half\"]","#[stable(feature = \"split_off\", since = \"1.4.0\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"generic","inner":"Self"}}}],["at",{"kind":"primitive","inner":"usize"}]],"output":{"kind":"generic","inner":"Self"},"c_variadic":false},"generics":{"params":[],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"A"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4437":{"id":"0:4437","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/fmt.rs","begin":[563,20],"end":[563,26]},"visibility":"public","docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::fmt::Binary","name":"Binary","id":"1:8577:6921","glob":false}},"0:6964:595":{"id":"0:6964:595","crate_id":0,"name":"eq","span":{"filename":"library/alloc/src/ffi/c_str.rs","begin":[225,16],"end":[225,25]},"visibility":"default","docs":null,"links":{},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["other",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"resolved_path","inner":{"name":"IntoStringError","id":"0:6957:6203","args":{"angle_bracketed":{"args":[],"bindings":[]}}}}}}]],"output":{"kind":"primitive","inner":"bool"},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:5399:668":{"id":"0:5399:668","crate_id":0,"name":"from","span":{"filename":"library/alloc/src/string.rs","begin":[2765,4],"end":[2767,5]},"visibility":"default","docs":"Converts a string slice into a [`Borrowed`] variant.\nNo heap allocation is performed, and the string\nis not copied.\n\n# Example\n\n```\n# use std::borrow::Cow;\nassert_eq!(Cow::from(\"eggplant\"), Cow::Borrowed(\"eggplant\"));\n```\n\n[`Borrowed`]: crate::borrow::Cow::Borrowed \"borrow::Cow::Borrowed\"","links":{"crate::borrow::Cow::Borrowed":"0:679:2676"},"attrs":["#[inline]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["s",{"kind":"borrowed_ref","inner":{"lifetime":"'a","mutable":false,"type":{"kind":"primitive","inner":"str"}}}]],"output":{"kind":"resolved_path","inner":{"name":"Cow","id":"0:676:109","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"primitive","inner":"str"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:1301:94":{"id":"0:1301:94","crate_id":0,"name":"BTreeMap","span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[172,0],"end":[183,1]},"visibility":"public","docs":"An ordered map based on a [B-Tree].\n\nB-Trees represent a fundamental compromise between cache-efficiency and actually minimizing\nthe amount of work performed in a search. In theory, a binary search tree (BST) is the optimal\nchoice for a sorted map, as a perfectly balanced BST performs the theoretical minimum amount of\ncomparisons necessary to find an element (log<sub>2</sub>n). However, in practice the way this\nis done is *very* inefficient for modern computer architectures. In particular, every element\nis stored in its own individually heap-allocated node. This means that every single insertion\ntriggers a heap-allocation, and every single comparison should be a cache-miss. Since these\nare both notably expensive things to do in practice, we are forced to, at the very least,\nreconsider the BST strategy.\n\nA B-Tree instead makes each node contain B-1 to 2B-1 elements in a contiguous array. By doing\nthis, we reduce the number of allocations by a factor of B, and improve cache efficiency in\nsearches. However, this does mean that searches will have to do *more* comparisons on average.\nThe precise number of comparisons depends on the node search strategy used. For optimal cache\nefficiency, one could search the nodes linearly. For optimal comparisons, one could search\nthe node using binary search. As a compromise, one could also perform a linear search\nthat initially only checks every i<sup>th</sup> element for some choice of i.\n\nCurrently, our implementation simply performs naive linear search. This provides excellent\nperformance on *small* nodes of elements which are cheap to compare. However in the future we\nwould like to further explore choosing the optimal search strategy based on the choice of B,\nand possibly other factors. Using linear search, searching for a random element is expected\nto take B * log(n) comparisons, which is generally worse than a BST. In practice,\nhowever, performance is excellent.\n\nIt is a logic error for a key to be modified in such a way that the key's ordering relative to\nany other key, as determined by the [`Ord`] trait, changes while it is in the map. This is\nnormally only possible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\nThe behavior resulting from such a logic error is not specified, but will be encapsulated to the\n`BTreeMap` that observed the logic error and not result in undefined behavior. This could\ninclude panics, incorrect results, aborts, memory leaks, and non-termination.\n\nIterators obtained from functions such as [`BTreeMap::iter`], [`BTreeMap::values`], or\n[`BTreeMap::keys`] produce their items in order by key, and take worst-case logarithmic and\namortized constant time per item returned.\n\n[B-Tree]: https://en.wikipedia.org/wiki/B-tree\n[`Cell`]: core::cell::Cell\n[`RefCell`]: core::cell::RefCell\n\n# Examples\n\n```\nuse std::collections::BTreeMap;\n\n// type inference lets us omit an explicit type signature (which\n// would be `BTreeMap<&str, &str>` in this example).\nlet mut movie_reviews = BTreeMap::new();\n\n// review some movies.\nmovie_reviews.insert(\"Office Space\",       \"Deals with real issues in the workplace.\");\nmovie_reviews.insert(\"Pulp Fiction\",       \"Masterpiece.\");\nmovie_reviews.insert(\"The Godfather\",      \"Very enjoyable.\");\nmovie_reviews.insert(\"The Blues Brothers\", \"Eye lyked it a lot.\");\n\n// check for a specific one.\nif !movie_reviews.contains_key(\"Les Misérables\") {\n    println!(\"We've got {} reviews, but Les Misérables ain't one.\",\n             movie_reviews.len());\n}\n\n// oops, this review has a lot of spelling mistakes, let's delete it.\nmovie_reviews.remove(\"The Blues Brothers\");\n\n// look up the values associated with some keys.\nlet to_find = [\"Up!\", \"Office Space\"];\nfor movie in &to_find {\n    match movie_reviews.get(movie) {\n       Some(review) => println!(\"{movie}: {review}\"),\n       None => println!(\"{movie} is unreviewed.\")\n    }\n}\n\n// Look up the value for a key (will panic if the key is not found).\nprintln!(\"Movie review: {}\", movie_reviews[\"Office Space\"]);\n\n// iterate over everything.\nfor (movie, review) in &movie_reviews {\n    println!(\"{movie}: \\\"{review}\\\"\");\n}\n```\n\nA `BTreeMap` with a known list of items can be initialized from an array:\n\n```\nuse std::collections::BTreeMap;\n\nlet solar_distance = BTreeMap::from([\n    (\"Mercury\", 0.4),\n    (\"Venus\", 0.7),\n    (\"Earth\", 1.0),\n    (\"Mars\", 1.5),\n]);\n```\n\n`BTreeMap` implements an [`Entry API`], which allows for complex\nmethods of getting, setting, updating and removing keys and their values:\n\n[`Entry API`]: BTreeMap::entry\n\n```\nuse std::collections::BTreeMap;\n\n// type inference lets us omit an explicit type signature (which\n// would be `BTreeMap<&str, u8>` in this example).\nlet mut player_stats = BTreeMap::new();\n\nfn random_stat_buff() -> u8 {\n    // could actually return some random value here - let's just return\n    // some fixed value for now\n    42\n}\n\n// insert a key only if it doesn't already exist\nplayer_stats.entry(\"health\").or_insert(100);\n\n// insert a key using a function that provides a new value only if it\n// doesn't already exist\nplayer_stats.entry(\"defence\").or_insert_with(random_stat_buff);\n\n// update a key, guarding against the key possibly not being set\nlet stat = player_stats.entry(\"attack\").or_insert(100);\n*stat += random_stat_buff();\n\n// modify an entry before an insert with in-place mutation\nplayer_stats.entry(\"mana\").and_modify(|mana| *mana += 200).or_insert(100);\n```","links":{"`Ord`":"1:2299:176","core::cell::Cell":"1:4108:7101","core::cell::RefCell":"1:4173:201","`BTreeMap::iter`":"0:1916:768","`BTreeMap::keys`":"0:1918:4154","BTreeMap::entry":"0:1493:3668","`BTreeMap::values`":"0:1919:1502"},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]","#[rustc_diagnostic_item = \"BTreeMap\"]","#[rustc_insignificant_dtor]"],"deprecation":null,"kind":"struct","inner":{"kind":{"plain":{"fields":[],"fields_stripped":true}},"generics":{"params":[{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":{"kind":"resolved_path","inner":{"name":"Global","id":"0:6725:1970","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"synthetic":false}}}],"where_predicates":[]},"impls":["0:1445","0:1449","0:1455","0:1912","a:1:2658:222-0:1301:94","a:1:2644:214-0:1301:94","a:1:2708:2329-0:1301:94","a:1:7710:3767-0:1301:94","b:0:671-0:1301:94","b:1:2510-0:1301:94","b:1:2505-0:1301:94","b:1:2216-0:1301:94","b:1:3303-0:1301:94","b:1:2219-0:1301:94","b:1:2499-0:1301:94","b:1:2495-0:1301:94","0:1309","0:1314","0:1318","0:1503","0:1537","0:1572","0:1839","0:1845","0:1853","0:1862","0:1868","0:1872","0:1878","0:1882","0:1887","0:1892","0:1897","0:1904"]}},"0:893":{"id":"0:893","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/binary_heap.rs","begin":[1397,0],"end":[1402,1]},"visibility":{"restricted":{"parent":"0:745:3007","path":"::collections::binary_heap"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["nth_back","try_rfold","rfind","rfold","advance_back_by"],"trait":{"name":"DoubleEndedIterator","id":"1:7053:119","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"IntoIter","id":"0:6734:3475","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["0:895:2759"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3871:2750":{"id":"0:3871:2750","crate_id":0,"name":"Item","span":{"filename":"library/alloc/src/collections/vec_deque/into_iter.rs","begin":[43,4],"end":[43,18]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"assoc_type","inner":{"generics":{"params":[],"where_predicates":[]},"bounds":[],"default":{"kind":"generic","inner":"T"}}},"b:1:2216-0:3900:3356":{"id":"b:1:2216-0:3900:3356","crate_id":0,"name":null,"span":{"filename":"/rust-lang-rust/library/core/src/borrow.rs","begin":[211,0],"end":[211,37]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"generic_params":[]}}]},"provided_trait_methods":[],"trait":{"name":"Borrow","id":"1:2210:97","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Iter","id":"0:3900:3356","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"items":["1:2218:1793"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:4829":{"id":"0:4829","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/slice.rs","begin":[38,0],"end":[38,34]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"array_windows\", issue = \"75027\")]"],"deprecation":null,"kind":"import","inner":{"source":"core::slice::ArrayWindows","name":"ArrayWindows","id":"1:49794:7671","glob":false}},"b:0:671-0:6897:102":{"id":"b:0:671-0:6897:102","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/borrow.rs","begin":[82,0],"end":[94,1]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[{"bound_predicate":{"type":{"kind":"generic","inner":"T"},"bounds":[{"trait_bound":{"trait":{"name":"Clone","id":"1:2233:105","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"generic_params":[]}}]},"provided_trait_methods":["clone_into"],"trait":{"name":"ToOwned","id":"0:667:225","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"CString","id":"0:6897:102","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"items":["0:673:2677","0:674:2903","0:675:2911"],"negative":false,"synthetic":false,"blanket_impl":{"kind":"generic","inner":"T"}}},"0:1626":{"id":"0:1626","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/collections/btree/map.rs","begin":[1723,0],"end":[1745,1]},"visibility":{"restricted":{"parent":"0:1131:830","path":"::collections::btree::map"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"rust1\", since = \"1.0.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"'a","kind":{"lifetime":{"outlives":[]}}},{"name":"K","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}},{"name":"V","kind":{"type":{"bounds":[],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":["sum","position","copied","count","cmp_by","find_map","advance_by","partition_in_place","flatten","intersperse_with","le","fold","max_by_key","map","min","for_each","partial_cmp_by","skip_while","try_find","cmp","is_partitioned","partial_cmp","fuse","filter_map","size_hint","eq_by","rposition","zip","skip","try_for_each","collect","inspect","by_ref","take_while","nth","any","rev","next_chunk","try_fold","reduce","unzip","try_collect","all","map_while","eq","is_sorted","last","min_by","cloned","array_chunks","gt","lt","is_sorted_by","cycle","try_reduce","collect_into","scan","step_by","peekable","enumerate","max","chain","min_by_key","ne","ge","is_sorted_by_key","product","__iterator_get_unchecked","find","partition","flat_map","filter","intersperse","take","max_by"],"trait":{"name":"Iterator","id":"1:7130:154","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Keys","id":"0:1376:3816","args":{"angle_bracketed":{"args":[{"lifetime":"'a"},{"type":{"kind":"generic","inner":"K"}},{"type":{"kind":"generic","inner":"V"}}],"bindings":[]}}}},"items":["0:1630:2750","0:1631:921","0:1633:2751","0:1634:2753","0:1635:4091","0:1636:2120"],"negative":false,"synthetic":false,"blanket_impl":null}},"0:3364:650":{"id":"0:3364:650","crate_id":0,"name":"fmt","span":{"filename":"library/alloc/src/collections/linked_list.rs","begin":[142,4],"end":[144,5]},"visibility":"default","docs":null,"links":{},"attrs":[],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":false,"type":{"kind":"generic","inner":"Self"}}}],["f",{"kind":"borrowed_ref","inner":{"lifetime":null,"mutable":true,"type":{"kind":"resolved_path","inner":{"name":"fmt::Formatter","id":"1:8528:130","args":{"angle_bracketed":{"args":[{"lifetime":"'_"}],"bindings":[]}}}}}}]],"output":{"kind":"resolved_path","inner":{"name":"fmt::Result","id":"1:8517:204","args":{"angle_bracketed":{"args":[],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[],"where_predicates":[]},"header":{"const":false,"unsafe":false,"async":false,"abi":"Rust"},"has_body":true}},"0:4598:2733":{"id":"0:4598:2733","crate_id":0,"name":"downcast_unchecked","span":{"filename":"library/alloc/src/rc.rs","begin":[1358,4],"end":[1364,5]},"visibility":"public","docs":"Downcasts the `Rc<dyn Any>` to a concrete type.\n\nFor a safe alternative see [`downcast`].\n\n# Examples\n\n```\n#![feature(downcast_unchecked)]\n\nuse std::any::Any;\nuse std::rc::Rc;\n\nlet x: Rc<dyn Any> = Rc::new(1_usize);\n\nunsafe {\n    assert_eq!(*x.downcast_unchecked::<usize>(), 1);\n}\n```\n\n# Safety\n\nThe contained value must be of type `T`. Calling this method\nwith the incorrect type is *undefined behavior*.\n\n\n[`downcast`]: Self::downcast","links":{"Self::downcast":"0:4596:2731"},"attrs":["#[inline]","#[unstable(feature = \"downcast_unchecked\", issue = \"90850\")]"],"deprecation":null,"kind":"function","inner":{"decl":{"inputs":[["self",{"kind":"generic","inner":"Self"}]],"output":{"kind":"resolved_path","inner":{"name":"Rc","id":"0:4521:198","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"T"}}],"bindings":[]}}}},"c_variadic":false},"generics":{"params":[{"name":"T","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Any","id":"1:3301:68","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"header":{"const":false,"unsafe":true,"async":false,"abi":"Rust"},"has_body":true}},"0:5867":{"id":"0:5867","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/vec/mod.rs","begin":[79,0],"end":[79,40]},"visibility":"public","docs":null,"links":{},"attrs":["#[unstable(feature = \"drain_filter\", reason = \"recently added\", issue =\n\"43244\")]"],"deprecation":null,"kind":"import","inner":{"source":"self::drain_filter::DrainFilter","name":"DrainFilter","id":"0:7057:4069","glob":false}},"0:521":{"id":"0:521","crate_id":0,"name":null,"span":{"filename":"library/alloc/src/boxed.rs","begin":[1981,0],"end":[1981,76]},"visibility":{"restricted":{"parent":"0:141:1791","path":"::boxed"}},"docs":null,"links":{},"attrs":["#[stable(feature = \"fused\", since = \"1.26.0\")]"],"deprecation":null,"kind":"impl","inner":{"is_unsafe":false,"generics":{"params":[{"name":"I","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}},{"trait_bound":{"trait":{"name":"Sized","id":"1:2651:2197","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"maybe"}}],"default":null,"synthetic":false}}},{"name":"A","kind":{"type":{"bounds":[{"trait_bound":{"trait":{"name":"Allocator","id":"1:11946:1969","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"generic_params":[],"modifier":"none"}}],"default":null,"synthetic":false}}}],"where_predicates":[]},"provided_trait_methods":[],"trait":{"name":"FusedIterator","id":"1:7400:2327","args":{"angle_bracketed":{"args":[],"bindings":[]}}},"for":{"kind":"resolved_path","inner":{"name":"Box","id":"0:276:1792","args":{"angle_bracketed":{"args":[{"type":{"kind":"generic","inner":"I"}},{"type":{"kind":"generic","inner":"A"}}],"bindings":[]}}}},"items":[],"negative":false,"synthetic":false,"blanket_impl":null}}},"paths":{"1:4512:8111":{"crate_id":1,"path":["core","char","REPLACEMENT_CHARACTER"],"kind":"constant"},"1:7053:119":{"crate_id":1,"path":["core","iter","traits","double_ended","DoubleEndedIterator"],"kind":"trait"},"1:9100:14165":{"crate_id":1,"path":["core","slice","index","private_slice_index","Sealed"],"kind":"trait"},"1:6741:10718":{"crate_id":1,"path":["core","iter","sources","empty","Empty"],"kind":"struct"},"1:53994:14682":{"crate_id":1,"path":["core","core_arch","x86","__m256i"],"kind":"struct"},"0:5455:1364":{"crate_id":0,"path":["alloc","sync"],"kind":"module"},"1:21880:165":{"crate_id":1,"path":["core","num","nonzero","NonZeroI32"],"kind":"struct"},"1:5606:38357":{"crate_id":1,"path":["core","iter","adapters","flatten","TrustedConstSize"],"kind":"trait"},"1:50345:10925":{"crate_id":1,"path":["core","str","pattern","SearchStep"],"kind":"enum"},"1:49524:7673":{"crate_id":1,"path":["core","slice","ascii","EscapeAscii"],"kind":"struct"},"1:2134:10551":{"crate_id":1,"path":["core","ptr","null"],"kind":"function"},"1:8577:6921":{"crate_id":1,"path":["core","fmt","Binary"],"kind":"trait"},"1:19999:40112":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Hi"],"kind":"struct"},"1:0:481":{"crate_id":1,"path":["core"],"kind":"module"},"0:4257:3013":{"crate_id":0,"path":["alloc","collections","btree_set"],"kind":"module"},"1:2560:126":{"crate_id":1,"path":["core","error","Error"],"kind":"trait"},"1:58450:10475":{"crate_id":1,"path":["core","u64"],"kind":"primitive"},"1:46765:10986":{"crate_id":1,"path":["core","char","convert","CharTryFromError"],"kind":"struct"},"1:8395:6924":{"crate_id":1,"path":["core","fmt","builders","DebugMap"],"kind":"struct"},"1:46243:2335":{"crate_id":1,"path":["core","ops","generator","GeneratorState"],"kind":"enum"},"1:1618:3147":{"crate_id":1,"path":["core","mem","swap"],"kind":"function"},"1:50857:7922":{"crate_id":1,"path":["core","unicode","unicode_data","conversions"],"kind":"module"},"1:21715:171":{"crate_id":1,"path":["core","num","nonzero","NonZeroU64"],"kind":"struct"},"1:58431:10459":{"crate_id":1,"path":["core","unit"],"kind":"primitive"},"1:53965:14679":{"crate_id":1,"path":["core","core_arch","x86","__m128i"],"kind":"struct"},"1:50943:155":{"crate_id":1,"path":["core","alloc","layout","Layout"],"kind":"struct"},"1:46737:10987":{"crate_id":1,"path":["core","char","convert","ParseCharError"],"kind":"struct"},"1:7709:3766":{"crate_id":1,"path":["core","panic","unwind_safe","UnwindSafe"],"kind":"trait"},"1:3938:14179":{"crate_id":1,"path":["core","asserting","TryCaptureWithoutDebug"],"kind":"struct"},"1:52091:14251":{"crate_id":1,"path":["core","core_arch","simd","u16x8"],"kind":"struct"},"1:8589:2221":{"crate_id":1,"path":["core","fmt","write"],"kind":"function"},"1:46387:195":{"crate_id":1,"path":["core","ops","range","RangeInclusive"],"kind":"struct"},"1:21847:164":{"crate_id":1,"path":["core","num","nonzero","NonZeroI16"],"kind":"struct"},"0:5513:69":{"crate_id":0,"path":["alloc","sync","Arc"],"kind":"struct"},"1:47238:10735":{"crate_id":1,"path":["core","iter","adapters","step_by","StepBy"],"kind":"struct"},"0:768:96":{"crate_id":0,"path":["alloc","collections","binary_heap","BinaryHeap"],"kind":"struct"},"0:109:512":{"crate_id":0,"path":["alloc","alloc","dealloc"],"kind":"function"},"1:52905:14232":{"crate_id":1,"path":["core","core_arch","simd","i16x16"],"kind":"struct"},"1:52121:14255":{"crate_id":1,"path":["core","core_arch","simd","u32x4"],"kind":"struct"},"1:21268:37485":{"crate_id":1,"path":["core","num","flt2dec","decoder","FullDecoded"],"kind":"enum"},"1:10151:7679":{"crate_id":1,"path":["core","slice","raw","from_ptr_range"],"kind":"function"},"1:11824:2336":{"crate_id":1,"path":["core","task","wake","Context"],"kind":"struct"},"1:21251:14528":{"crate_id":1,"path":["core","num","flt2dec","decoder","Decoded"],"kind":"struct"},"1:10551:10801":{"crate_id":1,"path":["core","slice","SlicePattern"],"kind":"trait"},"0:6869:1971":{"crate_id":0,"path":["alloc","collections","TryReserveError"],"kind":"struct"},"1:52191:14243":{"crate_id":1,"path":["core","core_arch","simd","i8x16"],"kind":"struct"},"1:14:2221":{"crate_id":1,"path":["core","write"],"kind":"macro"},"1:56532:14270":{"crate_id":1,"path":["core","core_simd","swizzle","Which"],"kind":"enum"},"1:2762:10526":{"crate_id":1,"path":["core","ops","arith","Neg"],"kind":"trait"},"1:6542:3145":{"crate_id":1,"path":["core","iter","adapters","SourceIter"],"kind":"trait"},"1:8133:79":{"crate_id":1,"path":["core","sync","atomic","AtomicBool"],"kind":"struct"},"2:223:204":{"crate_id":2,"path":["compiler_builtins","float","cmp","Result"],"kind":"enum"},"1:49846:7693":{"crate_id":1,"path":["core","slice","iter","RChunks"],"kind":"struct"},"1:51790:14262":{"crate_id":1,"path":["core","core_arch","simd","u8x8"],"kind":"struct"},"0:4460:659":{"crate_id":0,"path":["alloc","fmt","format"],"kind":"function"},"0:4016:238":{"crate_id":0,"path":["alloc","collections","vec_deque","VecDeque"],"kind":"struct"},"1:8583:188":{"crate_id":1,"path":["core","fmt","Pointer"],"kind":"trait"},"1:58454:10479":{"crate_id":1,"path":["core","reference"],"kind":"primitive"},"1:8301:13245":{"crate_id":1,"path":["core","fmt","builders","PadAdapterState"],"kind":"struct"},"1:48538:85":{"crate_id":1,"path":["core","sync","atomic","AtomicIsize"],"kind":"struct"},"1:6592:10716":{"crate_id":1,"path":["core","iter","range","Step"],"kind":"trait"},"1:52951:14236":{"crate_id":1,"path":["core","core_arch","simd","i32x8"],"kind":"struct"},"1:6874:5508":{"crate_id":1,"path":["core","iter","sources","repeat_n","repeat_n"],"kind":"function"},"1:8314:6926":{"crate_id":1,"path":["core","fmt","builders","DebugStruct"],"kind":"struct"},"1:50133:7943":{"crate_id":1,"path":["core","str","iter","RMatchIndices"],"kind":"struct"},"1:3962:103":{"crate_id":1,"path":["core","asserting","Capture"],"kind":"struct"},"1:46789:10989":{"crate_id":1,"path":["core","char","decode","DecodeUtf16Error"],"kind":"struct"},"1:21341:10856":{"crate_id":1,"path":["core","num","error","TryFromIntError"],"kind":"struct"},"1:51943:14234":{"crate_id":1,"path":["core","core_arch","simd","i32x2"],"kind":"struct"},"1:4654:10841":{"crate_id":1,"path":["core","ffi","c_void"],"kind":"enum"},"1:46549:12380":{"crate_id":1,"path":["core","array","TryFromSliceError"],"kind":"struct"},"1:7400:2327":{"crate_id":1,"path":["core","iter","traits","marker","FusedIterator"],"kind":"trait"},"1:49923:7934":{"crate_id":1,"path":["core","str","error","ParseBoolError"],"kind":"struct"},"1:9257:3356":{"crate_id":1,"path":["core","slice","iter","Iter"],"kind":"struct"},"1:47033:5510":{"crate_id":1,"path":["core","iter","adapters","by_ref_sized","ByRefSized"],"kind":"struct"},"1:58444:10469":{"crate_id":1,"path":["core","i32"],"kind":"primitive"},"1:51758:14229":{"crate_id":1,"path":["core","core_arch","simd","i16x2"],"kind":"struct"},"1:46504:10781":{"crate_id":1,"path":["core","any","tags","Ref"],"kind":"struct"},"0:5356:8746":{"crate_id":0,"path":["alloc","string","ParseError"],"kind":"typedef"},"1:11656:186":{"crate_id":1,"path":["core","future","pending","Pending"],"kind":"struct"},"1:2973:5511":{"crate_id":1,"path":["core","ops","index","IndexMut"],"kind":"trait"},"1:10581:6388":{"crate_id":1,"path":["core","str","converts","from_utf8"],"kind":"function"},"1:56902:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:9306:7687":{"crate_id":1,"path":["core","slice","iter","Split"],"kind":"struct"},"1:7016:147":{"crate_id":1,"path":["core","iter","traits","collect","IntoIterator"],"kind":"trait"},"1:4108:7101":{"crate_id":1,"path":["core","cell","Cell"],"kind":"struct"},"1:48184:3356":{"crate_id":1,"path":["core","result","Iter"],"kind":"struct"},"1:22378:10280":{"crate_id":1,"path":["core","num","saturating","Saturating"],"kind":"struct"},"1:46801:7938":{"crate_id":1,"path":["core","char","EscapeUnicode"],"kind":"struct"},"1:20237:14204":{"crate_id":1,"path":["core","core_simd","eq","SimdPartialEq"],"kind":"trait"},"1:47509:10725":{"crate_id":1,"path":["core","iter","sources","repeat_with","RepeatWith"],"kind":"struct"},"1:8907:1314":{"crate_id":1,"path":["core","slice"],"kind":"module"},"1:58442:10467":{"crate_id":1,"path":["core","i8"],"kind":"primitive"},"1:52457:14631":{"crate_id":1,"path":["core","core_arch","simd","m16x8"],"kind":"struct"},"1:49320:14759":{"crate_id":1,"path":["core","hash","sip","Sip13Rounds"],"kind":"struct"},"1:4701:768":{"crate_id":1,"path":["core","iter"],"kind":"module"},"1:21355:10855":{"crate_id":1,"path":["core","num","error","ParseIntError"],"kind":"struct"},"0:108:279":{"crate_id":0,"path":["alloc","alloc","alloc"],"kind":"function"},"1:49310:14617":{"crate_id":1,"path":["core","hash","sip","State"],"kind":"struct"},"1:50922:9229":{"crate_id":1,"path":["core","task","wake","RawWaker"],"kind":"struct"},"1:20834:10804":{"crate_id":1,"path":["core","core_simd","vector","Simd"],"kind":"struct"},"0:648:1793":{"crate_id":0,"path":["alloc","borrow"],"kind":"module"},"1:4675:38249":{"crate_id":1,"path":["core","ffi","sealed_trait","VaArgSafe"],"kind":"trait"},"1:52045:14263":{"crate_id":1,"path":["core","core_arch","simd","u8x16"],"kind":"struct"},"1:11681:10705":{"crate_id":1,"path":["core","future","poll_fn","PollFn"],"kind":"struct"},"1:49298:142":{"crate_id":1,"path":["core","hash","sip","Hasher"],"kind":"struct"},"1:1662:1047":{"crate_id":1,"path":["core","ptr"],"kind":"module"},"1:46982:10842":{"crate_id":1,"path":["core","ffi","VaListImpl"],"kind":"struct"},"1:19965:38930":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_left","Rotate"],"kind":"struct"},"1:10726:10895":{"crate_id":1,"path":["core","str","iter","SplitInternal"],"kind":"struct"},"1:3950:14180":{"crate_id":1,"path":["core","asserting","TryCaptureWithDebug"],"kind":"struct"},"1:46848:7936":{"crate_id":1,"path":["core","char","EscapeDebug"],"kind":"struct"},"1:51646:14621":{"crate_id":1,"path":["core","core_arch","simd","u8x2"],"kind":"struct"},"1:46722:7937":{"crate_id":1,"path":["core","ascii","EscapeDefault"],"kind":"struct"},"1:48124:11101":{"crate_id":1,"path":["core","panicking","AssertKind"],"kind":"enum"},"1:19980:38930":{"crate_id":1,"path":["core","core_simd","swizzle","rotate_lanes_right","Rotate"],"kind":"struct"},"1:46290:10540":{"crate_id":1,"path":["core","ops","index_range","IndexRange"],"kind":"struct"},"1:21814:167":{"crate_id":1,"path":["core","num","nonzero","NonZeroI8"],"kind":"struct"},"1:2756:10527":{"crate_id":1,"path":["core","ops","arith","Rem"],"kind":"trait"},"1:1909:1967":{"crate_id":1,"path":["core","ptr","unique","Unique"],"kind":"struct"},"1:10144:2047":{"crate_id":1,"path":["core","slice","raw","from_raw_parts_mut"],"kind":"function"},"0:6884:2125":{"crate_id":0,"path":["alloc","collections","TryReserveErrorKind","AllocError"],"kind":"variant"},"1:49833:7669":{"crate_id":1,"path":["core","slice","iter","ArrayChunksMut"],"kind":"struct"},"0:4737:7157":{"crate_id":0,"path":["alloc","rc","Weak"],"kind":"struct"},"1:58433:10460":{"crate_id":1,"path":["core","pointer"],"kind":"primitive"},"1:20225:14165":{"crate_id":1,"path":["core","core_simd","elements","sealed","Sealed"],"kind":"trait"},"1:49520:13485":{"crate_id":1,"path":["core","slice","ascii","EscapeByte"],"kind":"struct"},"0:92:279":{"crate_id":0,"path":["alloc","alloc"],"kind":"module"},"1:49763:7686":{"crate_id":1,"path":["core","slice","iter","ChunksMut"],"kind":"struct"},"1:49745:7681":{"crate_id":1,"path":["core","slice","iter","Windows"],"kind":"struct"},"1:47125:10742":{"crate_id":1,"path":["core","iter","adapters","fuse","Fuse"],"kind":"struct"},"1:2829:10537":{"crate_id":1,"path":["core","ops","bit","BitXorAssign"],"kind":"trait"},"1:51891:14242":{"crate_id":1,"path":["core","core_arch","simd","i8x8"],"kind":"struct"},"1:2886:115":{"crate_id":1,"path":["core","ops","deref","Deref"],"kind":"trait"},"0:6882:2116":{"crate_id":0,"path":["alloc","collections","TryReserveErrorKind","CapacityOverflow"],"kind":"variant"},"1:49783:7685":{"crate_id":1,"path":["core","slice","iter","ChunksExactMut"],"kind":"struct"},"1:50169:7944":{"crate_id":1,"path":["core","str","iter","Matches"],"kind":"struct"},"1:20425:14217":{"crate_id":1,"path":["core","core_simd","masks","MaskElement"],"kind":"trait"},"1:50087:7701":{"crate_id":1,"path":["core","str","iter","RSplitN"],"kind":"struct"},"1:9554:7701":{"crate_id":1,"path":["core","slice","iter","RSplitN"],"kind":"struct"},"1:1039:759":{"crate_id":1,"path":["core","intrinsics"],"kind":"module"},"1:49281:14758":{"crate_id":1,"path":["core","hash","sip","SipHasher24"],"kind":"struct"},"1:8721:14857":{"crate_id":1,"path":["core","fmt","fmt","BorrowedPlaceholder"],"kind":"struct"},"1:11084:10928":{"crate_id":1,"path":["core","str","pattern","MultiCharEqPattern"],"kind":"struct"},"0:3328:157":{"crate_id":0,"path":["alloc","collections","linked_list","LinkedList"],"kind":"struct"},"1:50539:10937":{"crate_id":1,"path":["core","str","pattern","StrSearcherImpl"],"kind":"enum"},"1:3890:5589":{"crate_id":1,"path":["core","array","Guard"],"kind":"struct"},"1:2766:2888":{"crate_id":1,"path":["core","ops","arith","AddAssign"],"kind":"trait"},"1:38076:4307":{"crate_id":1,"path":["core","cmp","Ordering","Greater"],"kind":"foreign_type"},"1:48348:88":{"crate_id":1,"path":["core","sync","atomic","AtomicU16"],"kind":"struct"},"1:48500:90":{"crate_id":1,"path":["core","sync","atomic","AtomicU64"],"kind":"struct"},"1:48214:65":{"crate_id":1,"path":["core","sync","atomic","Ordering","Acquire"],"kind":"foreign_type"},"1:49754:7680":{"crate_id":1,"path":["core","slice","iter","Chunks"],"kind":"struct"},"1:4351:10783":{"crate_id":1,"path":["core","cell","SyncUnsafeCell"],"kind":"struct"},"1:2920:2768":{"crate_id":1,"path":["core","ops","function","FnOnce"],"kind":"trait"},"1:11033:7919":{"crate_id":1,"path":["core","str","pattern","ReverseSearcher"],"kind":"trait"},"1:5439:10733":{"crate_id":1,"path":["core","iter","adapters","flatten","Flatten"],"kind":"struct"},"1:50560:10939":{"crate_id":1,"path":["core","str","pattern","TwoWaySearcher"],"kind":"struct"},"1:38086:10688":{"crate_id":1,"path":["core","cmp","Reverse"],"kind":"struct"},"1:1271:860":{"crate_id":1,"path":["core","intrinsics","min_align_of_val"],"kind":"function"},"1:56928:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2463:75":{"crate_id":1,"path":["core","convert","AsRef"],"kind":"trait"},"1:47472:10720":{"crate_id":1,"path":["core","iter","sources","once","Once"],"kind":"struct"},"0:3339:3356":{"crate_id":0,"path":["alloc","collections","linked_list","Iter"],"kind":"struct"},"1:5362:10741":{"crate_id":1,"path":["core","iter","adapters","flatten","FlatMap"],"kind":"struct"},"1:3352:10680":{"crate_id":1,"path":["core","any","Provider"],"kind":"trait"},"1:8585:6929":{"crate_id":1,"path":["core","fmt","LowerExp"],"kind":"trait"},"1:7407:10728":{"crate_id":1,"path":["core","iter","traits","marker","TrustedStep"],"kind":"trait"},"1:20274:14167":{"crate_id":1,"path":["core","core_simd","lane_count","SupportedLaneCount"],"kind":"trait"},"1:10582:7928":{"crate_id":1,"path":["core","str","converts","from_utf8_mut"],"kind":"function"},"0:676:109":{"crate_id":0,"path":["alloc","borrow","Cow"],"kind":"enum"},"1:49855:7696":{"crate_id":1,"path":["core","slice","iter","RChunksMut"],"kind":"struct"},"1:50879:205":{"crate_id":1,"path":["core","future","ResumeTy"],"kind":"struct"},"1:46497:14861":{"crate_id":1,"path":["core","any","tags","MaybeSizedValue"],"kind":"struct"},"1:46826:7937":{"crate_id":1,"path":["core","char","EscapeDefault"],"kind":"struct"},"1:9426:7707":{"crate_id":1,"path":["core","slice","iter","SplitInclusiveMut"],"kind":"struct"},"1:47264:10750":{"crate_id":1,"path":["core","iter","adapters","take_while","TakeWhile"],"kind":"struct"},"1:53513:14233":{"crate_id":1,"path":["core","core_arch","simd","i16x32"],"kind":"struct"},"1:49273:10711":{"crate_id":1,"path":["core","hash","sip","SipHasher13"],"kind":"struct"},"1:49328:14760":{"crate_id":1,"path":["core","hash","sip","Sip24Rounds"],"kind":"struct"},"1:4299:10912":{"crate_id":1,"path":["core","cell","BorrowRefMut"],"kind":"struct"},"1:50680:10882":{"crate_id":1,"path":["core","str","LinesAnyMap"],"kind":"struct"},"0:4428:650":{"crate_id":0,"path":["alloc","fmt"],"kind":"module"},"1:1259:328":{"crate_id":1,"path":["core","intrinsics","assume"],"kind":"function"},"1:46907:10847":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulError"],"kind":"struct"},"1:3985:2324":{"crate_id":1,"path":["core","async_iter","async_iter","AsyncIterator"],"kind":"trait"},"1:50033:7946":{"crate_id":1,"path":["core","str","iter","RSplitTerminator"],"kind":"struct"},"1:50692:10886":{"crate_id":1,"path":["core","str","CharEscapeDefault"],"kind":"struct"},"1:52237:14231":{"crate_id":1,"path":["core","core_arch","simd","i16x8"],"kind":"struct"},"1:2479:230":{"crate_id":1,"path":["core","convert","TryFrom"],"kind":"trait"},"1:3156:10545":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuit"],"kind":"struct"},"1:7076:2761":{"crate_id":1,"path":["core","iter","traits","exact_size","ExactSizeIterator"],"kind":"trait"},"1:56967:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:50930:9230":{"crate_id":1,"path":["core","task","wake","RawWakerVTable"],"kind":"struct"},"0:679:2676":{"crate_id":0,"path":["alloc","borrow","Cow","Borrowed"],"kind":"variant"},"1:7403:3146":{"crate_id":1,"path":["core","iter","traits","marker","TrustedLen"],"kind":"trait"},"1:10576:1344":{"crate_id":1,"path":["core","str"],"kind":"module"},"1:8791:138":{"crate_id":1,"path":["core","hash","Hash"],"kind":"trait"},"1:53623:14253":{"crate_id":1,"path":["core","core_arch","simd","u16x32"],"kind":"struct"},"1:10100:7691":{"crate_id":1,"path":["core","slice","iter","GroupByMut"],"kind":"struct"},"2:0:429":{"crate_id":2,"path":["compiler_builtins"],"kind":"module"},"1:8333:6927":{"crate_id":1,"path":["core","fmt","builders","DebugTuple"],"kind":"struct"},"1:53825:14222":{"crate_id":1,"path":["core","core_arch","simd","f32x16"],"kind":"struct"},"1:4514:8110":{"crate_id":1,"path":["core","char","decode_utf16"],"kind":"function"},"1:48133:187":{"crate_id":1,"path":["core","pin","Pin"],"kind":"struct"},"0:6991:8288":{"crate_id":0,"path":["alloc","string","FromUtf8Error"],"kind":"struct"},"1:49935:7931":{"crate_id":1,"path":["core","str","iter","Chars"],"kind":"struct"},"0:6740:3364":{"crate_id":0,"path":["alloc","collections","binary_heap","IntoIterSorted"],"kind":"struct"},"1:25188:10281":{"crate_id":1,"path":["core","num","wrapping","Wrapping"],"kind":"struct"},"1:21086:14281":{"crate_id":1,"path":["core","num","bignum","tests","Big8x3"],"kind":"struct"},"1:15:10485":{"crate_id":1,"path":["core","writeln"],"kind":"macro"},"1:49965:7687":{"crate_id":1,"path":["core","str","iter","Split"],"kind":"struct"},"1:50069:7703":{"crate_id":1,"path":["core","str","iter","SplitN"],"kind":"struct"},"1:58455:10480":{"crate_id":1,"path":["core","fn"],"kind":"primitive"},"1:10837:7706":{"crate_id":1,"path":["core","str","iter","SplitInclusive"],"kind":"struct"},"1:54099:14689":{"crate_id":1,"path":["core","core_arch","x86","__m256bh"],"kind":"struct"},"1:58437:10464":{"crate_id":1,"path":["core","tuple"],"kind":"primitive"},"1:47042:10736":{"crate_id":1,"path":["core","iter","adapters","chain","Chain"],"kind":"struct"},"1:11595:134":{"crate_id":1,"path":["core","future","future","Future"],"kind":"trait"},"0:4521:198":{"crate_id":0,"path":["alloc","rc","Rc"],"kind":"struct"},"1:2770:10531":{"crate_id":1,"path":["core","ops","arith","SubAssign"],"kind":"trait"},"1:46779:10988":{"crate_id":1,"path":["core","char","decode","DecodeUtf16"],"kind":"struct"},"1:46470:10678":{"crate_id":1,"path":["core","any","TypeId"],"kind":"struct"},"1:46869:10984":{"crate_id":1,"path":["core","char","CaseMappingIter"],"kind":"enum"},"1:3129:10541":{"crate_id":1,"path":["core","ops","range","OneSidedRange"],"kind":"trait"},"0:276:1792":{"crate_id":0,"path":["alloc","boxed","Box"],"kind":"struct"},"1:2466:74":{"crate_id":1,"path":["core","convert","AsMut"],"kind":"trait"},"1:58443:10468":{"crate_id":1,"path":["core","i16"],"kind":"primitive"},"1:4041:10914":{"crate_id":1,"path":["core","cell","lazy","LazyCell"],"kind":"struct"},"1:54031:14685":{"crate_id":1,"path":["core","core_arch","x86","__m512i"],"kind":"struct"},"1:54046:14686":{"crate_id":1,"path":["core","core_arch","x86","__m512"],"kind":"struct"},"1:47279:10751":{"crate_id":1,"path":["core","iter","adapters","zip","Zip"],"kind":"struct"},"1:2804:4875":{"crate_id":1,"path":["core","ops","bit","BitXor"],"kind":"trait"},"1:51690:14261":{"crate_id":1,"path":["core","core_arch","simd","u8x4"],"kind":"struct"},"1:1031:4310":{"crate_id":1,"path":["core","hint"],"kind":"module"},"1:48200:3475":{"crate_id":1,"path":["core","result","IntoIter"],"kind":"struct"},"1:2774:10529":{"crate_id":1,"path":["core","ops","arith","MulAssign"],"kind":"trait"},"1:46463:10542":{"crate_id":1,"path":["core","ops","try_trait","Yeet"],"kind":"struct"},"1:7130:154":{"crate_id":1,"path":["core","iter","traits","iterator","Iterator"],"kind":"trait"},"1:1727:2845":{"crate_id":1,"path":["core","ptr","metadata","Pointee"],"kind":"trait"},"1:20268:14166":{"crate_id":1,"path":["core","core_simd","lane_count","LaneCount"],"kind":"struct"},"0:5533:7157":{"crate_id":0,"path":["alloc","sync","Weak"],"kind":"struct"},"1:47111:14754":{"crate_id":1,"path":["core","iter","adapters","flatten","FlattenCompat"],"kind":"struct"},"1:21748:168":{"crate_id":1,"path":["core","num","nonzero","NonZeroU128"],"kind":"struct"},"1:6771:8112":{"crate_id":1,"path":["core","iter","sources","from_fn","from_fn"],"kind":"function"},"1:6801:8576":{"crate_id":1,"path":["core","iter","sources","once","once"],"kind":"function"},"1:1269:1311":{"crate_id":1,"path":["core","intrinsics","size_of_val"],"kind":"function"},"1:48462:83":{"crate_id":1,"path":["core","sync","atomic","AtomicI64"],"kind":"struct"},"0:5803:1797":{"crate_id":0,"path":["alloc","task"],"kind":"module"},"1:1633:10513":{"crate_id":1,"path":["core","mem","Discriminant"],"kind":"struct"},"1:51998:14625":{"crate_id":1,"path":["core","core_arch","simd","f64x1"],"kind":"struct"},"1:50367:10926":{"crate_id":1,"path":["core","str","pattern","CharSearcher"],"kind":"struct"},"1:10067:7690":{"crate_id":1,"path":["core","slice","iter","GroupBy"],"kind":"struct"},"0:4255:3011":{"crate_id":0,"path":["alloc","collections","btree_map"],"kind":"module"},"1:52511:14633":{"crate_id":1,"path":["core","core_arch","simd","m64x2"],"kind":"struct"},"1:52827:14244":{"crate_id":1,"path":["core","core_arch","simd","i8x32"],"kind":"struct"},"1:21913:166":{"crate_id":1,"path":["core","num","nonzero","NonZeroI64"],"kind":"struct"},"1:3598:3475":{"crate_id":1,"path":["core","array","iter","IntoIter"],"kind":"struct"},"1:8296:13244":{"crate_id":1,"path":["core","fmt","builders","PadAdapter"],"kind":"struct"},"0:6749:3449":{"crate_id":0,"path":["alloc","collections","binary_heap","Drain"],"kind":"struct"},"1:11027:7920":{"crate_id":1,"path":["core","str","pattern","Searcher"],"kind":"trait"},"1:50573:7949":{"crate_id":1,"path":["core","str","lossy","Utf8Chunk"],"kind":"struct"},"1:20942:14203":{"crate_id":1,"path":["core","core_simd","vector","SimdElement"],"kind":"trait"},"1:48082:10919":{"crate_id":1,"path":["core","panic","location","Location"],"kind":"struct"},"1:53909:14260":{"crate_id":1,"path":["core","core_arch","simd","u64x8"],"kind":"struct"},"1:6975:10730":{"crate_id":1,"path":["core","iter","traits","accum","Sum"],"kind":"trait"},"1:29452:1962":{"crate_id":1,"path":["core","mem","manually_drop","ManuallyDrop"],"kind":"struct"},"1:1542:5589":{"crate_id":1,"path":["core","mem","maybe_uninit","write_slice_cloned","Guard"],"kind":"struct"},"1:49951:7929":{"crate_id":1,"path":["core","str","iter","Bytes"],"kind":"struct"},"1:50219:7940":{"crate_id":1,"path":["core","str","iter","Lines"],"kind":"struct"},"1:8803:138":{"crate_id":1,"path":["core","hash","macros","Hash"],"kind":"proc_derive"},"1:50684:10884":{"crate_id":1,"path":["core","str","CharEscapeDebugContinue"],"kind":"struct"},"1:20940:14165":{"crate_id":1,"path":["core","core_simd","vector","sealed","Sealed"],"kind":"trait"},"1:46365:196":{"crate_id":1,"path":["core","ops","range","RangeTo"],"kind":"struct"},"0:744:1794":{"crate_id":0,"path":["alloc","collections"],"kind":"module"},"1:3066:3663":{"crate_id":1,"path":["core","ops","range","RangeBounds"],"kind":"trait"},"0:6757:3337":{"crate_id":0,"path":["alloc","collections","binary_heap","DrainSorted"],"kind":"struct"},"1:6497:6101":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccess"],"kind":"trait"},"1:47134:10743":{"crate_id":1,"path":["core","iter","adapters","inspect","Inspect"],"kind":"struct"},"1:47177:3589":{"crate_id":1,"path":["core","iter","adapters","peekable","Peekable"],"kind":"struct"},"1:20394:14165":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","sealed","Sealed"],"kind":"trait"},"0:5810:9270":{"crate_id":0,"path":["alloc","task","Wake"],"kind":"trait"},"1:50229:7941":{"crate_id":1,"path":["core","str","iter","LinesAny"],"kind":"struct"},"1:51820:14250":{"crate_id":1,"path":["core","core_arch","simd","u16x4"],"kind":"struct"},"1:4177:10905":{"crate_id":1,"path":["core","cell","BorrowError"],"kind":"struct"},"1:20315:14202":{"crate_id":1,"path":["core","core_simd","masks","mask_impl","Mask"],"kind":"struct"},"1:2778:10528":{"crate_id":1,"path":["core","ops","arith","DivAssign"],"kind":"trait"},"1:51961:14624":{"crate_id":1,"path":["core","core_arch","simd","i64x1"],"kind":"struct"},"1:4182:10906":{"crate_id":1,"path":["core","cell","BorrowMutError"],"kind":"struct"},"1:46749:14214":{"crate_id":1,"path":["core","char","convert","CharErrorKind"],"kind":"enum"},"1:8940:6208":{"crate_id":1,"path":["core","slice","memchr"],"kind":"module"},"0:7002:8296":{"crate_id":0,"path":["alloc","string","FromUtf16Error"],"kind":"struct"},"0:0:279":{"crate_id":0,"path":["alloc"],"kind":"module"},"1:56915:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2838:10539":{"crate_id":1,"path":["core","ops","bit","ShrAssign"],"kind":"trait"},"1:48272:91":{"crate_id":1,"path":["core","sync","atomic","AtomicU8"],"kind":"struct"},"1:49865:7694":{"crate_id":1,"path":["core","slice","iter","RChunksExact"],"kind":"struct"},"1:54161:14691":{"crate_id":1,"path":["core","core_arch","x86","cpuid","CpuidResult"],"kind":"struct"},"1:47249:10749":{"crate_id":1,"path":["core","iter","adapters","take","Take"],"kind":"struct"},"1:48212:203":{"crate_id":1,"path":["core","sync","atomic","Ordering","Release"],"kind":"foreign_type"},"1:1464:1961":{"crate_id":1,"path":["core","mem"],"kind":"module"},"1:50688:10885":{"crate_id":1,"path":["core","str","CharEscapeUnicode"],"kind":"struct"},"1:2652:2330":{"crate_id":1,"path":["core","marker","Unsize"],"kind":"trait"},"1:29586:14302":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum32"],"kind":"enum"},"1:47093:10739":{"crate_id":1,"path":["core","iter","adapters","filter","Filter"],"kind":"struct"},"1:8579:6931":{"crate_id":1,"path":["core","fmt","LowerHex"],"kind":"trait"},"1:3166:14207":{"crate_id":1,"path":["core","ops","try_trait","NeverShortCircuitResidual"],"kind":"enum"},"1:50593:7950":{"crate_id":1,"path":["core","str","lossy","Utf8Chunks"],"kind":"struct"},"1:2263:182":{"crate_id":1,"path":["core","cmp","PartialEq"],"kind":"trait"},"1:7710:3767":{"crate_id":1,"path":["core","panic","unwind_safe","RefUnwindSafe"],"kind":"trait"},"1:50413:10933":{"crate_id":1,"path":["core","str","pattern","CharArrayRefSearcher"],"kind":"struct"},"1:53015:14221":{"crate_id":1,"path":["core","core_arch","simd","f32x8"],"kind":"struct"},"1:1596:1310":{"crate_id":1,"path":["core","mem","size_of"],"kind":"function"},"1:1815:1966":{"crate_id":1,"path":["core","ptr","non_null","NonNull"],"kind":"struct"},"0:110:1077":{"crate_id":0,"path":["alloc","alloc","realloc"],"kind":"function"},"1:48757:6932":{"crate_id":1,"path":["core","fmt","num","UpperHex"],"kind":"struct"},"1:8363:6925":{"crate_id":1,"path":["core","fmt","builders","DebugSet"],"kind":"struct"},"1:8275:650":{"crate_id":1,"path":["core","fmt"],"kind":"module"},"1:3139:227":{"crate_id":1,"path":["core","ops","try_trait","Try"],"kind":"trait"},"1:2210:97":{"crate_id":1,"path":["core","borrow","Borrow"],"kind":"trait"},"1:2917:2770":{"crate_id":1,"path":["core","ops","function","FnMut"],"kind":"trait"},"1:50887:189":{"crate_id":1,"path":["core","task","poll","Poll"],"kind":"enum"},"1:4254:10781":{"crate_id":1,"path":["core","cell","Ref"],"kind":"struct"},"0:4938:7826":{"crate_id":0,"path":["alloc","slice","Join"],"kind":"trait"},"1:52488:14632":{"crate_id":1,"path":["core","core_arch","simd","m32x4"],"kind":"struct"},"1:47012:7668":{"crate_id":1,"path":["core","iter","adapters","array_chunks","ArrayChunks"],"kind":"struct"},"1:3301:68":{"crate_id":1,"path":["core","any","Any"],"kind":"trait"},"1:19997:40114":{"crate_id":1,"path":["core","core_simd","swizzle","interleave","Lo"],"kind":"struct"},"1:11865:199":{"crate_id":1,"path":["core","task","ready","Ready"],"kind":"struct"},"1:9388:7688":{"crate_id":1,"path":["core","slice","iter","SplitMut"],"kind":"struct"},"1:58263:14699":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdMutPtr"],"kind":"struct"},"1:49694:13460":{"crate_id":1,"path":["core","slice","iter","GenericSplitN"],"kind":"struct"},"1:2951:2334":{"crate_id":1,"path":["core","ops","generator","Generator"],"kind":"trait"},"1:46409:197":{"crate_id":1,"path":["core","ops","range","RangeToInclusive"],"kind":"struct"},"1:20418:14165":{"crate_id":1,"path":["core","core_simd","masks","sealed","Sealed"],"kind":"trait"},"1:21176:14734":{"crate_id":1,"path":["core","num","dec2flt","decimal","Decimal"],"kind":"struct"},"1:47154:10744":{"crate_id":1,"path":["core","iter","adapters","map","Map"],"kind":"struct"},"0:6:659":{"crate_id":0,"path":["alloc","format"],"kind":"macro"},"1:47465:10719":{"crate_id":1,"path":["core","iter","sources","from_fn","FromFn"],"kind":"struct"},"1:8515:1122":{"crate_id":1,"path":["core","fmt","rt"],"kind":"module"},"1:50972:2125":{"crate_id":1,"path":["core","alloc","AllocError"],"kind":"struct"},"1:53371:14265":{"crate_id":1,"path":["core","core_arch","simd","u8x64"],"kind":"struct"},"1:50257:7924":{"crate_id":1,"path":["core","str","iter","EncodeUtf16"],"kind":"struct"},"1:49000:129":{"crate_id":1,"path":["core","fmt","rt","v1","FormatSpec"],"kind":"struct"},"1:50015:7947":{"crate_id":1,"path":["core","str","iter","SplitTerminator"],"kind":"struct"},"1:48750:6931":{"crate_id":1,"path":["core","fmt","num","LowerHex"],"kind":"struct"},"1:50550:10938":{"crate_id":1,"path":["core","str","pattern","EmptyNeedle"],"kind":"struct"},"1:7025:3507":{"crate_id":1,"path":["core","iter","traits","collect","Extend"],"kind":"trait"},"1:7012:132":{"crate_id":1,"path":["core","iter","traits","collect","FromIterator"],"kind":"trait"},"1:52313:14220":{"crate_id":1,"path":["core","core_arch","simd","f32x4"],"kind":"struct"},"1:38070:4306":{"crate_id":1,"path":["core","cmp","Ordering","Less"],"kind":"foreign_type"},"1:21139:14520":{"crate_id":1,"path":["core","num","dec2flt","common","AsciiStr"],"kind":"struct"},"1:58449:10474":{"crate_id":1,"path":["core","u32"],"kind":"primitive"},"1:7711:10921":{"crate_id":1,"path":["core","panic","unwind_safe","AssertUnwindSafe"],"kind":"struct"},"1:50768:14312":{"crate_id":1,"path":["core","time","TryFromFloatSecsErrorKind"],"kind":"enum"},"1:50525:10936":{"crate_id":1,"path":["core","str","pattern","StrSearcher"],"kind":"struct"},"1:1658:1964":{"crate_id":1,"path":["core","mem","SizedTypeProperties"],"kind":"trait"},"1:48386:82":{"crate_id":1,"path":["core","sync","atomic","AtomicI32"],"kind":"struct"},"1:2427:10698":{"crate_id":1,"path":["core","convert","num","FloatToInt"],"kind":"trait"},"1:47997:175":{"crate_id":1,"path":["core","option","Option"],"kind":"enum"},"1:50282:7938":{"crate_id":1,"path":["core","str","iter","EscapeUnicode"],"kind":"struct"},"1:58242:14698":{"crate_id":1,"path":["core","core_simd","vector","ptr","SimdConstPtr"],"kind":"struct"},"1:20399:36708":{"crate_id":1,"path":["core","core_simd","masks","to_bitmask","ToBitMask"],"kind":"trait"},"1:9349:7706":{"crate_id":1,"path":["core","slice","iter","SplitInclusive"],"kind":"struct"},"1:10177:14409":{"crate_id":1,"path":["core","slice","sort","CopyOnDrop"],"kind":"struct"},"1:6412:4129":{"crate_id":1,"path":["core","iter","adapters","zip","zip"],"kind":"function"},"1:50115:7942":{"crate_id":1,"path":["core","str","iter","MatchIndices"],"kind":"struct"},"1:29692:14303":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum64"],"kind":"enum"},"1:6545:12989":{"crate_id":1,"path":["core","iter","adapters","GenericShunt"],"kind":"struct"},"1:54084:14688":{"crate_id":1,"path":["core","core_arch","x86","__m128bh"],"kind":"struct"},"0:5114:2337":{"crate_id":0,"path":["alloc","str","from_boxed_utf8_unchecked"],"kind":"function"},"1:53165:14245":{"crate_id":1,"path":["core","core_arch","simd","i8x64"],"kind":"struct"},"1:9540:7703":{"crate_id":1,"path":["core","slice","iter","SplitN"],"kind":"struct"},"1:47520:10727":{"crate_id":1,"path":["core","iter","sources","successors","Successors"],"kind":"struct"},"1:20186:14216":{"crate_id":1,"path":["core","core_simd","elements","int","SimdInt"],"kind":"trait"},"1:47213:10747":{"crate_id":1,"path":["core","iter","adapters","skip","Skip"],"kind":"struct"},"1:48210:202":{"crate_id":1,"path":["core","sync","atomic","Ordering","Relaxed"],"kind":"foreign_type"},"1:19952:10688":{"crate_id":1,"path":["core","core_simd","swizzle","reverse","Reverse"],"kind":"struct"},"1:58436:10463":{"crate_id":1,"path":["core","str"],"kind":"primitive"},"0:3531:4069":{"crate_id":0,"path":["alloc","collections","linked_list","DrainFilter"],"kind":"struct"},"1:50960:1960":{"crate_id":1,"path":["core","alloc","layout","LayoutError"],"kind":"struct"},"1:21616:172":{"crate_id":1,"path":["core","num","nonzero","NonZeroU8"],"kind":"struct"},"1:3439:304":{"crate_id":1,"path":["core","array"],"kind":"module"},"1:6979:10729":{"crate_id":1,"path":["core","iter","traits","accum","Product"],"kind":"trait"},"1:11038:7917":{"crate_id":1,"path":["core","str","pattern","DoubleEndedSearcher"],"kind":"trait"},"0:3314:3009":{"crate_id":0,"path":["alloc","collections","linked_list"],"kind":"module"},"1:2899:2332":{"crate_id":1,"path":["core","ops","deref","DerefMut"],"kind":"trait"},"1:2721:2328":{"crate_id":1,"path":["core","marker","Tuple"],"kind":"trait"},"1:29486:1963":{"crate_id":1,"path":["core","mem","maybe_uninit","MaybeUninit"],"kind":"union"},"1:20018:40110":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Even"],"kind":"struct"},"1:10154:7678":{"crate_id":1,"path":["core","slice","raw","from_mut_ptr_range"],"kind":"function"},"1:49113:73":{"crate_id":1,"path":["core","fmt","Arguments"],"kind":"struct"},"1:7406:3144":{"crate_id":1,"path":["core","iter","traits","marker","InPlaceIterable"],"kind":"trait"},"1:11834:9231":{"crate_id":1,"path":["core","task","wake","Waker"],"kind":"struct"},"1:48736:6921":{"crate_id":1,"path":["core","fmt","num","Binary"],"kind":"struct"},"1:52981:14239":{"crate_id":1,"path":["core","core_arch","simd","i64x4"],"kind":"struct"},"0:771:3221":{"crate_id":0,"path":["alloc","collections","binary_heap","PeekMut"],"kind":"struct"},"1:2233:105":{"crate_id":1,"path":["core","clone","Clone"],"kind":"trait"},"1:48073:3475":{"crate_id":1,"path":["core","option","IntoIter"],"kind":"struct"},"1:8581:6932":{"crate_id":1,"path":["core","fmt","UpperHex"],"kind":"trait"},"1:2910:1965":{"crate_id":1,"path":["core","ops","drop","Drop"],"kind":"trait"},"0:5:1505":{"crate_id":0,"path":["alloc","vec"],"kind":"macro"},"1:48994:70":{"crate_id":1,"path":["core","fmt","rt","v1","Argument"],"kind":"struct"},"1:11886:279":{"crate_id":1,"path":["core","alloc"],"kind":"module"},"0:6980:218":{"crate_id":0,"path":["alloc","string","String"],"kind":"struct"},"0:4934:7816":{"crate_id":0,"path":["alloc","slice","Concat"],"kind":"trait"},"1:50700:10888":{"crate_id":1,"path":["core","str","IsAsciiWhitespace"],"kind":"struct"},"1:9582:7702":{"crate_id":1,"path":["core","slice","iter","RSplitNMut"],"kind":"struct"},"1:58445:10470":{"crate_id":1,"path":["core","i64"],"kind":"primitive"},"1:2469:145":{"crate_id":1,"path":["core","convert","Into"],"kind":"trait"},"1:20427:14202":{"crate_id":1,"path":["core","core_simd","masks","Mask"],"kind":"struct"},"1:46436:4816":{"crate_id":1,"path":["core","ops","range","Bound","Excluded"],"kind":"foreign_type"},"1:46321:192":{"crate_id":1,"path":["core","ops","range","Range"],"kind":"struct"},"3:0:10501":{"crate_id":3,"path":["rustc_std_workspace_core"],"kind":"module"},"1:2638:831":{"crate_id":1,"path":["core","marker"],"kind":"module"},"1:4308:10782":{"crate_id":1,"path":["core","cell","RefMut"],"kind":"struct"},"1:54020:14684":{"crate_id":1,"path":["core","core_arch","x86","__m256d"],"kind":"struct"},"1:50704:10889":{"crate_id":1,"path":["core","str","IsNotEmpty"],"kind":"struct"},"1:9461:7699":{"crate_id":1,"path":["core","slice","iter","RSplit"],"kind":"struct"},"1:11946:1969":{"crate_id":1,"path":["core","alloc","Allocator"],"kind":"trait"},"1:29492:10516":{"crate_id":1,"path":["core","mem","transmutability","Assume"],"kind":"struct"},"1:47187:10745":{"crate_id":1,"path":["core","iter","adapters","rev","Rev"],"kind":"struct"},"1:50187:7945":{"crate_id":1,"path":["core","str","iter","RMatches"],"kind":"struct"},"1:20682:36726":{"crate_id":1,"path":["core","core_simd","ord","SimdOrd"],"kind":"trait"},"1:58428:10456":{"crate_id":1,"path":["core","bool"],"kind":"primitive"},"1:50735:120":{"crate_id":1,"path":["core","time","Duration"],"kind":"struct"},"0:859:3356":{"crate_id":0,"path":["alloc","collections","binary_heap","Iter"],"kind":"struct"},"1:48743:6922":{"crate_id":1,"path":["core","fmt","num","Octal"],"kind":"struct"},"0:6881:1972":{"crate_id":0,"path":["alloc","collections","TryReserveErrorKind"],"kind":"enum"},"1:39242:8747":{"crate_id":1,"path":["core","convert","Infallible"],"kind":"enum"},"1:49027:108":{"crate_id":1,"path":["core","fmt","rt","v1","Count"],"kind":"enum"},"1:4328:10677":{"crate_id":1,"path":["core","cell","UnsafeCell"],"kind":"struct"},"1:38073:124":{"crate_id":1,"path":["core","cmp","Ordering","Equal"],"kind":"foreign_type"},"1:21289:37488":{"crate_id":1,"path":["core","num","flt2dec","Sign"],"kind":"enum"},"1:29304:10853":{"crate_id":1,"path":["core","num","FpCategory"],"kind":"enum"},"1:46855:10982":{"crate_id":1,"path":["core","char","ToLowercase"],"kind":"struct"},"1:58453:10478":{"crate_id":1,"path":["core","usize"],"kind":"primitive"},"1:8805:142":{"crate_id":1,"path":["core","hash","Hasher"],"kind":"trait"},"1:48048:2750":{"crate_id":1,"path":["core","option","Item"],"kind":"struct"},"1:58440:10465":{"crate_id":1,"path":["core","f32"],"kind":"primitive"},"1:2708:2329":{"crate_id":1,"path":["core","marker","Unpin"],"kind":"trait"},"1:29528:14301":{"crate_id":1,"path":["core","ptr","alignment","AlignmentEnum16"],"kind":"enum"},"0:3352:3805":{"crate_id":0,"path":["alloc","collections","linked_list","IterMut"],"kind":"struct"},"1:2299:176":{"crate_id":1,"path":["core","cmp","Ord"],"kind":"trait"},"0:6407:237":{"crate_id":0,"path":["alloc","vec","Vec"],"kind":"struct"},"1:49941:7930":{"crate_id":1,"path":["core","str","iter","CharIndices"],"kind":"struct"},"1:47102:10740":{"crate_id":1,"path":["core","iter","adapters","filter_map","FilterMap"],"kind":"struct"},"1:46862:10983":{"crate_id":1,"path":["core","char","ToUppercase"],"kind":"struct"},"0:5121:1796":{"crate_id":0,"path":["alloc","string"],"kind":"module"},"1:58430:10458":{"crate_id":1,"path":["core","char"],"kind":"primitive"},"1:46888:10985":{"crate_id":1,"path":["core","char","TryFromCharError"],"kind":"struct"},"0:3462:5277":{"crate_id":0,"path":["alloc","collections","linked_list","Cursor"],"kind":"struct"},"1:10567:10803":{"crate_id":1,"path":["core","slice","GetManyMutError"],"kind":"struct"},"0:5424:3449":{"crate_id":0,"path":["alloc","string","Drain"],"kind":"struct"},"1:9568:7704":{"crate_id":1,"path":["core","slice","iter","SplitNMut"],"kind":"struct"},"1:21682:170":{"crate_id":1,"path":["core","num","nonzero","NonZeroU32"],"kind":"struct"},"1:2821:10535":{"crate_id":1,"path":["core","ops","bit","BitAndAssign"],"kind":"trait"},"1:46490:14746":{"crate_id":1,"path":["core","any","tags","Value"],"kind":"struct"},"1:47083:10738":{"crate_id":1,"path":["core","iter","adapters","enumerate","Enumerate"],"kind":"struct"},"1:10149:7676":{"crate_id":1,"path":["core","slice","raw","from_mut"],"kind":"function"},"1:47064:10732":{"crate_id":1,"path":["core","iter","adapters","copied","Copied"],"kind":"struct"},"1:50696:10887":{"crate_id":1,"path":["core","str","IsWhitespace"],"kind":"struct"},"1:2833:10538":{"crate_id":1,"path":["core","ops","bit","ShlAssign"],"kind":"trait"},"1:3150:10543":{"crate_id":1,"path":["core","ops","try_trait","Residual"],"kind":"trait"},"1:2740:4876":{"crate_id":1,"path":["core","ops","arith","Sub"],"kind":"trait"},"1:50461:10934":{"crate_id":1,"path":["core","str","pattern","CharSliceSearcher"],"kind":"struct"},"1:21216:10854":{"crate_id":1,"path":["core","num","dec2flt","ParseFloatError"],"kind":"struct"},"1:50382:10929":{"crate_id":1,"path":["core","str","pattern","MultiCharEqSearcher"],"kind":"struct"},"0:141:1791":{"crate_id":0,"path":["alloc","boxed"],"kind":"module"},"1:46935:10846":{"crate_id":1,"path":["core","ffi","c_str","FromBytesUntilNulError"],"kind":"struct"},"1:48065:3805":{"crate_id":1,"path":["core","option","IterMut"],"kind":"struct"},"1:2132:572":{"crate_id":1,"path":["core","ptr","drop_in_place"],"kind":"function"},"1:46305:194":{"crate_id":1,"path":["core","ops","range","RangeFull"],"kind":"struct"},"1:47055:10731":{"crate_id":1,"path":["core","iter","adapters","cloned","Cloned"],"kind":"struct"},"1:54005:14683":{"crate_id":1,"path":["core","core_arch","x86","__m256"],"kind":"struct"},"1:3144:133":{"crate_id":1,"path":["core","ops","try_trait","FromResidual"],"kind":"trait"},"1:50488:10935":{"crate_id":1,"path":["core","str","pattern","CharPredicateSearcher"],"kind":"struct"},"0:6725:1970":{"crate_id":0,"path":["alloc","alloc","Global"],"kind":"struct"},"1:2787:10532":{"crate_id":1,"path":["core","ops","bit","Not"],"kind":"trait"},"1:46919:6277":{"crate_id":1,"path":["core","ffi","c_str","FromBytesWithNulErrorKind"],"kind":"enum"},"0:128:1968":{"crate_id":0,"path":["alloc","alloc","handle_alloc_error"],"kind":"function"},"1:1257:266":{"crate_id":1,"path":["core","intrinsics","abort"],"kind":"function"},"1:2794:4873":{"crate_id":1,"path":["core","ops","bit","BitAnd"],"kind":"trait"},"1:2969:3662":{"crate_id":1,"path":["core","ops","index","Index"],"kind":"trait"},"1:51980:14219":{"crate_id":1,"path":["core","core_arch","simd","f32x2"],"kind":"struct"},"1:47073:10737":{"crate_id":1,"path":["core","iter","adapters","cycle","Cycle"],"kind":"struct"},"1:10583:7932":{"crate_id":1,"path":["core","str","converts","from_utf8_unchecked"],"kind":"function"},"1:51921:14230":{"crate_id":1,"path":["core","core_arch","simd","i16x4"],"kind":"struct"},"1:49097:10772":{"crate_id":1,"path":["core","fmt","FlagV1"],"kind":"enum"},"1:2904:200":{"crate_id":1,"path":["core","ops","deref","Receiver"],"kind":"trait"},"1:2782:10530":{"crate_id":1,"path":["core","ops","arith","RemAssign"],"kind":"trait"},"1:1592:658":{"crate_id":1,"path":["core","mem","forget"],"kind":"function"},"1:4244:10911":{"crate_id":1,"path":["core","cell","BorrowRef"],"kind":"struct"},"1:3364:9226":{"crate_id":1,"path":["core","any","Demand"],"kind":"struct"},"1:21305:37486":{"crate_id":1,"path":["core","num","fmt","Part"],"kind":"enum"},"1:1284:1407":{"crate_id":1,"path":["core","intrinsics","transmute"],"kind":"function"},"1:11239:110":{"crate_id":1,"path":["core","str","lossy","Debug"],"kind":"struct"},"1:21649:169":{"crate_id":1,"path":["core","num","nonzero","NonZeroU16"],"kind":"struct"},"1:21979:10291":{"crate_id":1,"path":["core","num","nonzero","NonZeroIsize"],"kind":"struct"},"1:49983:7699":{"crate_id":1,"path":["core","str","iter","RSplit"],"kind":"struct"},"1:2326:2120":{"crate_id":1,"path":["core","cmp","max"],"kind":"function"},"1:39291:10674":{"crate_id":1,"path":["core","marker","PhantomPinned"],"kind":"struct"},"1:47163:10734":{"crate_id":1,"path":["core","iter","adapters","map_while","MapWhile"],"kind":"struct"},"1:2313:4091":{"crate_id":1,"path":["core","cmp","min"],"kind":"function"},"1:48424:89":{"crate_id":1,"path":["core","sync","atomic","AtomicU32"],"kind":"struct"},"1:49909:6209":{"crate_id":1,"path":["core","str","error","Utf8Error"],"kind":"struct"},"1:9281:3805":{"crate_id":1,"path":["core","slice","iter","IterMut"],"kind":"struct"},"1:21243:14527":{"crate_id":1,"path":["core","num","diy_float","Fp"],"kind":"struct"},"1:2656:107":{"crate_id":1,"path":["core","marker","Copy"],"kind":"trait"},"1:8845:10709":{"crate_id":1,"path":["core","hash","BuildHasherDefault"],"kind":"struct"},"1:6907:5509":{"crate_id":1,"path":["core","iter","sources","repeat_with","repeat_with"],"kind":"function"},"1:2809:10533":{"crate_id":1,"path":["core","ops","bit","Shl"],"kind":"trait"},"1:52267:14235":{"crate_id":1,"path":["core","core_arch","simd","i32x4"],"kind":"struct"},"1:53871:14240":{"crate_id":1,"path":["core","core_arch","simd","i64x8"],"kind":"struct"},"1:4173:201":{"crate_id":1,"path":["core","cell","RefCell"],"kind":"struct"},"1:8737:702":{"crate_id":1,"path":["core","hash"],"kind":"module"},"1:58441:10466":{"crate_id":1,"path":["core","f64"],"kind":"primitive"},"1:49820:7668":{"crate_id":1,"path":["core","slice","iter","ArrayChunks"],"kind":"struct"},"1:21033:14279":{"crate_id":1,"path":["core","num","bignum","Big32x40"],"kind":"struct"},"1:21946:163":{"crate_id":1,"path":["core","num","nonzero","NonZeroI128"],"kind":"struct"},"0:682:2677":{"crate_id":0,"path":["alloc","borrow","Cow","Owned"],"kind":"variant"},"1:50396:10932":{"crate_id":1,"path":["core","str","pattern","CharArraySearcher"],"kind":"struct"},"1:10141:2866":{"crate_id":1,"path":["core","slice","raw","from_raw_parts"],"kind":"function"},"1:50708:10890":{"crate_id":1,"path":["core","str","BytesIsNotEmpty"],"kind":"struct"},"1:2426:14165":{"crate_id":1,"path":["core","convert","num","private","Sealed"],"kind":"trait"},"1:8127:333":{"crate_id":1,"path":["core","sync","atomic"],"kind":"module"},"1:48141:204":{"crate_id":1,"path":["core","result","Result"],"kind":"enum"},"1:47228:10748":{"crate_id":1,"path":["core","iter","adapters","skip_while","SkipWhile"],"kind":"struct"},"0:667:225":{"crate_id":0,"path":["alloc","borrow","ToOwned"],"kind":"trait"},"1:2209:1793":{"crate_id":1,"path":["core","borrow"],"kind":"module"},"1:49289:10710":{"crate_id":1,"path":["core","hash","sip","SipHasher"],"kind":"struct"},"1:48614:10995":{"crate_id":1,"path":["core","sync","exclusive","Exclusive"],"kind":"struct"},"1:2745:10525":{"crate_id":1,"path":["core","ops","arith","Mul"],"kind":"trait"},"1:4:976":{"crate_id":1,"path":["core","panic"],"kind":"macro"},"1:46728:10687":{"crate_id":1,"path":["core","async_iter","from_iter","FromIter"],"kind":"struct"},"1:46992:10843":{"crate_id":1,"path":["core","ffi","VaList"],"kind":"struct"},"1:50716:14309":{"crate_id":1,"path":["core","time","Nanoseconds"],"kind":"struct"},"1:3181:2331":{"crate_id":1,"path":["core","ops","unsize","CoerceUnsized"],"kind":"trait"},"1:56954:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:2651:2197":{"crate_id":1,"path":["core","marker","Sized"],"kind":"trait"},"1:58448:10473":{"crate_id":1,"path":["core","u16"],"kind":"primitive"},"0:4280:635":{"crate_id":0,"path":["alloc","ffi"],"kind":"module"},"1:3218:2333":{"crate_id":1,"path":["core","ops","unsize","DispatchFromDyn"],"kind":"trait"},"1:53974:14680":{"crate_id":1,"path":["core","core_arch","x86","__m128"],"kind":"struct"},"1:50273:7937":{"crate_id":1,"path":["core","str","iter","EscapeDefault"],"kind":"struct"},"1:4068:10915":{"crate_id":1,"path":["core","cell","once","OnceCell"],"kind":"struct"},"1:2198:595":{"crate_id":1,"path":["core","ptr","eq"],"kind":"function"},"1:53701:14237":{"crate_id":1,"path":["core","core_arch","simd","i32x16"],"kind":"struct"},"1:51736:14241":{"crate_id":1,"path":["core","core_arch","simd","i8x4"],"kind":"struct"},"1:58452:10477":{"crate_id":1,"path":["core","isize"],"kind":"primitive"},"1:9110:216":{"crate_id":1,"path":["core","slice","index","SliceIndex"],"kind":"trait"},"1:46431:4811":{"crate_id":1,"path":["core","ops","range","Bound"],"kind":"enum"},"1:50248:7926":{"crate_id":1,"path":["core","str","iter","SplitAsciiWhitespace"],"kind":"struct"},"1:50239:7927":{"crate_id":1,"path":["core","str","iter","SplitWhitespace"],"kind":"struct"},"1:47490:10723":{"crate_id":1,"path":["core","iter","sources","repeat","Repeat"],"kind":"struct"},"1:9191:3801":{"crate_id":1,"path":["core","slice","index","range"],"kind":"function"},"1:52669:14252":{"crate_id":1,"path":["core","core_arch","simd","u16x16"],"kind":"struct"},"1:8571:110":{"crate_id":1,"path":["core","fmt","macros","Debug"],"kind":"proc_derive"},"1:46345:193":{"crate_id":1,"path":["core","ops","range","RangeFrom"],"kind":"struct"},"1:2733:961":{"crate_id":1,"path":["core","ops"],"kind":"module"},"1:8575:6922":{"crate_id":1,"path":["core","fmt","Octal"],"kind":"trait"},"1:1598:1311":{"crate_id":1,"path":["core","mem","size_of_val"],"kind":"function"},"1:46439:4823":{"crate_id":1,"path":["core","ops","range","Bound","Unbounded"],"kind":"foreign_type"},"1:49061:71":{"crate_id":1,"path":["core","fmt","ArgumentV1"],"kind":"struct"},"1:52715:14256":{"crate_id":1,"path":["core","core_arch","simd","u32x8"],"kind":"struct"},"1:50712:10891":{"crate_id":1,"path":["core","str","UnsafeBytesToStr"],"kind":"struct"},"1:52410:14630":{"crate_id":1,"path":["core","core_arch","simd","m8x16"],"kind":"struct"},"1:10147:7675":{"crate_id":1,"path":["core","slice","raw","from_ref"],"kind":"function"},"1:21228:14190":{"crate_id":1,"path":["core","num","dec2flt","FloatErrorKind"],"kind":"enum"},"1:54069:14687":{"crate_id":1,"path":["core","core_arch","x86","__m512d"],"kind":"struct"},"1:8379:6923":{"crate_id":1,"path":["core","fmt","builders","DebugList"],"kind":"struct"},"1:7814:7918":{"crate_id":1,"path":["core","panicking","assert_matches_failed","Pattern"],"kind":"struct"},"1:21192:14522":{"crate_id":1,"path":["core","num","dec2flt","number","Number"],"kind":"struct"},"0:4810:1314":{"crate_id":0,"path":["alloc","slice"],"kind":"module"},"1:20677:14205":{"crate_id":1,"path":["core","core_simd","ord","SimdPartialOrd"],"kind":"trait"},"1:1626:571":{"crate_id":1,"path":["core","mem","drop"],"kind":"function"},"0:6734:3475":{"crate_id":0,"path":["alloc","collections","binary_heap","IntoIter"],"kind":"struct"},"1:2305:183":{"crate_id":1,"path":["core","cmp","PartialOrd"],"kind":"trait"},"1:8587:6930":{"crate_id":1,"path":["core","fmt","UpperExp"],"kind":"trait"},"1:8528:130":{"crate_id":1,"path":["core","fmt","Formatter"],"kind":"struct"},"1:1750:10566":{"crate_id":1,"path":["core","ptr","metadata","DynMetadata"],"kind":"struct"},"1:52591:14264":{"crate_id":1,"path":["core","core_arch","simd","u8x32"],"kind":"struct"},"1:50756:14311":{"crate_id":1,"path":["core","time","TryFromFloatSecsError"],"kind":"struct"},"1:2720:2137":{"crate_id":1,"path":["core","marker","Destruct"],"kind":"trait"},"1:21781:10290":{"crate_id":1,"path":["core","num","nonzero","NonZeroUsize"],"kind":"struct"},"1:20212:14161":{"crate_id":1,"path":["core","core_simd","elements","uint","SimdUint"],"kind":"trait"},"1:49794:7671":{"crate_id":1,"path":["core","slice","iter","ArrayWindows"],"kind":"struct"},"1:48234:84":{"crate_id":1,"path":["core","sync","atomic","AtomicI8"],"kind":"struct"},"1:2546:114":{"crate_id":1,"path":["core","default","Default"],"kind":"trait"},"1:46902:101":{"crate_id":1,"path":["core","ffi","c_str","CStr"],"kind":"struct"},"1:49039:126":{"crate_id":1,"path":["core","fmt","Error"],"kind":"struct"},"1:2735:2887":{"crate_id":1,"path":["core","ops","arith","Add"],"kind":"trait"},"1:11988:10694":{"crate_id":1,"path":["core","const_closure","ConstFnMutClosure"],"kind":"struct"},"1:49773:7684":{"crate_id":1,"path":["core","slice","iter","ChunksExact"],"kind":"struct"},"1:21160:14194":{"crate_id":1,"path":["core","num","dec2flt","common","BiasedFp"],"kind":"struct"},"1:52335:14223":{"crate_id":1,"path":["core","core_arch","simd","f64x2"],"kind":"struct"},"1:2472:131":{"crate_id":1,"path":["core","convert","From"],"kind":"trait"},"1:47481:10722":{"crate_id":1,"path":["core","iter","sources","once_with","OnceWith"],"kind":"struct"},"1:10974:7939":{"crate_id":1,"path":["core","str","traits","FromStr"],"kind":"trait"},"0:5360:226":{"crate_id":0,"path":["alloc","string","ToString"],"kind":"trait"},"1:2655:219":{"crate_id":1,"path":["core","marker","StructuralEq"],"kind":"trait"},"1:2213:98":{"crate_id":1,"path":["core","borrow","BorrowMut"],"kind":"trait"},"1:54122:14690":{"crate_id":1,"path":["core","core_arch","x86","__m512bh"],"kind":"struct"},"1:56889:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:50264:7936":{"crate_id":1,"path":["core","str","iter","EscapeDebug"],"kind":"struct"},"1:49875:7695":{"crate_id":1,"path":["core","slice","iter","RChunksExactMut"],"kind":"struct"},"1:8138:86":{"crate_id":1,"path":["core","sync","atomic","AtomicPtr"],"kind":"struct"},"1:39278:3609":{"crate_id":1,"path":["core","error","private","Internal"],"kind":"struct"},"1:58446:10471":{"crate_id":1,"path":["core","i128"],"kind":"primitive"},"1:58447:10472":{"crate_id":1,"path":["core","u8"],"kind":"primitive"},"0:745:3007":{"crate_id":0,"path":["alloc","collections","binary_heap"],"kind":"module"},"1:1741:14517":{"crate_id":1,"path":["core","ptr","metadata","PtrComponents"],"kind":"struct"},"1:48115:10920":{"crate_id":1,"path":["core","panic","panic_info","PanicInfo"],"kind":"struct"},"1:48310:81":{"crate_id":1,"path":["core","sync","atomic","AtomicI16"],"kind":"struct"},"1:50869:199":{"crate_id":1,"path":["core","future","ready","Ready"],"kind":"struct"},"0:3474:5281":{"crate_id":0,"path":["alloc","collections","linked_list","CursorMut"],"kind":"struct"},"1:48976:67":{"crate_id":1,"path":["core","fmt","Alignment"],"kind":"enum"},"1:2815:10534":{"crate_id":1,"path":["core","ops","bit","Shr"],"kind":"trait"},"0:5004:1344":{"crate_id":0,"path":["alloc","str"],"kind":"module"},"1:20149:14201":{"crate_id":1,"path":["core","core_simd","elements","float","SimdFloat"],"kind":"trait"},"1:11891:137":{"crate_id":1,"path":["core","alloc","global","GlobalAlloc"],"kind":"trait"},"1:21334:14740":{"crate_id":1,"path":["core","num","fmt","Formatted"],"kind":"struct"},"0:6816:3475":{"crate_id":0,"path":["alloc","collections","linked_list","IntoIter"],"kind":"struct"},"1:58435:10462":{"crate_id":1,"path":["core","slice"],"kind":"primitive"},"1:6789:15542":{"crate_id":1,"path":["core","iter","sources","from_generator","FromGenerator"],"kind":"struct"},"1:58451:10476":{"crate_id":1,"path":["core","u128"],"kind":"primitive"},"1:48192:3805":{"crate_id":1,"path":["core","result","IterMut"],"kind":"struct"},"1:52745:14259":{"crate_id":1,"path":["core","core_arch","simd","u64x4"],"kind":"struct"},"1:49009:67":{"crate_id":1,"path":["core","fmt","rt","v1","Alignment"],"kind":"enum"},"1:6498:6102":{"crate_id":1,"path":["core","iter","adapters","zip","TrustedRandomAccessNoCoerce"],"kind":"trait"},"1:53947:14225":{"crate_id":1,"path":["core","core_arch","simd","f64x8"],"kind":"struct"},"0:3675:3010":{"crate_id":0,"path":["alloc","collections","vec_deque"],"kind":"module"},"1:20020:40115":{"crate_id":1,"path":["core","core_simd","swizzle","deinterleave","Odd"],"kind":"struct"},"1:8568:110":{"crate_id":1,"path":["core","fmt","Debug"],"kind":"trait"},"1:11733:16000":{"crate_id":1,"path":["core","future","from_generator","GenFuture"],"kind":"struct"},"1:53985:14681":{"crate_id":1,"path":["core","core_arch","x86","__m128d"],"kind":"struct"},"1:51860:14623":{"crate_id":1,"path":["core","core_arch","simd","u64x1"],"kind":"struct"},"1:2658:222":{"crate_id":1,"path":["core","marker","Sync"],"kind":"trait"},"1:47196:10746":{"crate_id":1,"path":["core","iter","adapters","scan","Scan"],"kind":"struct"},"1:20266:14165":{"crate_id":1,"path":["core","core_simd","lane_count","sealed","Sealed"],"kind":"trait"},"1:38069:177":{"crate_id":1,"path":["core","cmp","Ordering"],"kind":"enum"},"1:8573:118":{"crate_id":1,"path":["core","fmt","Display"],"kind":"trait"},"1:11629:38188":{"crate_id":1,"path":["core","future","join","MaybeDone"],"kind":"enum"},"1:52289:14238":{"crate_id":1,"path":["core","core_arch","simd","i64x2"],"kind":"struct"},"1:11013:1760":{"crate_id":1,"path":["core","str","pattern"],"kind":"module"},"1:8517:204":{"crate_id":1,"path":["core","fmt","Result"],"kind":"typedef"},"1:29514:67":{"crate_id":1,"path":["core","ptr","alignment","Alignment"],"kind":"struct"},"1:2750:10524":{"crate_id":1,"path":["core","ops","arith","Div"],"kind":"trait"},"1:47143:10752":{"crate_id":1,"path":["core","iter","adapters","intersperse","Intersperse"],"kind":"struct"},"1:53763:14257":{"crate_id":1,"path":["core","core_arch","simd","u32x16"],"kind":"struct"},"1:9499:7700":{"crate_id":1,"path":["core","slice","iter","RSplitMut"],"kind":"struct"},"1:10584:7933":{"crate_id":1,"path":["core","str","converts","from_utf8_unchecked_mut"],"kind":"function"},"1:51666:14622":{"crate_id":1,"path":["core","core_arch","simd","i8x2"],"kind":"struct"},"1:46949:6206":{"crate_id":1,"path":["core","ffi","c_char"],"kind":"typedef"},"1:48057:3356":{"crate_id":1,"path":["core","option","Iter"],"kind":"struct"},"1:2695:10673":{"crate_id":1,"path":["core","marker","Freeze"],"kind":"trait"},"1:10763:10897":{"crate_id":1,"path":["core","str","iter","SplitNInternal"],"kind":"struct"},"1:51842:14254":{"crate_id":1,"path":["core","core_arch","simd","u32x2"],"kind":"struct"},"1:10802:10896":{"crate_id":1,"path":["core","str","iter","MatchesInternal"],"kind":"struct"},"1:39282:3476":{"crate_id":1,"path":["core","error","Source"],"kind":"struct"},"1:2663:2844":{"crate_id":1,"path":["core","marker","PhantomData"],"kind":"struct"},"0:5829:1505":{"crate_id":0,"path":["alloc","vec"],"kind":"module"},"1:5827:10753":{"crate_id":1,"path":["core","iter","adapters","intersperse","IntersperseWith"],"kind":"struct"},"1:2259:416":{"crate_id":1,"path":["core","cmp"],"kind":"module"},"1:2914:2771":{"crate_id":1,"path":["core","ops","function","Fn"],"kind":"trait"},"1:4018:7100":{"crate_id":1,"path":["core","cell"],"kind":"module"},"1:48576:92":{"crate_id":1,"path":["core","sync","atomic","AtomicUsize"],"kind":"struct"},"1:51712:14249":{"crate_id":1,"path":["core","core_arch","simd","u16x2"],"kind":"struct"},"1:2268:123":{"crate_id":1,"path":["core","cmp","Eq"],"kind":"trait"},"1:11018:7918":{"crate_id":1,"path":["core","str","pattern","Pattern"],"kind":"trait"},"1:21367:10857":{"crate_id":1,"path":["core","num","error","IntErrorKind"],"kind":"enum"},"1:2799:4874":{"crate_id":1,"path":["core","ops","bit","BitOr"],"kind":"trait"},"1:58429:10457":{"crate_id":1,"path":["core","never"],"kind":"primitive"},"0:111:282":{"crate_id":0,"path":["alloc","alloc","alloc_zeroed"],"kind":"function"},"1:1610:7102":{"crate_id":1,"path":["core","mem","align_of_val_raw"],"kind":"function"},"1:21:660":{"crate_id":1,"path":["core","format_args"],"kind":"macro"},"1:11608:10704":{"crate_id":1,"path":["core","future","into_future","IntoFuture"],"kind":"trait"},"1:47499:10724":{"crate_id":1,"path":["core","iter","sources","repeat_n","RepeatN"],"kind":"struct"},"1:2654:220":{"crate_id":1,"path":["core","marker","StructuralPartialEq"],"kind":"trait"},"1:46204:10546":{"crate_id":1,"path":["core","ops","control_flow","ControlFlow"],"kind":"enum"},"1:2475:231":{"crate_id":1,"path":["core","convert","TryInto"],"kind":"trait"},"1:2825:10536":{"crate_id":1,"path":["core","ops","bit","BitOrAssign"],"kind":"trait"},"1:58434:10461":{"crate_id":1,"path":["core","array"],"kind":"primitive"},"1:8518:6928":{"crate_id":1,"path":["core","fmt","Write"],"kind":"trait"},"1:10786:10894":{"crate_id":1,"path":["core","str","iter","MatchIndicesInternal"],"kind":"struct"},"1:2644:214":{"crate_id":1,"path":["core","marker","Send"],"kind":"trait"},"1:52359:14224":{"crate_id":1,"path":["core","core_arch","simd","f64x4"],"kind":"struct"},"1:20846:38933":{"crate_id":1,"path":["core","core_simd","vector","splat","Splat"],"kind":"struct"},"1:46809:10980":{"crate_id":1,"path":["core","char","EscapeUnicodeState"],"kind":"enum"},"1:56941:239":{"crate_id":1,"path":["core","core_simd","fmt","fmt","Wrapper"],"kind":"struct"},"1:52143:14258":{"crate_id":1,"path":["core","core_arch","simd","u64x2"],"kind":"struct"},"1:48209:177":{"crate_id":1,"path":["core","sync","atomic","Ordering"],"kind":"enum"},"1:46433:4814":{"crate_id":1,"path":["core","ops","range","Bound","Included"],"kind":"foreign_type"},"1:8840:10708":{"crate_id":1,"path":["core","hash","BuildHasher"],"kind":"trait"},"0:4463:1795":{"crate_id":0,"path":["alloc","rc"],"kind":"module"},"1:46832:10981":{"crate_id":1,"path":["core","char","EscapeDefaultState"],"kind":"enum"}},"external_crates":{"3":{"name":"rustc_std_workspace_core","html_root_url":"https://doc.rust-lang.org/nightly/"},"1":{"name":"core","html_root_url":"https://doc.rust-lang.org/nightly/"},"2":{"name":"compiler_builtins","html_root_url":"https://doc.rust-lang.org/nightly/"}},"format_version":23}